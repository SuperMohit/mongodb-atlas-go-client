/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiTeamView struct for ApiTeamView
type ApiTeamView struct {
	// Unique 24-hexadecimal digit string that identifies this team.
	Id string `json:"id"`
	// List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.
	Links []Link `json:"links"`
	// Human-readable label that identifies the team.
	Name string `json:"name"`
	// List that contains the MongoDB Cloud users in this team.
	Usernames []string `json:"usernames"`
}

// NewApiTeamView instantiates a new ApiTeamView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiTeamView(id string, links []Link, name string, usernames []string) *ApiTeamView {
	this := ApiTeamView{}
	this.Id = id
	this.Links = links
	this.Name = name
	this.Usernames = usernames
	return &this
}

// NewApiTeamViewWithDefaults instantiates a new ApiTeamView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiTeamViewWithDefaults() *ApiTeamView {
	this := ApiTeamView{}
	return &this
}

// GetId returns the Id field value
func (o *ApiTeamView) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ApiTeamView) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ApiTeamView) SetId(v string) {
	o.Id = v
}

// GetLinks returns the Links field value
func (o *ApiTeamView) GetLinks() []Link {
	if o == nil {
		var ret []Link
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *ApiTeamView) GetLinksOk() ([]Link, bool) {
	if o == nil {
    return nil, false
	}
	return o.Links, true
}

// SetLinks sets field value
func (o *ApiTeamView) SetLinks(v []Link) {
	o.Links = v
}

// GetName returns the Name field value
func (o *ApiTeamView) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ApiTeamView) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ApiTeamView) SetName(v string) {
	o.Name = v
}

// GetUsernames returns the Usernames field value
func (o *ApiTeamView) GetUsernames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Usernames
}

// GetUsernamesOk returns a tuple with the Usernames field value
// and a boolean to check if the value has been set.
func (o *ApiTeamView) GetUsernamesOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Usernames, true
}

// SetUsernames sets field value
func (o *ApiTeamView) SetUsernames(v []string) {
	o.Usernames = v
}

func (o ApiTeamView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["links"] = o.Links
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["usernames"] = o.Usernames
	}
	return json.Marshal(toSerialize)
}

type NullableApiTeamView struct {
	value *ApiTeamView
	isSet bool
}

func (v NullableApiTeamView) Get() *ApiTeamView {
	return v.value
}

func (v *NullableApiTeamView) Set(val *ApiTeamView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiTeamView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiTeamView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiTeamView(val *ApiTeamView) *NullableApiTeamView {
	return &NullableApiTeamView{value: val, isSet: true}
}

func (v NullableApiTeamView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiTeamView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


