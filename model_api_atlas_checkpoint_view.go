/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// ApiAtlasCheckpointView struct for ApiAtlasCheckpointView
type ApiAtlasCheckpointView struct {
	// Unique 24-hexadecimal digit string that identifies the cluster that contains the checkpoint.
	ClusterId *string `json:"clusterId,omitempty"`
	// Date and time when the checkpoint completed and the balancer restarted. This parameter expresses its value in the ISO 8601 timestamp format in UTC.
	Completed *time.Time `json:"completed,omitempty"`
	// Unique 24-hexadecimal digit string that identifies the project that owns the checkpoints.
	GroupId *string `json:"groupId,omitempty"`
	// Unique 24-hexadecimal digit string that identifies checkpoint.
	Id *string `json:"id,omitempty"`
	// List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.
	Links []Link `json:"links"`
	// Metadata that describes the complete snapshot.  - For a replica set, this array contains a single document. - For a sharded cluster, this array contains one document for each shard plus one document for the config host.
	Parts []ApiCheckpointPartView `json:"parts,omitempty"`
	// Flag that indicates whether MongoDB Cloud can use the checkpoint for a restore.
	Restorable *bool `json:"restorable,omitempty"`
	// Date and time when the balancer stopped and began the checkpoint. This parameter expresses its value in the ISO 8601 timestamp format in UTC.
	Started *time.Time `json:"started,omitempty"`
	// Date and time to which the checkpoint restores. This parameter expresses its value in the ISO 8601 timestamp format in UTC.
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// NewApiAtlasCheckpointView instantiates a new ApiAtlasCheckpointView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAtlasCheckpointView(links []Link) *ApiAtlasCheckpointView {
	this := ApiAtlasCheckpointView{}
	this.Links = links
	return &this
}

// NewApiAtlasCheckpointViewWithDefaults instantiates a new ApiAtlasCheckpointView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAtlasCheckpointViewWithDefaults() *ApiAtlasCheckpointView {
	this := ApiAtlasCheckpointView{}
	return &this
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise.
func (o *ApiAtlasCheckpointView) GetClusterId() string {
	if o == nil || isNil(o.ClusterId) {
		var ret string
		return ret
	}
	return *o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasCheckpointView) GetClusterIdOk() (*string, bool) {
	if o == nil || isNil(o.ClusterId) {
    return nil, false
	}
	return o.ClusterId, true
}

// HasClusterId returns a boolean if a field has been set.
func (o *ApiAtlasCheckpointView) HasClusterId() bool {
	if o != nil && !isNil(o.ClusterId) {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given string and assigns it to the ClusterId field.
func (o *ApiAtlasCheckpointView) SetClusterId(v string) {
	o.ClusterId = &v
}

// GetCompleted returns the Completed field value if set, zero value otherwise.
func (o *ApiAtlasCheckpointView) GetCompleted() time.Time {
	if o == nil || isNil(o.Completed) {
		var ret time.Time
		return ret
	}
	return *o.Completed
}

// GetCompletedOk returns a tuple with the Completed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasCheckpointView) GetCompletedOk() (*time.Time, bool) {
	if o == nil || isNil(o.Completed) {
    return nil, false
	}
	return o.Completed, true
}

// HasCompleted returns a boolean if a field has been set.
func (o *ApiAtlasCheckpointView) HasCompleted() bool {
	if o != nil && !isNil(o.Completed) {
		return true
	}

	return false
}

// SetCompleted gets a reference to the given time.Time and assigns it to the Completed field.
func (o *ApiAtlasCheckpointView) SetCompleted(v time.Time) {
	o.Completed = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *ApiAtlasCheckpointView) GetGroupId() string {
	if o == nil || isNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasCheckpointView) GetGroupIdOk() (*string, bool) {
	if o == nil || isNil(o.GroupId) {
    return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *ApiAtlasCheckpointView) HasGroupId() bool {
	if o != nil && !isNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *ApiAtlasCheckpointView) SetGroupId(v string) {
	o.GroupId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApiAtlasCheckpointView) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasCheckpointView) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApiAtlasCheckpointView) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ApiAtlasCheckpointView) SetId(v string) {
	o.Id = &v
}

// GetLinks returns the Links field value
func (o *ApiAtlasCheckpointView) GetLinks() []Link {
	if o == nil {
		var ret []Link
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *ApiAtlasCheckpointView) GetLinksOk() ([]Link, bool) {
	if o == nil {
    return nil, false
	}
	return o.Links, true
}

// SetLinks sets field value
func (o *ApiAtlasCheckpointView) SetLinks(v []Link) {
	o.Links = v
}

// GetParts returns the Parts field value if set, zero value otherwise.
func (o *ApiAtlasCheckpointView) GetParts() []ApiCheckpointPartView {
	if o == nil || isNil(o.Parts) {
		var ret []ApiCheckpointPartView
		return ret
	}
	return o.Parts
}

// GetPartsOk returns a tuple with the Parts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasCheckpointView) GetPartsOk() ([]ApiCheckpointPartView, bool) {
	if o == nil || isNil(o.Parts) {
    return nil, false
	}
	return o.Parts, true
}

// HasParts returns a boolean if a field has been set.
func (o *ApiAtlasCheckpointView) HasParts() bool {
	if o != nil && !isNil(o.Parts) {
		return true
	}

	return false
}

// SetParts gets a reference to the given []ApiCheckpointPartView and assigns it to the Parts field.
func (o *ApiAtlasCheckpointView) SetParts(v []ApiCheckpointPartView) {
	o.Parts = v
}

// GetRestorable returns the Restorable field value if set, zero value otherwise.
func (o *ApiAtlasCheckpointView) GetRestorable() bool {
	if o == nil || isNil(o.Restorable) {
		var ret bool
		return ret
	}
	return *o.Restorable
}

// GetRestorableOk returns a tuple with the Restorable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasCheckpointView) GetRestorableOk() (*bool, bool) {
	if o == nil || isNil(o.Restorable) {
    return nil, false
	}
	return o.Restorable, true
}

// HasRestorable returns a boolean if a field has been set.
func (o *ApiAtlasCheckpointView) HasRestorable() bool {
	if o != nil && !isNil(o.Restorable) {
		return true
	}

	return false
}

// SetRestorable gets a reference to the given bool and assigns it to the Restorable field.
func (o *ApiAtlasCheckpointView) SetRestorable(v bool) {
	o.Restorable = &v
}

// GetStarted returns the Started field value if set, zero value otherwise.
func (o *ApiAtlasCheckpointView) GetStarted() time.Time {
	if o == nil || isNil(o.Started) {
		var ret time.Time
		return ret
	}
	return *o.Started
}

// GetStartedOk returns a tuple with the Started field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasCheckpointView) GetStartedOk() (*time.Time, bool) {
	if o == nil || isNil(o.Started) {
    return nil, false
	}
	return o.Started, true
}

// HasStarted returns a boolean if a field has been set.
func (o *ApiAtlasCheckpointView) HasStarted() bool {
	if o != nil && !isNil(o.Started) {
		return true
	}

	return false
}

// SetStarted gets a reference to the given time.Time and assigns it to the Started field.
func (o *ApiAtlasCheckpointView) SetStarted(v time.Time) {
	o.Started = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *ApiAtlasCheckpointView) GetTimestamp() time.Time {
	if o == nil || isNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasCheckpointView) GetTimestampOk() (*time.Time, bool) {
	if o == nil || isNil(o.Timestamp) {
    return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *ApiAtlasCheckpointView) HasTimestamp() bool {
	if o != nil && !isNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *ApiAtlasCheckpointView) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

func (o ApiAtlasCheckpointView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ClusterId) {
		toSerialize["clusterId"] = o.ClusterId
	}
	if !isNil(o.Completed) {
		toSerialize["completed"] = o.Completed
	}
	if !isNil(o.GroupId) {
		toSerialize["groupId"] = o.GroupId
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["links"] = o.Links
	}
	if !isNil(o.Parts) {
		toSerialize["parts"] = o.Parts
	}
	if !isNil(o.Restorable) {
		toSerialize["restorable"] = o.Restorable
	}
	if !isNil(o.Started) {
		toSerialize["started"] = o.Started
	}
	if !isNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	return json.Marshal(toSerialize)
}

type NullableApiAtlasCheckpointView struct {
	value *ApiAtlasCheckpointView
	isSet bool
}

func (v NullableApiAtlasCheckpointView) Get() *ApiAtlasCheckpointView {
	return v.value
}

func (v *NullableApiAtlasCheckpointView) Set(val *ApiAtlasCheckpointView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasCheckpointView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasCheckpointView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasCheckpointView(val *ApiAtlasCheckpointView) *NullableApiAtlasCheckpointView {
	return &NullableApiAtlasCheckpointView{value: val, isSet: true}
}

func (v NullableApiAtlasCheckpointView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasCheckpointView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


