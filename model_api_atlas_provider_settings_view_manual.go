/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiAtlasProviderSettingsViewManual Group of settings that configure the provisioned MongoDB hosts. The options available relate to the cloud service provider.
type ApiAtlasProviderSettingsViewManual struct {
	// Cloud service provider that applies to the provisioned the hosts. The `TENANT` value corresponds to an `M2` or `M5` multi-tenant cluster. For multi-tenant deployments, set **providerSettings.providerName** to `TENANT` and specify the cloud service provider in **providerSettings.backingProviderName**.
	ProviderName string `json:"providerName"`
}

// NewApiAtlasProviderSettingsViewManual instantiates a new ApiAtlasProviderSettingsViewManual object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAtlasProviderSettingsViewManual(providerName string) *ApiAtlasProviderSettingsViewManual {
	this := ApiAtlasProviderSettingsViewManual{}
	this.ProviderName = providerName
	return &this
}

// NewApiAtlasProviderSettingsViewManualWithDefaults instantiates a new ApiAtlasProviderSettingsViewManual object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAtlasProviderSettingsViewManualWithDefaults() *ApiAtlasProviderSettingsViewManual {
	this := ApiAtlasProviderSettingsViewManual{}
	return &this
}

// GetProviderName returns the ProviderName field value
func (o *ApiAtlasProviderSettingsViewManual) GetProviderName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderName
}

// GetProviderNameOk returns a tuple with the ProviderName field value
// and a boolean to check if the value has been set.
func (o *ApiAtlasProviderSettingsViewManual) GetProviderNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ProviderName, true
}

// SetProviderName sets field value
func (o *ApiAtlasProviderSettingsViewManual) SetProviderName(v string) {
	o.ProviderName = v
}

func (o ApiAtlasProviderSettingsViewManual) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["providerName"] = o.ProviderName
	}
	return json.Marshal(toSerialize)
}

type NullableApiAtlasProviderSettingsViewManual struct {
	value *ApiAtlasProviderSettingsViewManual
	isSet bool
}

func (v NullableApiAtlasProviderSettingsViewManual) Get() *ApiAtlasProviderSettingsViewManual {
	return v.value
}

func (v *NullableApiAtlasProviderSettingsViewManual) Set(val *ApiAtlasProviderSettingsViewManual) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasProviderSettingsViewManual) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasProviderSettingsViewManual) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasProviderSettingsViewManual(val *ApiAtlasProviderSettingsViewManual) *NullableApiAtlasProviderSettingsViewManual {
	return &NullableApiAtlasProviderSettingsViewManual{value: val, isSet: true}
}

func (v NullableApiAtlasProviderSettingsViewManual) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasProviderSettingsViewManual) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


