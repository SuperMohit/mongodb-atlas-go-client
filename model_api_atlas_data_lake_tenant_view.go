/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiAtlasDataLakeTenantView struct for ApiAtlasDataLakeTenantView
type ApiAtlasDataLakeTenantView struct {
	CloudProviderConfig *ApiAtlasDataLakeCloudProviderConfigView `json:"cloudProviderConfig,omitempty"`
	DataProcessRegion *ApiAtlasDataLakeDataProcessRegionView `json:"dataProcessRegion,omitempty"`
	// Human-readable label that identifies the data lake.
	Name *string `json:"name,omitempty"`
	Storage *ApiAtlasDataLakeStorageView `json:"storage,omitempty"`
}

// NewApiAtlasDataLakeTenantView instantiates a new ApiAtlasDataLakeTenantView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAtlasDataLakeTenantView() *ApiAtlasDataLakeTenantView {
	this := ApiAtlasDataLakeTenantView{}
	return &this
}

// NewApiAtlasDataLakeTenantViewWithDefaults instantiates a new ApiAtlasDataLakeTenantView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAtlasDataLakeTenantViewWithDefaults() *ApiAtlasDataLakeTenantView {
	this := ApiAtlasDataLakeTenantView{}
	return &this
}

// GetCloudProviderConfig returns the CloudProviderConfig field value if set, zero value otherwise.
func (o *ApiAtlasDataLakeTenantView) GetCloudProviderConfig() ApiAtlasDataLakeCloudProviderConfigView {
	if o == nil || isNil(o.CloudProviderConfig) {
		var ret ApiAtlasDataLakeCloudProviderConfigView
		return ret
	}
	return *o.CloudProviderConfig
}

// GetCloudProviderConfigOk returns a tuple with the CloudProviderConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasDataLakeTenantView) GetCloudProviderConfigOk() (*ApiAtlasDataLakeCloudProviderConfigView, bool) {
	if o == nil || isNil(o.CloudProviderConfig) {
    return nil, false
	}
	return o.CloudProviderConfig, true
}

// HasCloudProviderConfig returns a boolean if a field has been set.
func (o *ApiAtlasDataLakeTenantView) HasCloudProviderConfig() bool {
	if o != nil && !isNil(o.CloudProviderConfig) {
		return true
	}

	return false
}

// SetCloudProviderConfig gets a reference to the given ApiAtlasDataLakeCloudProviderConfigView and assigns it to the CloudProviderConfig field.
func (o *ApiAtlasDataLakeTenantView) SetCloudProviderConfig(v ApiAtlasDataLakeCloudProviderConfigView) {
	o.CloudProviderConfig = &v
}

// GetDataProcessRegion returns the DataProcessRegion field value if set, zero value otherwise.
func (o *ApiAtlasDataLakeTenantView) GetDataProcessRegion() ApiAtlasDataLakeDataProcessRegionView {
	if o == nil || isNil(o.DataProcessRegion) {
		var ret ApiAtlasDataLakeDataProcessRegionView
		return ret
	}
	return *o.DataProcessRegion
}

// GetDataProcessRegionOk returns a tuple with the DataProcessRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasDataLakeTenantView) GetDataProcessRegionOk() (*ApiAtlasDataLakeDataProcessRegionView, bool) {
	if o == nil || isNil(o.DataProcessRegion) {
    return nil, false
	}
	return o.DataProcessRegion, true
}

// HasDataProcessRegion returns a boolean if a field has been set.
func (o *ApiAtlasDataLakeTenantView) HasDataProcessRegion() bool {
	if o != nil && !isNil(o.DataProcessRegion) {
		return true
	}

	return false
}

// SetDataProcessRegion gets a reference to the given ApiAtlasDataLakeDataProcessRegionView and assigns it to the DataProcessRegion field.
func (o *ApiAtlasDataLakeTenantView) SetDataProcessRegion(v ApiAtlasDataLakeDataProcessRegionView) {
	o.DataProcessRegion = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApiAtlasDataLakeTenantView) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasDataLakeTenantView) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApiAtlasDataLakeTenantView) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApiAtlasDataLakeTenantView) SetName(v string) {
	o.Name = &v
}

// GetStorage returns the Storage field value if set, zero value otherwise.
func (o *ApiAtlasDataLakeTenantView) GetStorage() ApiAtlasDataLakeStorageView {
	if o == nil || isNil(o.Storage) {
		var ret ApiAtlasDataLakeStorageView
		return ret
	}
	return *o.Storage
}

// GetStorageOk returns a tuple with the Storage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasDataLakeTenantView) GetStorageOk() (*ApiAtlasDataLakeStorageView, bool) {
	if o == nil || isNil(o.Storage) {
    return nil, false
	}
	return o.Storage, true
}

// HasStorage returns a boolean if a field has been set.
func (o *ApiAtlasDataLakeTenantView) HasStorage() bool {
	if o != nil && !isNil(o.Storage) {
		return true
	}

	return false
}

// SetStorage gets a reference to the given ApiAtlasDataLakeStorageView and assigns it to the Storage field.
func (o *ApiAtlasDataLakeTenantView) SetStorage(v ApiAtlasDataLakeStorageView) {
	o.Storage = &v
}

func (o ApiAtlasDataLakeTenantView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.CloudProviderConfig) {
		toSerialize["cloudProviderConfig"] = o.CloudProviderConfig
	}
	if !isNil(o.DataProcessRegion) {
		toSerialize["dataProcessRegion"] = o.DataProcessRegion
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Storage) {
		toSerialize["storage"] = o.Storage
	}
	return json.Marshal(toSerialize)
}

type NullableApiAtlasDataLakeTenantView struct {
	value *ApiAtlasDataLakeTenantView
	isSet bool
}

func (v NullableApiAtlasDataLakeTenantView) Get() *ApiAtlasDataLakeTenantView {
	return v.value
}

func (v *NullableApiAtlasDataLakeTenantView) Set(val *ApiAtlasDataLakeTenantView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasDataLakeTenantView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasDataLakeTenantView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasDataLakeTenantView(val *ApiAtlasDataLakeTenantView) *NullableApiAtlasDataLakeTenantView {
	return &NullableApiAtlasDataLakeTenantView{value: val, isSet: true}
}

func (v NullableApiAtlasDataLakeTenantView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasDataLakeTenantView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


