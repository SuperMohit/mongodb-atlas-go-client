/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiAtlasReplSpecsRegionSpecViewManual Physical location of the cloud provider that serves this collection of cluster nodes. MongoDB Cloud labels this parameter key with the cloud provider region in which it serves this set of nodes.
type ApiAtlasReplSpecsRegionSpecViewManual struct {
	// Number of analytics nodes to deploy in the specified region. Analytics nodes handle dedicated queries for reporting such as those from MongoDB Connector for Business Intelligence on MongoDB Cloud. You can't write to an analytics node. Elections can't make an analytic node the primary node.
	AnalyticsNodes *float32 `json:"analyticsNodes,omitempty"`
	// Number of electable nodes to deploy in the specified region. Electable nodes can become the primary and can facilitate local reads.
	ElectableNodes *float32 `json:"electableNodes,omitempty"`
	// Number that indicates the election priority of the region. - To identify the preferred region of the cluster, set this parameter to `7`.   The primary node runs in the **Preferred Region**. - To identify a read-only region, set this parameter to `0`.
	Priority *float32 `json:"priority,omitempty"`
	// Number of read-only nodes to deploy in the specified region. Read-only nodes can never become the primary member, but can facilitate local reads.
	ReadOnlyNodes *float32 `json:"readOnlyNodes,omitempty"`
}

// NewApiAtlasReplSpecsRegionSpecViewManual instantiates a new ApiAtlasReplSpecsRegionSpecViewManual object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAtlasReplSpecsRegionSpecViewManual() *ApiAtlasReplSpecsRegionSpecViewManual {
	this := ApiAtlasReplSpecsRegionSpecViewManual{}
	return &this
}

// NewApiAtlasReplSpecsRegionSpecViewManualWithDefaults instantiates a new ApiAtlasReplSpecsRegionSpecViewManual object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAtlasReplSpecsRegionSpecViewManualWithDefaults() *ApiAtlasReplSpecsRegionSpecViewManual {
	this := ApiAtlasReplSpecsRegionSpecViewManual{}
	return &this
}

// GetAnalyticsNodes returns the AnalyticsNodes field value if set, zero value otherwise.
func (o *ApiAtlasReplSpecsRegionSpecViewManual) GetAnalyticsNodes() float32 {
	if o == nil || isNil(o.AnalyticsNodes) {
		var ret float32
		return ret
	}
	return *o.AnalyticsNodes
}

// GetAnalyticsNodesOk returns a tuple with the AnalyticsNodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasReplSpecsRegionSpecViewManual) GetAnalyticsNodesOk() (*float32, bool) {
	if o == nil || isNil(o.AnalyticsNodes) {
    return nil, false
	}
	return o.AnalyticsNodes, true
}

// HasAnalyticsNodes returns a boolean if a field has been set.
func (o *ApiAtlasReplSpecsRegionSpecViewManual) HasAnalyticsNodes() bool {
	if o != nil && !isNil(o.AnalyticsNodes) {
		return true
	}

	return false
}

// SetAnalyticsNodes gets a reference to the given float32 and assigns it to the AnalyticsNodes field.
func (o *ApiAtlasReplSpecsRegionSpecViewManual) SetAnalyticsNodes(v float32) {
	o.AnalyticsNodes = &v
}

// GetElectableNodes returns the ElectableNodes field value if set, zero value otherwise.
func (o *ApiAtlasReplSpecsRegionSpecViewManual) GetElectableNodes() float32 {
	if o == nil || isNil(o.ElectableNodes) {
		var ret float32
		return ret
	}
	return *o.ElectableNodes
}

// GetElectableNodesOk returns a tuple with the ElectableNodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasReplSpecsRegionSpecViewManual) GetElectableNodesOk() (*float32, bool) {
	if o == nil || isNil(o.ElectableNodes) {
    return nil, false
	}
	return o.ElectableNodes, true
}

// HasElectableNodes returns a boolean if a field has been set.
func (o *ApiAtlasReplSpecsRegionSpecViewManual) HasElectableNodes() bool {
	if o != nil && !isNil(o.ElectableNodes) {
		return true
	}

	return false
}

// SetElectableNodes gets a reference to the given float32 and assigns it to the ElectableNodes field.
func (o *ApiAtlasReplSpecsRegionSpecViewManual) SetElectableNodes(v float32) {
	o.ElectableNodes = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *ApiAtlasReplSpecsRegionSpecViewManual) GetPriority() float32 {
	if o == nil || isNil(o.Priority) {
		var ret float32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasReplSpecsRegionSpecViewManual) GetPriorityOk() (*float32, bool) {
	if o == nil || isNil(o.Priority) {
    return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *ApiAtlasReplSpecsRegionSpecViewManual) HasPriority() bool {
	if o != nil && !isNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given float32 and assigns it to the Priority field.
func (o *ApiAtlasReplSpecsRegionSpecViewManual) SetPriority(v float32) {
	o.Priority = &v
}

// GetReadOnlyNodes returns the ReadOnlyNodes field value if set, zero value otherwise.
func (o *ApiAtlasReplSpecsRegionSpecViewManual) GetReadOnlyNodes() float32 {
	if o == nil || isNil(o.ReadOnlyNodes) {
		var ret float32
		return ret
	}
	return *o.ReadOnlyNodes
}

// GetReadOnlyNodesOk returns a tuple with the ReadOnlyNodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasReplSpecsRegionSpecViewManual) GetReadOnlyNodesOk() (*float32, bool) {
	if o == nil || isNil(o.ReadOnlyNodes) {
    return nil, false
	}
	return o.ReadOnlyNodes, true
}

// HasReadOnlyNodes returns a boolean if a field has been set.
func (o *ApiAtlasReplSpecsRegionSpecViewManual) HasReadOnlyNodes() bool {
	if o != nil && !isNil(o.ReadOnlyNodes) {
		return true
	}

	return false
}

// SetReadOnlyNodes gets a reference to the given float32 and assigns it to the ReadOnlyNodes field.
func (o *ApiAtlasReplSpecsRegionSpecViewManual) SetReadOnlyNodes(v float32) {
	o.ReadOnlyNodes = &v
}

func (o ApiAtlasReplSpecsRegionSpecViewManual) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AnalyticsNodes) {
		toSerialize["analyticsNodes"] = o.AnalyticsNodes
	}
	if !isNil(o.ElectableNodes) {
		toSerialize["electableNodes"] = o.ElectableNodes
	}
	if !isNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !isNil(o.ReadOnlyNodes) {
		toSerialize["readOnlyNodes"] = o.ReadOnlyNodes
	}
	return json.Marshal(toSerialize)
}

type NullableApiAtlasReplSpecsRegionSpecViewManual struct {
	value *ApiAtlasReplSpecsRegionSpecViewManual
	isSet bool
}

func (v NullableApiAtlasReplSpecsRegionSpecViewManual) Get() *ApiAtlasReplSpecsRegionSpecViewManual {
	return v.value
}

func (v *NullableApiAtlasReplSpecsRegionSpecViewManual) Set(val *ApiAtlasReplSpecsRegionSpecViewManual) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasReplSpecsRegionSpecViewManual) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasReplSpecsRegionSpecViewManual) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasReplSpecsRegionSpecViewManual(val *ApiAtlasReplSpecsRegionSpecViewManual) *NullableApiAtlasReplSpecsRegionSpecViewManual {
	return &NullableApiAtlasReplSpecsRegionSpecViewManual{value: val, isSet: true}
}

func (v NullableApiAtlasReplSpecsRegionSpecViewManual) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasReplSpecsRegionSpecViewManual) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


