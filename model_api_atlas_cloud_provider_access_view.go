/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiAtlasCloudProviderAccessView struct for ApiAtlasCloudProviderAccessView
type ApiAtlasCloudProviderAccessView struct {
	// List that contains the Amazon Web Services (AWS) IAM roles registered and authorized with MongoDB Cloud.
	AwsIamRoles []ApiAtlasCloudProviderAccessAWSIAMRoleView `json:"awsIamRoles,omitempty"`
}

// NewApiAtlasCloudProviderAccessView instantiates a new ApiAtlasCloudProviderAccessView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAtlasCloudProviderAccessView() *ApiAtlasCloudProviderAccessView {
	this := ApiAtlasCloudProviderAccessView{}
	return &this
}

// NewApiAtlasCloudProviderAccessViewWithDefaults instantiates a new ApiAtlasCloudProviderAccessView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAtlasCloudProviderAccessViewWithDefaults() *ApiAtlasCloudProviderAccessView {
	this := ApiAtlasCloudProviderAccessView{}
	return &this
}

// GetAwsIamRoles returns the AwsIamRoles field value if set, zero value otherwise.
func (o *ApiAtlasCloudProviderAccessView) GetAwsIamRoles() []ApiAtlasCloudProviderAccessAWSIAMRoleView {
	if o == nil || isNil(o.AwsIamRoles) {
		var ret []ApiAtlasCloudProviderAccessAWSIAMRoleView
		return ret
	}
	return o.AwsIamRoles
}

// GetAwsIamRolesOk returns a tuple with the AwsIamRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasCloudProviderAccessView) GetAwsIamRolesOk() ([]ApiAtlasCloudProviderAccessAWSIAMRoleView, bool) {
	if o == nil || isNil(o.AwsIamRoles) {
    return nil, false
	}
	return o.AwsIamRoles, true
}

// HasAwsIamRoles returns a boolean if a field has been set.
func (o *ApiAtlasCloudProviderAccessView) HasAwsIamRoles() bool {
	if o != nil && !isNil(o.AwsIamRoles) {
		return true
	}

	return false
}

// SetAwsIamRoles gets a reference to the given []ApiAtlasCloudProviderAccessAWSIAMRoleView and assigns it to the AwsIamRoles field.
func (o *ApiAtlasCloudProviderAccessView) SetAwsIamRoles(v []ApiAtlasCloudProviderAccessAWSIAMRoleView) {
	o.AwsIamRoles = v
}

func (o ApiAtlasCloudProviderAccessView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AwsIamRoles) {
		toSerialize["awsIamRoles"] = o.AwsIamRoles
	}
	return json.Marshal(toSerialize)
}

type NullableApiAtlasCloudProviderAccessView struct {
	value *ApiAtlasCloudProviderAccessView
	isSet bool
}

func (v NullableApiAtlasCloudProviderAccessView) Get() *ApiAtlasCloudProviderAccessView {
	return v.value
}

func (v *NullableApiAtlasCloudProviderAccessView) Set(val *ApiAtlasCloudProviderAccessView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasCloudProviderAccessView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasCloudProviderAccessView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasCloudProviderAccessView(val *ApiAtlasCloudProviderAccessView) *NullableApiAtlasCloudProviderAccessView {
	return &NullableApiAtlasCloudProviderAccessView{value: val, isSet: true}
}

func (v NullableApiAtlasCloudProviderAccessView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasCloudProviderAccessView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


