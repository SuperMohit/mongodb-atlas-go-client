/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ApiAtlasClusterTenantRegionsV15Manual - struct for ApiAtlasClusterTenantRegionsV15Manual
type ApiAtlasClusterTenantRegionsV15Manual struct {
	ApiAtlasClusterTenantRegionsV15AWSManual *ApiAtlasClusterTenantRegionsV15AWSManual
	ApiAtlasClusterTenantRegionsV15AzureManual *ApiAtlasClusterTenantRegionsV15AzureManual
	ApiAtlasClusterTenantRegionsV15GCPManual *ApiAtlasClusterTenantRegionsV15GCPManual
}

// ApiAtlasClusterTenantRegionsV15AWSManualAsApiAtlasClusterTenantRegionsV15Manual is a convenience function that returns ApiAtlasClusterTenantRegionsV15AWSManual wrapped in ApiAtlasClusterTenantRegionsV15Manual
func ApiAtlasClusterTenantRegionsV15AWSManualAsApiAtlasClusterTenantRegionsV15Manual(v *ApiAtlasClusterTenantRegionsV15AWSManual) ApiAtlasClusterTenantRegionsV15Manual {
	return ApiAtlasClusterTenantRegionsV15Manual{
		ApiAtlasClusterTenantRegionsV15AWSManual: v,
	}
}

// ApiAtlasClusterTenantRegionsV15AzureManualAsApiAtlasClusterTenantRegionsV15Manual is a convenience function that returns ApiAtlasClusterTenantRegionsV15AzureManual wrapped in ApiAtlasClusterTenantRegionsV15Manual
func ApiAtlasClusterTenantRegionsV15AzureManualAsApiAtlasClusterTenantRegionsV15Manual(v *ApiAtlasClusterTenantRegionsV15AzureManual) ApiAtlasClusterTenantRegionsV15Manual {
	return ApiAtlasClusterTenantRegionsV15Manual{
		ApiAtlasClusterTenantRegionsV15AzureManual: v,
	}
}

// ApiAtlasClusterTenantRegionsV15GCPManualAsApiAtlasClusterTenantRegionsV15Manual is a convenience function that returns ApiAtlasClusterTenantRegionsV15GCPManual wrapped in ApiAtlasClusterTenantRegionsV15Manual
func ApiAtlasClusterTenantRegionsV15GCPManualAsApiAtlasClusterTenantRegionsV15Manual(v *ApiAtlasClusterTenantRegionsV15GCPManual) ApiAtlasClusterTenantRegionsV15Manual {
	return ApiAtlasClusterTenantRegionsV15Manual{
		ApiAtlasClusterTenantRegionsV15GCPManual: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ApiAtlasClusterTenantRegionsV15Manual) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ApiAtlasClusterTenantRegionsV15AWSManual
	err = newStrictDecoder(data).Decode(&dst.ApiAtlasClusterTenantRegionsV15AWSManual)
	if err == nil {
		jsonApiAtlasClusterTenantRegionsV15AWSManual, _ := json.Marshal(dst.ApiAtlasClusterTenantRegionsV15AWSManual)
		if string(jsonApiAtlasClusterTenantRegionsV15AWSManual) == "{}" { // empty struct
			dst.ApiAtlasClusterTenantRegionsV15AWSManual = nil
		} else {
			match++
		}
	} else {
		dst.ApiAtlasClusterTenantRegionsV15AWSManual = nil
	}

	// try to unmarshal data into ApiAtlasClusterTenantRegionsV15AzureManual
	err = newStrictDecoder(data).Decode(&dst.ApiAtlasClusterTenantRegionsV15AzureManual)
	if err == nil {
		jsonApiAtlasClusterTenantRegionsV15AzureManual, _ := json.Marshal(dst.ApiAtlasClusterTenantRegionsV15AzureManual)
		if string(jsonApiAtlasClusterTenantRegionsV15AzureManual) == "{}" { // empty struct
			dst.ApiAtlasClusterTenantRegionsV15AzureManual = nil
		} else {
			match++
		}
	} else {
		dst.ApiAtlasClusterTenantRegionsV15AzureManual = nil
	}

	// try to unmarshal data into ApiAtlasClusterTenantRegionsV15GCPManual
	err = newStrictDecoder(data).Decode(&dst.ApiAtlasClusterTenantRegionsV15GCPManual)
	if err == nil {
		jsonApiAtlasClusterTenantRegionsV15GCPManual, _ := json.Marshal(dst.ApiAtlasClusterTenantRegionsV15GCPManual)
		if string(jsonApiAtlasClusterTenantRegionsV15GCPManual) == "{}" { // empty struct
			dst.ApiAtlasClusterTenantRegionsV15GCPManual = nil
		} else {
			match++
		}
	} else {
		dst.ApiAtlasClusterTenantRegionsV15GCPManual = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ApiAtlasClusterTenantRegionsV15AWSManual = nil
		dst.ApiAtlasClusterTenantRegionsV15AzureManual = nil
		dst.ApiAtlasClusterTenantRegionsV15GCPManual = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ApiAtlasClusterTenantRegionsV15Manual)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ApiAtlasClusterTenantRegionsV15Manual)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ApiAtlasClusterTenantRegionsV15Manual) MarshalJSON() ([]byte, error) {
	if src.ApiAtlasClusterTenantRegionsV15AWSManual != nil {
		return json.Marshal(&src.ApiAtlasClusterTenantRegionsV15AWSManual)
	}

	if src.ApiAtlasClusterTenantRegionsV15AzureManual != nil {
		return json.Marshal(&src.ApiAtlasClusterTenantRegionsV15AzureManual)
	}

	if src.ApiAtlasClusterTenantRegionsV15GCPManual != nil {
		return json.Marshal(&src.ApiAtlasClusterTenantRegionsV15GCPManual)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ApiAtlasClusterTenantRegionsV15Manual) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ApiAtlasClusterTenantRegionsV15AWSManual != nil {
		return obj.ApiAtlasClusterTenantRegionsV15AWSManual
	}

	if obj.ApiAtlasClusterTenantRegionsV15AzureManual != nil {
		return obj.ApiAtlasClusterTenantRegionsV15AzureManual
	}

	if obj.ApiAtlasClusterTenantRegionsV15GCPManual != nil {
		return obj.ApiAtlasClusterTenantRegionsV15GCPManual
	}

	// all schemas are nil
	return nil
}

type NullableApiAtlasClusterTenantRegionsV15Manual struct {
	value *ApiAtlasClusterTenantRegionsV15Manual
	isSet bool
}

func (v NullableApiAtlasClusterTenantRegionsV15Manual) Get() *ApiAtlasClusterTenantRegionsV15Manual {
	return v.value
}

func (v *NullableApiAtlasClusterTenantRegionsV15Manual) Set(val *ApiAtlasClusterTenantRegionsV15Manual) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasClusterTenantRegionsV15Manual) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasClusterTenantRegionsV15Manual) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasClusterTenantRegionsV15Manual(val *ApiAtlasClusterTenantRegionsV15Manual) *NullableApiAtlasClusterTenantRegionsV15Manual {
	return &NullableApiAtlasClusterTenantRegionsV15Manual{value: val, isSet: true}
}

func (v NullableApiAtlasClusterTenantRegionsV15Manual) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasClusterTenantRegionsV15Manual) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


