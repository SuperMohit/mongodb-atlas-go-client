/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiAtlasDataLakeStorageView Configuration information for each data store and its mapping to MongoDB Cloud databases.
type ApiAtlasDataLakeStorageView struct {
	// Array that contains the queryable databases and collections for this data lake.
	Databases []ApiAtlasDataLakeDatabaseView `json:"databases,omitempty"`
	// Array that contains the data stores for the data lake.
	Stores []ApiAtlasDataLakeStoreView `json:"stores,omitempty"`
}

// NewApiAtlasDataLakeStorageView instantiates a new ApiAtlasDataLakeStorageView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAtlasDataLakeStorageView() *ApiAtlasDataLakeStorageView {
	this := ApiAtlasDataLakeStorageView{}
	return &this
}

// NewApiAtlasDataLakeStorageViewWithDefaults instantiates a new ApiAtlasDataLakeStorageView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAtlasDataLakeStorageViewWithDefaults() *ApiAtlasDataLakeStorageView {
	this := ApiAtlasDataLakeStorageView{}
	return &this
}

// GetDatabases returns the Databases field value if set, zero value otherwise.
func (o *ApiAtlasDataLakeStorageView) GetDatabases() []ApiAtlasDataLakeDatabaseView {
	if o == nil || isNil(o.Databases) {
		var ret []ApiAtlasDataLakeDatabaseView
		return ret
	}
	return o.Databases
}

// GetDatabasesOk returns a tuple with the Databases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasDataLakeStorageView) GetDatabasesOk() ([]ApiAtlasDataLakeDatabaseView, bool) {
	if o == nil || isNil(o.Databases) {
    return nil, false
	}
	return o.Databases, true
}

// HasDatabases returns a boolean if a field has been set.
func (o *ApiAtlasDataLakeStorageView) HasDatabases() bool {
	if o != nil && !isNil(o.Databases) {
		return true
	}

	return false
}

// SetDatabases gets a reference to the given []ApiAtlasDataLakeDatabaseView and assigns it to the Databases field.
func (o *ApiAtlasDataLakeStorageView) SetDatabases(v []ApiAtlasDataLakeDatabaseView) {
	o.Databases = v
}

// GetStores returns the Stores field value if set, zero value otherwise.
func (o *ApiAtlasDataLakeStorageView) GetStores() []ApiAtlasDataLakeStoreView {
	if o == nil || isNil(o.Stores) {
		var ret []ApiAtlasDataLakeStoreView
		return ret
	}
	return o.Stores
}

// GetStoresOk returns a tuple with the Stores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasDataLakeStorageView) GetStoresOk() ([]ApiAtlasDataLakeStoreView, bool) {
	if o == nil || isNil(o.Stores) {
    return nil, false
	}
	return o.Stores, true
}

// HasStores returns a boolean if a field has been set.
func (o *ApiAtlasDataLakeStorageView) HasStores() bool {
	if o != nil && !isNil(o.Stores) {
		return true
	}

	return false
}

// SetStores gets a reference to the given []ApiAtlasDataLakeStoreView and assigns it to the Stores field.
func (o *ApiAtlasDataLakeStorageView) SetStores(v []ApiAtlasDataLakeStoreView) {
	o.Stores = v
}

func (o ApiAtlasDataLakeStorageView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Databases) {
		toSerialize["databases"] = o.Databases
	}
	if !isNil(o.Stores) {
		toSerialize["stores"] = o.Stores
	}
	return json.Marshal(toSerialize)
}

type NullableApiAtlasDataLakeStorageView struct {
	value *ApiAtlasDataLakeStorageView
	isSet bool
}

func (v NullableApiAtlasDataLakeStorageView) Get() *ApiAtlasDataLakeStorageView {
	return v.value
}

func (v *NullableApiAtlasDataLakeStorageView) Set(val *ApiAtlasDataLakeStorageView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasDataLakeStorageView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasDataLakeStorageView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasDataLakeStorageView(val *ApiAtlasDataLakeStorageView) *NullableApiAtlasDataLakeStorageView {
	return &NullableApiAtlasDataLakeStorageView{value: val, isSet: true}
}

func (v NullableApiAtlasDataLakeStorageView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasDataLakeStorageView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


