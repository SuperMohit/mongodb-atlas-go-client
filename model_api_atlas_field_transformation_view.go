/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiAtlasFieldTransformationView Field Transformations during ingestion of a Data Lake Pipeline.
type ApiAtlasFieldTransformationView struct {
	// Key in the document.
	Field *string `json:"field,omitempty"`
	// Type of transformation applied during the export of the namespace in a Data Lake Pipeline.
	Type *string `json:"type,omitempty"`
}

// NewApiAtlasFieldTransformationView instantiates a new ApiAtlasFieldTransformationView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAtlasFieldTransformationView() *ApiAtlasFieldTransformationView {
	this := ApiAtlasFieldTransformationView{}
	return &this
}

// NewApiAtlasFieldTransformationViewWithDefaults instantiates a new ApiAtlasFieldTransformationView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAtlasFieldTransformationViewWithDefaults() *ApiAtlasFieldTransformationView {
	this := ApiAtlasFieldTransformationView{}
	return &this
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *ApiAtlasFieldTransformationView) GetField() string {
	if o == nil || isNil(o.Field) {
		var ret string
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasFieldTransformationView) GetFieldOk() (*string, bool) {
	if o == nil || isNil(o.Field) {
    return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *ApiAtlasFieldTransformationView) HasField() bool {
	if o != nil && !isNil(o.Field) {
		return true
	}

	return false
}

// SetField gets a reference to the given string and assigns it to the Field field.
func (o *ApiAtlasFieldTransformationView) SetField(v string) {
	o.Field = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ApiAtlasFieldTransformationView) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasFieldTransformationView) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ApiAtlasFieldTransformationView) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ApiAtlasFieldTransformationView) SetType(v string) {
	o.Type = &v
}

func (o ApiAtlasFieldTransformationView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Field) {
		toSerialize["field"] = o.Field
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableApiAtlasFieldTransformationView struct {
	value *ApiAtlasFieldTransformationView
	isSet bool
}

func (v NullableApiAtlasFieldTransformationView) Get() *ApiAtlasFieldTransformationView {
	return v.value
}

func (v *NullableApiAtlasFieldTransformationView) Set(val *ApiAtlasFieldTransformationView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasFieldTransformationView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasFieldTransformationView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasFieldTransformationView(val *ApiAtlasFieldTransformationView) *NullableApiAtlasFieldTransformationView {
	return &NullableApiAtlasFieldTransformationView{value: val, isSet: true}
}

func (v NullableApiAtlasFieldTransformationView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasFieldTransformationView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


