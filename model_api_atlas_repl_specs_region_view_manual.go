/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiAtlasReplSpecsRegionViewManual Hardware specifications for nodes deployed in one specific region. Each **region** object describes the region's priority in elections and the number and type of MongoDB nodes that MongoDB Cloud deploys to the region.
type ApiAtlasReplSpecsRegionViewManual struct {
	Region ApiAtlasReplSpecsRegionSpecViewManual `json:"region"`
}

// NewApiAtlasReplSpecsRegionViewManual instantiates a new ApiAtlasReplSpecsRegionViewManual object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAtlasReplSpecsRegionViewManual(region ApiAtlasReplSpecsRegionSpecViewManual) *ApiAtlasReplSpecsRegionViewManual {
	this := ApiAtlasReplSpecsRegionViewManual{}
	this.Region = region
	return &this
}

// NewApiAtlasReplSpecsRegionViewManualWithDefaults instantiates a new ApiAtlasReplSpecsRegionViewManual object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAtlasReplSpecsRegionViewManualWithDefaults() *ApiAtlasReplSpecsRegionViewManual {
	this := ApiAtlasReplSpecsRegionViewManual{}
	return &this
}

// GetRegion returns the Region field value
func (o *ApiAtlasReplSpecsRegionViewManual) GetRegion() ApiAtlasReplSpecsRegionSpecViewManual {
	if o == nil {
		var ret ApiAtlasReplSpecsRegionSpecViewManual
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *ApiAtlasReplSpecsRegionViewManual) GetRegionOk() (*ApiAtlasReplSpecsRegionSpecViewManual, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *ApiAtlasReplSpecsRegionViewManual) SetRegion(v ApiAtlasReplSpecsRegionSpecViewManual) {
	o.Region = v
}

func (o ApiAtlasReplSpecsRegionViewManual) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["region"] = o.Region
	}
	return json.Marshal(toSerialize)
}

type NullableApiAtlasReplSpecsRegionViewManual struct {
	value *ApiAtlasReplSpecsRegionViewManual
	isSet bool
}

func (v NullableApiAtlasReplSpecsRegionViewManual) Get() *ApiAtlasReplSpecsRegionViewManual {
	return v.value
}

func (v *NullableApiAtlasReplSpecsRegionViewManual) Set(val *ApiAtlasReplSpecsRegionViewManual) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasReplSpecsRegionViewManual) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasReplSpecsRegionViewManual) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasReplSpecsRegionViewManual(val *ApiAtlasReplSpecsRegionViewManual) *NullableApiAtlasReplSpecsRegionViewManual {
	return &NullableApiAtlasReplSpecsRegionViewManual{value: val, isSet: true}
}

func (v NullableApiAtlasReplSpecsRegionViewManual) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasReplSpecsRegionViewManual) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


