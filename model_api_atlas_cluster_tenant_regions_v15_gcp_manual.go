/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ApiAtlasClusterTenantRegionsV15GCPManual Physical location from which MongoDB Cloud serves your MongoDB cluster nodes. The region you choose can affect network latency for clients accessing your databases. When MongoDB Cloud deploys a dedicated cluster, it checks if a VPC or VPC connection exists for that provider and region. If not, MongoDB Cloud creates them as part of the deployment. It assigns the VPC a Classless Inter-Domain Routing (CIDR) block.  To limit a new VPC peering connection to one CIDR block and region, create the connection first. Deploy the cluster after the connection starts. GCP Clusters and Multi-region clusters require one VPC peering connection for each region. MongoDB nodes can use only the peering connection that resides in the same region as the nodes to communicate with the peered VPC.
type ApiAtlasClusterTenantRegionsV15GCPManual string

// List of ApiAtlasClusterTenantRegionsV15GCPManual
const (
	ASIA_NORTHEAST_3 ApiAtlasClusterTenantRegionsV15GCPManual = "ASIA_NORTHEAST_3"
	ASIA_SOUTH_1 ApiAtlasClusterTenantRegionsV15GCPManual = "ASIA_SOUTH_1"
	ASIA_SOUTHEAST_2 ApiAtlasClusterTenantRegionsV15GCPManual = "ASIA_SOUTHEAST_2"
	CENTRAL_US ApiAtlasClusterTenantRegionsV15GCPManual = "CENTRAL_US"
	EASTERN_ASIA_PACIFIC ApiAtlasClusterTenantRegionsV15GCPManual = "EASTERN_ASIA_PACIFIC"
	NORTHEASTERN_ASIA_PACIFIC ApiAtlasClusterTenantRegionsV15GCPManual = "NORTHEASTERN_ASIA_PACIFIC"
	WESTERN_EUROPE ApiAtlasClusterTenantRegionsV15GCPManual = "WESTERN_EUROPE"
)

// All allowed values of ApiAtlasClusterTenantRegionsV15GCPManual enum
var AllowedApiAtlasClusterTenantRegionsV15GCPManualEnumValues = []ApiAtlasClusterTenantRegionsV15GCPManual{
	"ASIA_NORTHEAST_3",
	"ASIA_SOUTH_1",
	"ASIA_SOUTHEAST_2",
	"CENTRAL_US",
	"EASTERN_ASIA_PACIFIC",
	"NORTHEASTERN_ASIA_PACIFIC",
	"WESTERN_EUROPE",
}

func (v *ApiAtlasClusterTenantRegionsV15GCPManual) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApiAtlasClusterTenantRegionsV15GCPManual(value)
	for _, existing := range AllowedApiAtlasClusterTenantRegionsV15GCPManualEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApiAtlasClusterTenantRegionsV15GCPManual", value)
}

// NewApiAtlasClusterTenantRegionsV15GCPManualFromValue returns a pointer to a valid ApiAtlasClusterTenantRegionsV15GCPManual
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApiAtlasClusterTenantRegionsV15GCPManualFromValue(v string) (*ApiAtlasClusterTenantRegionsV15GCPManual, error) {
	ev := ApiAtlasClusterTenantRegionsV15GCPManual(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApiAtlasClusterTenantRegionsV15GCPManual: valid values are %v", v, AllowedApiAtlasClusterTenantRegionsV15GCPManualEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApiAtlasClusterTenantRegionsV15GCPManual) IsValid() bool {
	for _, existing := range AllowedApiAtlasClusterTenantRegionsV15GCPManualEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ApiAtlasClusterTenantRegionsV15GCPManual value
func (v ApiAtlasClusterTenantRegionsV15GCPManual) Ptr() *ApiAtlasClusterTenantRegionsV15GCPManual {
	return &v
}

type NullableApiAtlasClusterTenantRegionsV15GCPManual struct {
	value *ApiAtlasClusterTenantRegionsV15GCPManual
	isSet bool
}

func (v NullableApiAtlasClusterTenantRegionsV15GCPManual) Get() *ApiAtlasClusterTenantRegionsV15GCPManual {
	return v.value
}

func (v *NullableApiAtlasClusterTenantRegionsV15GCPManual) Set(val *ApiAtlasClusterTenantRegionsV15GCPManual) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasClusterTenantRegionsV15GCPManual) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasClusterTenantRegionsV15GCPManual) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasClusterTenantRegionsV15GCPManual(val *ApiAtlasClusterTenantRegionsV15GCPManual) *NullableApiAtlasClusterTenantRegionsV15GCPManual {
	return &NullableApiAtlasClusterTenantRegionsV15GCPManual{value: val, isSet: true}
}

func (v NullableApiAtlasClusterTenantRegionsV15GCPManual) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasClusterTenantRegionsV15GCPManual) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

