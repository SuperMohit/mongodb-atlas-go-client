/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiAtlasGCPPeerVpcView Group of Network Peering connection settings.
type ApiAtlasGCPPeerVpcView struct {
	// Unique 24-hexadecimal digit string that identifies the MongoDB Cloud network container that contains the specified network peering connection.
	ContainerId string `json:"containerId"`
	// Details of the error returned when requesting a GCP network peering resource. The resource returns `null` if the request succeeded.
	ErrorMessage *string `json:"errorMessage,omitempty"`
	// Human-readable label that identifies the GCP project that contains the network that you want to peer with the MongoDB Cloud VPC.
	GcpProjectId string `json:"gcpProjectId"`
	// Unique 24-hexadecimal digit string that identifies the network peering connection.
	Id *string `json:"id,omitempty"`
	// Human-readable label that identifies the network to peer with the MongoDB Cloud VPC.
	NetworkName string `json:"networkName"`
	// State of the network peering connection at the time you made the request.
	Status *string `json:"status,omitempty"`
}

// NewApiAtlasGCPPeerVpcView instantiates a new ApiAtlasGCPPeerVpcView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAtlasGCPPeerVpcView(containerId string, gcpProjectId string, networkName string) *ApiAtlasGCPPeerVpcView {
	this := ApiAtlasGCPPeerVpcView{}
	this.ContainerId = containerId
	this.GcpProjectId = gcpProjectId
	this.NetworkName = networkName
	return &this
}

// NewApiAtlasGCPPeerVpcViewWithDefaults instantiates a new ApiAtlasGCPPeerVpcView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAtlasGCPPeerVpcViewWithDefaults() *ApiAtlasGCPPeerVpcView {
	this := ApiAtlasGCPPeerVpcView{}
	return &this
}

// GetContainerId returns the ContainerId field value
func (o *ApiAtlasGCPPeerVpcView) GetContainerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContainerId
}

// GetContainerIdOk returns a tuple with the ContainerId field value
// and a boolean to check if the value has been set.
func (o *ApiAtlasGCPPeerVpcView) GetContainerIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ContainerId, true
}

// SetContainerId sets field value
func (o *ApiAtlasGCPPeerVpcView) SetContainerId(v string) {
	o.ContainerId = v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *ApiAtlasGCPPeerVpcView) GetErrorMessage() string {
	if o == nil || isNil(o.ErrorMessage) {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasGCPPeerVpcView) GetErrorMessageOk() (*string, bool) {
	if o == nil || isNil(o.ErrorMessage) {
    return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *ApiAtlasGCPPeerVpcView) HasErrorMessage() bool {
	if o != nil && !isNil(o.ErrorMessage) {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *ApiAtlasGCPPeerVpcView) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetGcpProjectId returns the GcpProjectId field value
func (o *ApiAtlasGCPPeerVpcView) GetGcpProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GcpProjectId
}

// GetGcpProjectIdOk returns a tuple with the GcpProjectId field value
// and a boolean to check if the value has been set.
func (o *ApiAtlasGCPPeerVpcView) GetGcpProjectIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.GcpProjectId, true
}

// SetGcpProjectId sets field value
func (o *ApiAtlasGCPPeerVpcView) SetGcpProjectId(v string) {
	o.GcpProjectId = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApiAtlasGCPPeerVpcView) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasGCPPeerVpcView) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApiAtlasGCPPeerVpcView) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ApiAtlasGCPPeerVpcView) SetId(v string) {
	o.Id = &v
}

// GetNetworkName returns the NetworkName field value
func (o *ApiAtlasGCPPeerVpcView) GetNetworkName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkName
}

// GetNetworkNameOk returns a tuple with the NetworkName field value
// and a boolean to check if the value has been set.
func (o *ApiAtlasGCPPeerVpcView) GetNetworkNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.NetworkName, true
}

// SetNetworkName sets field value
func (o *ApiAtlasGCPPeerVpcView) SetNetworkName(v string) {
	o.NetworkName = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ApiAtlasGCPPeerVpcView) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasGCPPeerVpcView) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ApiAtlasGCPPeerVpcView) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ApiAtlasGCPPeerVpcView) SetStatus(v string) {
	o.Status = &v
}

func (o ApiAtlasGCPPeerVpcView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["containerId"] = o.ContainerId
	}
	if !isNil(o.ErrorMessage) {
		toSerialize["errorMessage"] = o.ErrorMessage
	}
	if true {
		toSerialize["gcpProjectId"] = o.GcpProjectId
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["networkName"] = o.NetworkName
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableApiAtlasGCPPeerVpcView struct {
	value *ApiAtlasGCPPeerVpcView
	isSet bool
}

func (v NullableApiAtlasGCPPeerVpcView) Get() *ApiAtlasGCPPeerVpcView {
	return v.value
}

func (v *NullableApiAtlasGCPPeerVpcView) Set(val *ApiAtlasGCPPeerVpcView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasGCPPeerVpcView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasGCPPeerVpcView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasGCPPeerVpcView(val *ApiAtlasGCPPeerVpcView) *NullableApiAtlasGCPPeerVpcView {
	return &NullableApiAtlasGCPPeerVpcView{value: val, isSet: true}
}

func (v NullableApiAtlasGCPPeerVpcView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasGCPPeerVpcView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


