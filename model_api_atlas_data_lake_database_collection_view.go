/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiAtlasDataLakeDatabaseCollectionView A collection and data sources that map to a ``stores`` data store.
type ApiAtlasDataLakeDatabaseCollectionView struct {
	// Array that contains the data stores that map to a collection for this data lake.
	DataSources []ApiAtlasDataLakeDatabaseDataSourceView `json:"dataSources,omitempty"`
	// Human-readable label that identifies the collection to which MongoDB Cloud maps the data in the data stores.
	Name *string `json:"name,omitempty"`
}

// NewApiAtlasDataLakeDatabaseCollectionView instantiates a new ApiAtlasDataLakeDatabaseCollectionView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAtlasDataLakeDatabaseCollectionView() *ApiAtlasDataLakeDatabaseCollectionView {
	this := ApiAtlasDataLakeDatabaseCollectionView{}
	return &this
}

// NewApiAtlasDataLakeDatabaseCollectionViewWithDefaults instantiates a new ApiAtlasDataLakeDatabaseCollectionView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAtlasDataLakeDatabaseCollectionViewWithDefaults() *ApiAtlasDataLakeDatabaseCollectionView {
	this := ApiAtlasDataLakeDatabaseCollectionView{}
	return &this
}

// GetDataSources returns the DataSources field value if set, zero value otherwise.
func (o *ApiAtlasDataLakeDatabaseCollectionView) GetDataSources() []ApiAtlasDataLakeDatabaseDataSourceView {
	if o == nil || isNil(o.DataSources) {
		var ret []ApiAtlasDataLakeDatabaseDataSourceView
		return ret
	}
	return o.DataSources
}

// GetDataSourcesOk returns a tuple with the DataSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasDataLakeDatabaseCollectionView) GetDataSourcesOk() ([]ApiAtlasDataLakeDatabaseDataSourceView, bool) {
	if o == nil || isNil(o.DataSources) {
    return nil, false
	}
	return o.DataSources, true
}

// HasDataSources returns a boolean if a field has been set.
func (o *ApiAtlasDataLakeDatabaseCollectionView) HasDataSources() bool {
	if o != nil && !isNil(o.DataSources) {
		return true
	}

	return false
}

// SetDataSources gets a reference to the given []ApiAtlasDataLakeDatabaseDataSourceView and assigns it to the DataSources field.
func (o *ApiAtlasDataLakeDatabaseCollectionView) SetDataSources(v []ApiAtlasDataLakeDatabaseDataSourceView) {
	o.DataSources = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApiAtlasDataLakeDatabaseCollectionView) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasDataLakeDatabaseCollectionView) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApiAtlasDataLakeDatabaseCollectionView) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApiAtlasDataLakeDatabaseCollectionView) SetName(v string) {
	o.Name = &v
}

func (o ApiAtlasDataLakeDatabaseCollectionView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.DataSources) {
		toSerialize["dataSources"] = o.DataSources
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableApiAtlasDataLakeDatabaseCollectionView struct {
	value *ApiAtlasDataLakeDatabaseCollectionView
	isSet bool
}

func (v NullableApiAtlasDataLakeDatabaseCollectionView) Get() *ApiAtlasDataLakeDatabaseCollectionView {
	return v.value
}

func (v *NullableApiAtlasDataLakeDatabaseCollectionView) Set(val *ApiAtlasDataLakeDatabaseCollectionView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasDataLakeDatabaseCollectionView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasDataLakeDatabaseCollectionView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasDataLakeDatabaseCollectionView(val *ApiAtlasDataLakeDatabaseCollectionView) *NullableApiAtlasDataLakeDatabaseCollectionView {
	return &NullableApiAtlasDataLakeDatabaseCollectionView{value: val, isSet: true}
}

func (v NullableApiAtlasDataLakeDatabaseCollectionView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasDataLakeDatabaseCollectionView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


