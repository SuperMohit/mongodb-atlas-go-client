/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MigrationLinkStatusView struct for MigrationLinkStatusView
type MigrationLinkStatusView struct {
	// String that indicates the status of the link between organizations.
	Status *string `json:"status,omitempty"`
}

// NewMigrationLinkStatusView instantiates a new MigrationLinkStatusView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMigrationLinkStatusView() *MigrationLinkStatusView {
	this := MigrationLinkStatusView{}
	return &this
}

// NewMigrationLinkStatusViewWithDefaults instantiates a new MigrationLinkStatusView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMigrationLinkStatusViewWithDefaults() *MigrationLinkStatusView {
	this := MigrationLinkStatusView{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *MigrationLinkStatusView) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MigrationLinkStatusView) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *MigrationLinkStatusView) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *MigrationLinkStatusView) SetStatus(v string) {
	o.Status = &v
}

func (o MigrationLinkStatusView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableMigrationLinkStatusView struct {
	value *MigrationLinkStatusView
	isSet bool
}

func (v NullableMigrationLinkStatusView) Get() *MigrationLinkStatusView {
	return v.value
}

func (v *NullableMigrationLinkStatusView) Set(val *MigrationLinkStatusView) {
	v.value = val
	v.isSet = true
}

func (v NullableMigrationLinkStatusView) IsSet() bool {
	return v.isSet
}

func (v *NullableMigrationLinkStatusView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMigrationLinkStatusView(val *MigrationLinkStatusView) *NullableMigrationLinkStatusView {
	return &NullableMigrationLinkStatusView{value: val, isSet: true}
}

func (v NullableMigrationLinkStatusView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMigrationLinkStatusView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


