/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiAtlasContainerPeerView struct for ApiAtlasContainerPeerView
type ApiAtlasContainerPeerView struct {
	// Unique 24-hexadecimal digit string that identifies the MongoDB Cloud network container that contains the specified network peering connection.
	ContainerId string `json:"containerId"`
	// Unique 24-hexadecimal digit string that identifies the network peering connection.
	Id *string `json:"id,omitempty"`
}

// NewApiAtlasContainerPeerView instantiates a new ApiAtlasContainerPeerView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAtlasContainerPeerView(containerId string) *ApiAtlasContainerPeerView {
	this := ApiAtlasContainerPeerView{}
	this.ContainerId = containerId
	return &this
}

// NewApiAtlasContainerPeerViewWithDefaults instantiates a new ApiAtlasContainerPeerView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAtlasContainerPeerViewWithDefaults() *ApiAtlasContainerPeerView {
	this := ApiAtlasContainerPeerView{}
	return &this
}

// GetContainerId returns the ContainerId field value
func (o *ApiAtlasContainerPeerView) GetContainerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContainerId
}

// GetContainerIdOk returns a tuple with the ContainerId field value
// and a boolean to check if the value has been set.
func (o *ApiAtlasContainerPeerView) GetContainerIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ContainerId, true
}

// SetContainerId sets field value
func (o *ApiAtlasContainerPeerView) SetContainerId(v string) {
	o.ContainerId = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApiAtlasContainerPeerView) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasContainerPeerView) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApiAtlasContainerPeerView) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ApiAtlasContainerPeerView) SetId(v string) {
	o.Id = &v
}

func (o ApiAtlasContainerPeerView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["containerId"] = o.ContainerId
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableApiAtlasContainerPeerView struct {
	value *ApiAtlasContainerPeerView
	isSet bool
}

func (v NullableApiAtlasContainerPeerView) Get() *ApiAtlasContainerPeerView {
	return v.value
}

func (v *NullableApiAtlasContainerPeerView) Set(val *ApiAtlasContainerPeerView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasContainerPeerView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasContainerPeerView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasContainerPeerView(val *ApiAtlasContainerPeerView) *NullableApiAtlasContainerPeerView {
	return &NullableApiAtlasContainerPeerView{value: val, isSet: true}
}

func (v NullableApiAtlasContainerPeerView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasContainerPeerView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


