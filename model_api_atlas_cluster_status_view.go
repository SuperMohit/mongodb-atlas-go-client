/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiAtlasClusterStatusView struct for ApiAtlasClusterStatusView
type ApiAtlasClusterStatusView struct {
	// State of cluster at the time of this request.
	ChangeStatus *string `json:"changeStatus,omitempty"`
	// List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.
	Links []Link `json:"links"`
}

// NewApiAtlasClusterStatusView instantiates a new ApiAtlasClusterStatusView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAtlasClusterStatusView(links []Link) *ApiAtlasClusterStatusView {
	this := ApiAtlasClusterStatusView{}
	this.Links = links
	return &this
}

// NewApiAtlasClusterStatusViewWithDefaults instantiates a new ApiAtlasClusterStatusView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAtlasClusterStatusViewWithDefaults() *ApiAtlasClusterStatusView {
	this := ApiAtlasClusterStatusView{}
	return &this
}

// GetChangeStatus returns the ChangeStatus field value if set, zero value otherwise.
func (o *ApiAtlasClusterStatusView) GetChangeStatus() string {
	if o == nil || isNil(o.ChangeStatus) {
		var ret string
		return ret
	}
	return *o.ChangeStatus
}

// GetChangeStatusOk returns a tuple with the ChangeStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasClusterStatusView) GetChangeStatusOk() (*string, bool) {
	if o == nil || isNil(o.ChangeStatus) {
    return nil, false
	}
	return o.ChangeStatus, true
}

// HasChangeStatus returns a boolean if a field has been set.
func (o *ApiAtlasClusterStatusView) HasChangeStatus() bool {
	if o != nil && !isNil(o.ChangeStatus) {
		return true
	}

	return false
}

// SetChangeStatus gets a reference to the given string and assigns it to the ChangeStatus field.
func (o *ApiAtlasClusterStatusView) SetChangeStatus(v string) {
	o.ChangeStatus = &v
}

// GetLinks returns the Links field value
func (o *ApiAtlasClusterStatusView) GetLinks() []Link {
	if o == nil {
		var ret []Link
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *ApiAtlasClusterStatusView) GetLinksOk() ([]Link, bool) {
	if o == nil {
    return nil, false
	}
	return o.Links, true
}

// SetLinks sets field value
func (o *ApiAtlasClusterStatusView) SetLinks(v []Link) {
	o.Links = v
}

func (o ApiAtlasClusterStatusView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ChangeStatus) {
		toSerialize["changeStatus"] = o.ChangeStatus
	}
	if true {
		toSerialize["links"] = o.Links
	}
	return json.Marshal(toSerialize)
}

type NullableApiAtlasClusterStatusView struct {
	value *ApiAtlasClusterStatusView
	isSet bool
}

func (v NullableApiAtlasClusterStatusView) Get() *ApiAtlasClusterStatusView {
	return v.value
}

func (v *NullableApiAtlasClusterStatusView) Set(val *ApiAtlasClusterStatusView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasClusterStatusView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasClusterStatusView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasClusterStatusView(val *ApiAtlasClusterStatusView) *NullableApiAtlasClusterStatusView {
	return &NullableApiAtlasClusterStatusView{value: val, isSet: true}
}

func (v NullableApiAtlasClusterStatusView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasClusterStatusView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


