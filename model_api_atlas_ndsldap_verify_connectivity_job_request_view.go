/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiAtlasNDSLDAPVerifyConnectivityJobRequestView struct for ApiAtlasNDSLDAPVerifyConnectivityJobRequestView
type ApiAtlasNDSLDAPVerifyConnectivityJobRequestView struct {
	// Unique 24-hexadecimal digit string that identifies the project associated with this Lightweight Directory Access Protocol (LDAP) over Transport Layer Security (TLS) configuration.
	GroupId *string `json:"groupId,omitempty"`
	// List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.
	Links []Link `json:"links"`
	Request *ApiAtlasNDSLDAPVerifyConnectivityJobRequestParamsView `json:"request,omitempty"`
	// Unique 24-hexadecimal digit string that identifies this request to verify an Lightweight Directory Access Protocol (LDAP) configuration.
	RequestId *string `json:"requestId,omitempty"`
	// Human-readable string that indicates the status of the Lightweight Directory Access Protocol (LDAP) over Transport Layer Security (TLS) configuration.
	Status *string `json:"status,omitempty"`
	// List that contains the validation messages related to the verification of the provided Lightweight Directory Access Protocol (LDAP) over Transport Layer Security (TLS) configuration details. The list contains a document for each test that MongoDB Cloud runs. MongoDB Cloud stops running tests after the first failure.
	Validations []ApiAtlasNDSLDAPVerifyConnectivityJobRequestValidationView `json:"validations,omitempty"`
}

// NewApiAtlasNDSLDAPVerifyConnectivityJobRequestView instantiates a new ApiAtlasNDSLDAPVerifyConnectivityJobRequestView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAtlasNDSLDAPVerifyConnectivityJobRequestView(links []Link) *ApiAtlasNDSLDAPVerifyConnectivityJobRequestView {
	this := ApiAtlasNDSLDAPVerifyConnectivityJobRequestView{}
	this.Links = links
	return &this
}

// NewApiAtlasNDSLDAPVerifyConnectivityJobRequestViewWithDefaults instantiates a new ApiAtlasNDSLDAPVerifyConnectivityJobRequestView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAtlasNDSLDAPVerifyConnectivityJobRequestViewWithDefaults() *ApiAtlasNDSLDAPVerifyConnectivityJobRequestView {
	this := ApiAtlasNDSLDAPVerifyConnectivityJobRequestView{}
	return &this
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *ApiAtlasNDSLDAPVerifyConnectivityJobRequestView) GetGroupId() string {
	if o == nil || isNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasNDSLDAPVerifyConnectivityJobRequestView) GetGroupIdOk() (*string, bool) {
	if o == nil || isNil(o.GroupId) {
    return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *ApiAtlasNDSLDAPVerifyConnectivityJobRequestView) HasGroupId() bool {
	if o != nil && !isNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *ApiAtlasNDSLDAPVerifyConnectivityJobRequestView) SetGroupId(v string) {
	o.GroupId = &v
}

// GetLinks returns the Links field value
func (o *ApiAtlasNDSLDAPVerifyConnectivityJobRequestView) GetLinks() []Link {
	if o == nil {
		var ret []Link
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *ApiAtlasNDSLDAPVerifyConnectivityJobRequestView) GetLinksOk() ([]Link, bool) {
	if o == nil {
    return nil, false
	}
	return o.Links, true
}

// SetLinks sets field value
func (o *ApiAtlasNDSLDAPVerifyConnectivityJobRequestView) SetLinks(v []Link) {
	o.Links = v
}

// GetRequest returns the Request field value if set, zero value otherwise.
func (o *ApiAtlasNDSLDAPVerifyConnectivityJobRequestView) GetRequest() ApiAtlasNDSLDAPVerifyConnectivityJobRequestParamsView {
	if o == nil || isNil(o.Request) {
		var ret ApiAtlasNDSLDAPVerifyConnectivityJobRequestParamsView
		return ret
	}
	return *o.Request
}

// GetRequestOk returns a tuple with the Request field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasNDSLDAPVerifyConnectivityJobRequestView) GetRequestOk() (*ApiAtlasNDSLDAPVerifyConnectivityJobRequestParamsView, bool) {
	if o == nil || isNil(o.Request) {
    return nil, false
	}
	return o.Request, true
}

// HasRequest returns a boolean if a field has been set.
func (o *ApiAtlasNDSLDAPVerifyConnectivityJobRequestView) HasRequest() bool {
	if o != nil && !isNil(o.Request) {
		return true
	}

	return false
}

// SetRequest gets a reference to the given ApiAtlasNDSLDAPVerifyConnectivityJobRequestParamsView and assigns it to the Request field.
func (o *ApiAtlasNDSLDAPVerifyConnectivityJobRequestView) SetRequest(v ApiAtlasNDSLDAPVerifyConnectivityJobRequestParamsView) {
	o.Request = &v
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *ApiAtlasNDSLDAPVerifyConnectivityJobRequestView) GetRequestId() string {
	if o == nil || isNil(o.RequestId) {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasNDSLDAPVerifyConnectivityJobRequestView) GetRequestIdOk() (*string, bool) {
	if o == nil || isNil(o.RequestId) {
    return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *ApiAtlasNDSLDAPVerifyConnectivityJobRequestView) HasRequestId() bool {
	if o != nil && !isNil(o.RequestId) {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *ApiAtlasNDSLDAPVerifyConnectivityJobRequestView) SetRequestId(v string) {
	o.RequestId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ApiAtlasNDSLDAPVerifyConnectivityJobRequestView) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasNDSLDAPVerifyConnectivityJobRequestView) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ApiAtlasNDSLDAPVerifyConnectivityJobRequestView) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ApiAtlasNDSLDAPVerifyConnectivityJobRequestView) SetStatus(v string) {
	o.Status = &v
}

// GetValidations returns the Validations field value if set, zero value otherwise.
func (o *ApiAtlasNDSLDAPVerifyConnectivityJobRequestView) GetValidations() []ApiAtlasNDSLDAPVerifyConnectivityJobRequestValidationView {
	if o == nil || isNil(o.Validations) {
		var ret []ApiAtlasNDSLDAPVerifyConnectivityJobRequestValidationView
		return ret
	}
	return o.Validations
}

// GetValidationsOk returns a tuple with the Validations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasNDSLDAPVerifyConnectivityJobRequestView) GetValidationsOk() ([]ApiAtlasNDSLDAPVerifyConnectivityJobRequestValidationView, bool) {
	if o == nil || isNil(o.Validations) {
    return nil, false
	}
	return o.Validations, true
}

// HasValidations returns a boolean if a field has been set.
func (o *ApiAtlasNDSLDAPVerifyConnectivityJobRequestView) HasValidations() bool {
	if o != nil && !isNil(o.Validations) {
		return true
	}

	return false
}

// SetValidations gets a reference to the given []ApiAtlasNDSLDAPVerifyConnectivityJobRequestValidationView and assigns it to the Validations field.
func (o *ApiAtlasNDSLDAPVerifyConnectivityJobRequestView) SetValidations(v []ApiAtlasNDSLDAPVerifyConnectivityJobRequestValidationView) {
	o.Validations = v
}

func (o ApiAtlasNDSLDAPVerifyConnectivityJobRequestView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.GroupId) {
		toSerialize["groupId"] = o.GroupId
	}
	if true {
		toSerialize["links"] = o.Links
	}
	if !isNil(o.Request) {
		toSerialize["request"] = o.Request
	}
	if !isNil(o.RequestId) {
		toSerialize["requestId"] = o.RequestId
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.Validations) {
		toSerialize["validations"] = o.Validations
	}
	return json.Marshal(toSerialize)
}

type NullableApiAtlasNDSLDAPVerifyConnectivityJobRequestView struct {
	value *ApiAtlasNDSLDAPVerifyConnectivityJobRequestView
	isSet bool
}

func (v NullableApiAtlasNDSLDAPVerifyConnectivityJobRequestView) Get() *ApiAtlasNDSLDAPVerifyConnectivityJobRequestView {
	return v.value
}

func (v *NullableApiAtlasNDSLDAPVerifyConnectivityJobRequestView) Set(val *ApiAtlasNDSLDAPVerifyConnectivityJobRequestView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasNDSLDAPVerifyConnectivityJobRequestView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasNDSLDAPVerifyConnectivityJobRequestView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasNDSLDAPVerifyConnectivityJobRequestView(val *ApiAtlasNDSLDAPVerifyConnectivityJobRequestView) *NullableApiAtlasNDSLDAPVerifyConnectivityJobRequestView {
	return &NullableApiAtlasNDSLDAPVerifyConnectivityJobRequestView{value: val, isSet: true}
}

func (v NullableApiAtlasNDSLDAPVerifyConnectivityJobRequestView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasNDSLDAPVerifyConnectivityJobRequestView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


