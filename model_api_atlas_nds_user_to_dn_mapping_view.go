/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiAtlasNDSUserToDNMappingView User-to-Distinguished Name (DN) map that MongoDB Cloud uses to transform a Lightweight Directory Access Protocol (LDAP) username into an LDAP DN.
type ApiAtlasNDSUserToDNMappingView struct {
	// Lightweight Directory Access Protocol (LDAP) query template that inserts the LDAP name that the regular expression matches into an LDAP query Uniform Resource Identifier (URI). The formatting for the query must conform to [RFC 4515](https://datatracker.ietf.org/doc/html/rfc4515) and [RFC 4516](https://datatracker.ietf.org/doc/html/rfc4516).
	LdapQuery string `json:"ldapQuery"`
	// Regular expression that MongoDB Cloud uses to match against the provided Lightweight Directory Access Protocol (LDAP) username. Each parenthesis-enclosed section represents a regular expression capture group that the substitution or `ldapQuery` template uses.
	Match string `json:"match"`
	// Lightweight Directory Access Protocol (LDAP) Distinguished Name (DN) template that converts the LDAP username that matches regular expression in the *match* parameter into an LDAP Distinguished Name (DN).
	Substitution string `json:"substitution"`
}

// NewApiAtlasNDSUserToDNMappingView instantiates a new ApiAtlasNDSUserToDNMappingView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAtlasNDSUserToDNMappingView(ldapQuery string, match string, substitution string) *ApiAtlasNDSUserToDNMappingView {
	this := ApiAtlasNDSUserToDNMappingView{}
	this.LdapQuery = ldapQuery
	this.Match = match
	this.Substitution = substitution
	return &this
}

// NewApiAtlasNDSUserToDNMappingViewWithDefaults instantiates a new ApiAtlasNDSUserToDNMappingView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAtlasNDSUserToDNMappingViewWithDefaults() *ApiAtlasNDSUserToDNMappingView {
	this := ApiAtlasNDSUserToDNMappingView{}
	return &this
}

// GetLdapQuery returns the LdapQuery field value
func (o *ApiAtlasNDSUserToDNMappingView) GetLdapQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LdapQuery
}

// GetLdapQueryOk returns a tuple with the LdapQuery field value
// and a boolean to check if the value has been set.
func (o *ApiAtlasNDSUserToDNMappingView) GetLdapQueryOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.LdapQuery, true
}

// SetLdapQuery sets field value
func (o *ApiAtlasNDSUserToDNMappingView) SetLdapQuery(v string) {
	o.LdapQuery = v
}

// GetMatch returns the Match field value
func (o *ApiAtlasNDSUserToDNMappingView) GetMatch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Match
}

// GetMatchOk returns a tuple with the Match field value
// and a boolean to check if the value has been set.
func (o *ApiAtlasNDSUserToDNMappingView) GetMatchOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Match, true
}

// SetMatch sets field value
func (o *ApiAtlasNDSUserToDNMappingView) SetMatch(v string) {
	o.Match = v
}

// GetSubstitution returns the Substitution field value
func (o *ApiAtlasNDSUserToDNMappingView) GetSubstitution() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Substitution
}

// GetSubstitutionOk returns a tuple with the Substitution field value
// and a boolean to check if the value has been set.
func (o *ApiAtlasNDSUserToDNMappingView) GetSubstitutionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Substitution, true
}

// SetSubstitution sets field value
func (o *ApiAtlasNDSUserToDNMappingView) SetSubstitution(v string) {
	o.Substitution = v
}

func (o ApiAtlasNDSUserToDNMappingView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ldapQuery"] = o.LdapQuery
	}
	if true {
		toSerialize["match"] = o.Match
	}
	if true {
		toSerialize["substitution"] = o.Substitution
	}
	return json.Marshal(toSerialize)
}

type NullableApiAtlasNDSUserToDNMappingView struct {
	value *ApiAtlasNDSUserToDNMappingView
	isSet bool
}

func (v NullableApiAtlasNDSUserToDNMappingView) Get() *ApiAtlasNDSUserToDNMappingView {
	return v.value
}

func (v *NullableApiAtlasNDSUserToDNMappingView) Set(val *ApiAtlasNDSUserToDNMappingView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasNDSUserToDNMappingView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasNDSUserToDNMappingView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasNDSUserToDNMappingView(val *ApiAtlasNDSUserToDNMappingView) *NullableApiAtlasNDSUserToDNMappingView {
	return &NullableApiAtlasNDSUserToDNMappingView{value: val, isSet: true}
}

func (v NullableApiAtlasNDSUserToDNMappingView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasNDSUserToDNMappingView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


