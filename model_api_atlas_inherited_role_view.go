/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiAtlasInheritedRoleView Role inherited from another context for this database user.
type ApiAtlasInheritedRoleView struct {
	// Human-readable label that identifies the database on which someone grants the action to one MongoDB user.
	Db string `json:"db"`
	// Human-readable label that identifies the role inherited. Set this value to `admin` for every role except `read` or `readWrite`.
	Role string `json:"role"`
}

// NewApiAtlasInheritedRoleView instantiates a new ApiAtlasInheritedRoleView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAtlasInheritedRoleView(db string, role string) *ApiAtlasInheritedRoleView {
	this := ApiAtlasInheritedRoleView{}
	this.Db = db
	this.Role = role
	return &this
}

// NewApiAtlasInheritedRoleViewWithDefaults instantiates a new ApiAtlasInheritedRoleView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAtlasInheritedRoleViewWithDefaults() *ApiAtlasInheritedRoleView {
	this := ApiAtlasInheritedRoleView{}
	return &this
}

// GetDb returns the Db field value
func (o *ApiAtlasInheritedRoleView) GetDb() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Db
}

// GetDbOk returns a tuple with the Db field value
// and a boolean to check if the value has been set.
func (o *ApiAtlasInheritedRoleView) GetDbOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Db, true
}

// SetDb sets field value
func (o *ApiAtlasInheritedRoleView) SetDb(v string) {
	o.Db = v
}

// GetRole returns the Role field value
func (o *ApiAtlasInheritedRoleView) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *ApiAtlasInheritedRoleView) GetRoleOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *ApiAtlasInheritedRoleView) SetRole(v string) {
	o.Role = v
}

func (o ApiAtlasInheritedRoleView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["db"] = o.Db
	}
	if true {
		toSerialize["role"] = o.Role
	}
	return json.Marshal(toSerialize)
}

type NullableApiAtlasInheritedRoleView struct {
	value *ApiAtlasInheritedRoleView
	isSet bool
}

func (v NullableApiAtlasInheritedRoleView) Get() *ApiAtlasInheritedRoleView {
	return v.value
}

func (v *NullableApiAtlasInheritedRoleView) Set(val *ApiAtlasInheritedRoleView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasInheritedRoleView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasInheritedRoleView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasInheritedRoleView(val *ApiAtlasInheritedRoleView) *NullableApiAtlasInheritedRoleView {
	return &NullableApiAtlasInheritedRoleView{value: val, isSet: true}
}

func (v NullableApiAtlasInheritedRoleView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasInheritedRoleView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


