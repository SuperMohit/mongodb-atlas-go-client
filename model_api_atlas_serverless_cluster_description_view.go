/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// ApiAtlasServerlessClusterDescriptionView struct for ApiAtlasServerlessClusterDescriptionView
type ApiAtlasServerlessClusterDescriptionView struct {
	ConnectionStrings *ApiAtlasClusterDescriptionConnectionStringsView `json:"connectionStrings,omitempty"`
	// Date and time when MongoDB Cloud created this cluster. MongoDB Cloud represents this timestamp in ISO 8601 format in UTC.
	CreateDate *time.Time `json:"createDate,omitempty"`
	// Unique 24-hexadecimal character string that identifies the project.
	GroupId *string `json:"groupId,omitempty"`
	// Unique 24-hexadecimal digit string that identifies the cluster.
	Id *string `json:"id,omitempty"`
	// List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.
	Links []Link `json:"links"`
	// Version of MongoDB that the cluster runs.
	MongoDBVersion *string `json:"mongoDBVersion,omitempty"`
	// Human-readable label that identifies the cluster.
	Name *string `json:"name,omitempty"`
	ProviderSettings *ApiAtlasProviderSettingsViewManual `json:"providerSettings,omitempty"`
	// Human-readable label that indicates the current operating condition of the cluster.
	StateName *string `json:"stateName,omitempty"`
	// Flag that indicates whether termination protection is enabled on the cluster. If set to `true`, MongoDB Cloud won't delete the cluster. If set to `false`, MongoDB Cloud will delete the cluster.
	TerminationProtectionEnabled *bool `json:"terminationProtectionEnabled,omitempty"`
}

// NewApiAtlasServerlessClusterDescriptionView instantiates a new ApiAtlasServerlessClusterDescriptionView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAtlasServerlessClusterDescriptionView(links []Link) *ApiAtlasServerlessClusterDescriptionView {
	this := ApiAtlasServerlessClusterDescriptionView{}
	this.Links = links
	var terminationProtectionEnabled bool = false
	this.TerminationProtectionEnabled = &terminationProtectionEnabled
	return &this
}

// NewApiAtlasServerlessClusterDescriptionViewWithDefaults instantiates a new ApiAtlasServerlessClusterDescriptionView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAtlasServerlessClusterDescriptionViewWithDefaults() *ApiAtlasServerlessClusterDescriptionView {
	this := ApiAtlasServerlessClusterDescriptionView{}
	var terminationProtectionEnabled bool = false
	this.TerminationProtectionEnabled = &terminationProtectionEnabled
	return &this
}

// GetConnectionStrings returns the ConnectionStrings field value if set, zero value otherwise.
func (o *ApiAtlasServerlessClusterDescriptionView) GetConnectionStrings() ApiAtlasClusterDescriptionConnectionStringsView {
	if o == nil || isNil(o.ConnectionStrings) {
		var ret ApiAtlasClusterDescriptionConnectionStringsView
		return ret
	}
	return *o.ConnectionStrings
}

// GetConnectionStringsOk returns a tuple with the ConnectionStrings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasServerlessClusterDescriptionView) GetConnectionStringsOk() (*ApiAtlasClusterDescriptionConnectionStringsView, bool) {
	if o == nil || isNil(o.ConnectionStrings) {
    return nil, false
	}
	return o.ConnectionStrings, true
}

// HasConnectionStrings returns a boolean if a field has been set.
func (o *ApiAtlasServerlessClusterDescriptionView) HasConnectionStrings() bool {
	if o != nil && !isNil(o.ConnectionStrings) {
		return true
	}

	return false
}

// SetConnectionStrings gets a reference to the given ApiAtlasClusterDescriptionConnectionStringsView and assigns it to the ConnectionStrings field.
func (o *ApiAtlasServerlessClusterDescriptionView) SetConnectionStrings(v ApiAtlasClusterDescriptionConnectionStringsView) {
	o.ConnectionStrings = &v
}

// GetCreateDate returns the CreateDate field value if set, zero value otherwise.
func (o *ApiAtlasServerlessClusterDescriptionView) GetCreateDate() time.Time {
	if o == nil || isNil(o.CreateDate) {
		var ret time.Time
		return ret
	}
	return *o.CreateDate
}

// GetCreateDateOk returns a tuple with the CreateDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasServerlessClusterDescriptionView) GetCreateDateOk() (*time.Time, bool) {
	if o == nil || isNil(o.CreateDate) {
    return nil, false
	}
	return o.CreateDate, true
}

// HasCreateDate returns a boolean if a field has been set.
func (o *ApiAtlasServerlessClusterDescriptionView) HasCreateDate() bool {
	if o != nil && !isNil(o.CreateDate) {
		return true
	}

	return false
}

// SetCreateDate gets a reference to the given time.Time and assigns it to the CreateDate field.
func (o *ApiAtlasServerlessClusterDescriptionView) SetCreateDate(v time.Time) {
	o.CreateDate = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *ApiAtlasServerlessClusterDescriptionView) GetGroupId() string {
	if o == nil || isNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasServerlessClusterDescriptionView) GetGroupIdOk() (*string, bool) {
	if o == nil || isNil(o.GroupId) {
    return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *ApiAtlasServerlessClusterDescriptionView) HasGroupId() bool {
	if o != nil && !isNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *ApiAtlasServerlessClusterDescriptionView) SetGroupId(v string) {
	o.GroupId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApiAtlasServerlessClusterDescriptionView) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasServerlessClusterDescriptionView) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApiAtlasServerlessClusterDescriptionView) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ApiAtlasServerlessClusterDescriptionView) SetId(v string) {
	o.Id = &v
}

// GetLinks returns the Links field value
func (o *ApiAtlasServerlessClusterDescriptionView) GetLinks() []Link {
	if o == nil {
		var ret []Link
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *ApiAtlasServerlessClusterDescriptionView) GetLinksOk() ([]Link, bool) {
	if o == nil {
    return nil, false
	}
	return o.Links, true
}

// SetLinks sets field value
func (o *ApiAtlasServerlessClusterDescriptionView) SetLinks(v []Link) {
	o.Links = v
}

// GetMongoDBVersion returns the MongoDBVersion field value if set, zero value otherwise.
func (o *ApiAtlasServerlessClusterDescriptionView) GetMongoDBVersion() string {
	if o == nil || isNil(o.MongoDBVersion) {
		var ret string
		return ret
	}
	return *o.MongoDBVersion
}

// GetMongoDBVersionOk returns a tuple with the MongoDBVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasServerlessClusterDescriptionView) GetMongoDBVersionOk() (*string, bool) {
	if o == nil || isNil(o.MongoDBVersion) {
    return nil, false
	}
	return o.MongoDBVersion, true
}

// HasMongoDBVersion returns a boolean if a field has been set.
func (o *ApiAtlasServerlessClusterDescriptionView) HasMongoDBVersion() bool {
	if o != nil && !isNil(o.MongoDBVersion) {
		return true
	}

	return false
}

// SetMongoDBVersion gets a reference to the given string and assigns it to the MongoDBVersion field.
func (o *ApiAtlasServerlessClusterDescriptionView) SetMongoDBVersion(v string) {
	o.MongoDBVersion = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApiAtlasServerlessClusterDescriptionView) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasServerlessClusterDescriptionView) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApiAtlasServerlessClusterDescriptionView) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApiAtlasServerlessClusterDescriptionView) SetName(v string) {
	o.Name = &v
}

// GetProviderSettings returns the ProviderSettings field value if set, zero value otherwise.
func (o *ApiAtlasServerlessClusterDescriptionView) GetProviderSettings() ApiAtlasProviderSettingsViewManual {
	if o == nil || isNil(o.ProviderSettings) {
		var ret ApiAtlasProviderSettingsViewManual
		return ret
	}
	return *o.ProviderSettings
}

// GetProviderSettingsOk returns a tuple with the ProviderSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasServerlessClusterDescriptionView) GetProviderSettingsOk() (*ApiAtlasProviderSettingsViewManual, bool) {
	if o == nil || isNil(o.ProviderSettings) {
    return nil, false
	}
	return o.ProviderSettings, true
}

// HasProviderSettings returns a boolean if a field has been set.
func (o *ApiAtlasServerlessClusterDescriptionView) HasProviderSettings() bool {
	if o != nil && !isNil(o.ProviderSettings) {
		return true
	}

	return false
}

// SetProviderSettings gets a reference to the given ApiAtlasProviderSettingsViewManual and assigns it to the ProviderSettings field.
func (o *ApiAtlasServerlessClusterDescriptionView) SetProviderSettings(v ApiAtlasProviderSettingsViewManual) {
	o.ProviderSettings = &v
}

// GetStateName returns the StateName field value if set, zero value otherwise.
func (o *ApiAtlasServerlessClusterDescriptionView) GetStateName() string {
	if o == nil || isNil(o.StateName) {
		var ret string
		return ret
	}
	return *o.StateName
}

// GetStateNameOk returns a tuple with the StateName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasServerlessClusterDescriptionView) GetStateNameOk() (*string, bool) {
	if o == nil || isNil(o.StateName) {
    return nil, false
	}
	return o.StateName, true
}

// HasStateName returns a boolean if a field has been set.
func (o *ApiAtlasServerlessClusterDescriptionView) HasStateName() bool {
	if o != nil && !isNil(o.StateName) {
		return true
	}

	return false
}

// SetStateName gets a reference to the given string and assigns it to the StateName field.
func (o *ApiAtlasServerlessClusterDescriptionView) SetStateName(v string) {
	o.StateName = &v
}

// GetTerminationProtectionEnabled returns the TerminationProtectionEnabled field value if set, zero value otherwise.
func (o *ApiAtlasServerlessClusterDescriptionView) GetTerminationProtectionEnabled() bool {
	if o == nil || isNil(o.TerminationProtectionEnabled) {
		var ret bool
		return ret
	}
	return *o.TerminationProtectionEnabled
}

// GetTerminationProtectionEnabledOk returns a tuple with the TerminationProtectionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasServerlessClusterDescriptionView) GetTerminationProtectionEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.TerminationProtectionEnabled) {
    return nil, false
	}
	return o.TerminationProtectionEnabled, true
}

// HasTerminationProtectionEnabled returns a boolean if a field has been set.
func (o *ApiAtlasServerlessClusterDescriptionView) HasTerminationProtectionEnabled() bool {
	if o != nil && !isNil(o.TerminationProtectionEnabled) {
		return true
	}

	return false
}

// SetTerminationProtectionEnabled gets a reference to the given bool and assigns it to the TerminationProtectionEnabled field.
func (o *ApiAtlasServerlessClusterDescriptionView) SetTerminationProtectionEnabled(v bool) {
	o.TerminationProtectionEnabled = &v
}

func (o ApiAtlasServerlessClusterDescriptionView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ConnectionStrings) {
		toSerialize["connectionStrings"] = o.ConnectionStrings
	}
	if !isNil(o.CreateDate) {
		toSerialize["createDate"] = o.CreateDate
	}
	if !isNil(o.GroupId) {
		toSerialize["groupId"] = o.GroupId
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["links"] = o.Links
	}
	if !isNil(o.MongoDBVersion) {
		toSerialize["mongoDBVersion"] = o.MongoDBVersion
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.ProviderSettings) {
		toSerialize["providerSettings"] = o.ProviderSettings
	}
	if !isNil(o.StateName) {
		toSerialize["stateName"] = o.StateName
	}
	if !isNil(o.TerminationProtectionEnabled) {
		toSerialize["terminationProtectionEnabled"] = o.TerminationProtectionEnabled
	}
	return json.Marshal(toSerialize)
}

type NullableApiAtlasServerlessClusterDescriptionView struct {
	value *ApiAtlasServerlessClusterDescriptionView
	isSet bool
}

func (v NullableApiAtlasServerlessClusterDescriptionView) Get() *ApiAtlasServerlessClusterDescriptionView {
	return v.value
}

func (v *NullableApiAtlasServerlessClusterDescriptionView) Set(val *ApiAtlasServerlessClusterDescriptionView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasServerlessClusterDescriptionView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasServerlessClusterDescriptionView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasServerlessClusterDescriptionView(val *ApiAtlasServerlessClusterDescriptionView) *NullableApiAtlasServerlessClusterDescriptionView {
	return &NullableApiAtlasServerlessClusterDescriptionView{value: val, isSet: true}
}

func (v NullableApiAtlasServerlessClusterDescriptionView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasServerlessClusterDescriptionView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


