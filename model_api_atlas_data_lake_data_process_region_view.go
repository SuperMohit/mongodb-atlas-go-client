/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiAtlasDataLakeDataProcessRegionView Information about the cloud provider region to which the data lake routes client connections. MongoDB Cloud supports AWS only.
type ApiAtlasDataLakeDataProcessRegionView struct {
	// Name of the cloud service that hosts the data lake's data stores.
	CloudProvider string `json:"cloudProvider"`
	Region ApiAtlasDataLakeRegionView `json:"region"`
}

// NewApiAtlasDataLakeDataProcessRegionView instantiates a new ApiAtlasDataLakeDataProcessRegionView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAtlasDataLakeDataProcessRegionView(cloudProvider string, region ApiAtlasDataLakeRegionView) *ApiAtlasDataLakeDataProcessRegionView {
	this := ApiAtlasDataLakeDataProcessRegionView{}
	this.CloudProvider = cloudProvider
	this.Region = region
	return &this
}

// NewApiAtlasDataLakeDataProcessRegionViewWithDefaults instantiates a new ApiAtlasDataLakeDataProcessRegionView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAtlasDataLakeDataProcessRegionViewWithDefaults() *ApiAtlasDataLakeDataProcessRegionView {
	this := ApiAtlasDataLakeDataProcessRegionView{}
	return &this
}

// GetCloudProvider returns the CloudProvider field value
func (o *ApiAtlasDataLakeDataProcessRegionView) GetCloudProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CloudProvider
}

// GetCloudProviderOk returns a tuple with the CloudProvider field value
// and a boolean to check if the value has been set.
func (o *ApiAtlasDataLakeDataProcessRegionView) GetCloudProviderOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.CloudProvider, true
}

// SetCloudProvider sets field value
func (o *ApiAtlasDataLakeDataProcessRegionView) SetCloudProvider(v string) {
	o.CloudProvider = v
}

// GetRegion returns the Region field value
func (o *ApiAtlasDataLakeDataProcessRegionView) GetRegion() ApiAtlasDataLakeRegionView {
	if o == nil {
		var ret ApiAtlasDataLakeRegionView
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *ApiAtlasDataLakeDataProcessRegionView) GetRegionOk() (*ApiAtlasDataLakeRegionView, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *ApiAtlasDataLakeDataProcessRegionView) SetRegion(v ApiAtlasDataLakeRegionView) {
	o.Region = v
}

func (o ApiAtlasDataLakeDataProcessRegionView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["cloudProvider"] = o.CloudProvider
	}
	if true {
		toSerialize["region"] = o.Region
	}
	return json.Marshal(toSerialize)
}

type NullableApiAtlasDataLakeDataProcessRegionView struct {
	value *ApiAtlasDataLakeDataProcessRegionView
	isSet bool
}

func (v NullableApiAtlasDataLakeDataProcessRegionView) Get() *ApiAtlasDataLakeDataProcessRegionView {
	return v.value
}

func (v *NullableApiAtlasDataLakeDataProcessRegionView) Set(val *ApiAtlasDataLakeDataProcessRegionView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasDataLakeDataProcessRegionView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasDataLakeDataProcessRegionView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasDataLakeDataProcessRegionView(val *ApiAtlasDataLakeDataProcessRegionView) *NullableApiAtlasDataLakeDataProcessRegionView {
	return &NullableApiAtlasDataLakeDataProcessRegionView{value: val, isSet: true}
}

func (v NullableApiAtlasDataLakeDataProcessRegionView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasDataLakeDataProcessRegionView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


