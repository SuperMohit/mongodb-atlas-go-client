/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiAtlasIngestionSinkView Ingestion destination of a Data Lake Pipeline.
type ApiAtlasIngestionSinkView struct {
	// Type of ingestion destination of this Data Lake Pipeline.
	Type *string `json:"type,omitempty"`
}

// NewApiAtlasIngestionSinkView instantiates a new ApiAtlasIngestionSinkView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAtlasIngestionSinkView() *ApiAtlasIngestionSinkView {
	this := ApiAtlasIngestionSinkView{}
	return &this
}

// NewApiAtlasIngestionSinkViewWithDefaults instantiates a new ApiAtlasIngestionSinkView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAtlasIngestionSinkViewWithDefaults() *ApiAtlasIngestionSinkView {
	this := ApiAtlasIngestionSinkView{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ApiAtlasIngestionSinkView) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasIngestionSinkView) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ApiAtlasIngestionSinkView) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ApiAtlasIngestionSinkView) SetType(v string) {
	o.Type = &v
}

func (o ApiAtlasIngestionSinkView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableApiAtlasIngestionSinkView struct {
	value *ApiAtlasIngestionSinkView
	isSet bool
}

func (v NullableApiAtlasIngestionSinkView) Get() *ApiAtlasIngestionSinkView {
	return v.value
}

func (v *NullableApiAtlasIngestionSinkView) Set(val *ApiAtlasIngestionSinkView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasIngestionSinkView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasIngestionSinkView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasIngestionSinkView(val *ApiAtlasIngestionSinkView) *NullableApiAtlasIngestionSinkView {
	return &NullableApiAtlasIngestionSinkView{value: val, isSet: true}
}

func (v NullableApiAtlasIngestionSinkView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasIngestionSinkView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


