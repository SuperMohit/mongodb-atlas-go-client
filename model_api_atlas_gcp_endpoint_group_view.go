/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiAtlasGCPEndpointGroupView Group of Private Endpoint settings.
type ApiAtlasGCPEndpointGroupView struct {
	// Flag that indicates whether MongoDB Cloud received a request to remove the specified private endpoint from the private endpoint service.
	DeleteRequested *bool `json:"deleteRequested,omitempty"`
	// Human-readable label that identifies a set of endpoints.
	EndpointGroupName *string `json:"endpointGroupName,omitempty"`
	// List of individual private endpoints that comprise this endpoint group.
	Endpoints []ApiAtlasGCPConsumerForwardingRuleView `json:"endpoints,omitempty"`
	// Error message returned when requesting private connection resource. The resource returns `null` if the request succeeded.
	ErrorMessage *string `json:"errorMessage,omitempty"`
	// State of the Google Cloud network endpoint group when MongoDB Cloud received this request.
	Status *string `json:"status,omitempty"`
}

// NewApiAtlasGCPEndpointGroupView instantiates a new ApiAtlasGCPEndpointGroupView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAtlasGCPEndpointGroupView() *ApiAtlasGCPEndpointGroupView {
	this := ApiAtlasGCPEndpointGroupView{}
	return &this
}

// NewApiAtlasGCPEndpointGroupViewWithDefaults instantiates a new ApiAtlasGCPEndpointGroupView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAtlasGCPEndpointGroupViewWithDefaults() *ApiAtlasGCPEndpointGroupView {
	this := ApiAtlasGCPEndpointGroupView{}
	return &this
}

// GetDeleteRequested returns the DeleteRequested field value if set, zero value otherwise.
func (o *ApiAtlasGCPEndpointGroupView) GetDeleteRequested() bool {
	if o == nil || isNil(o.DeleteRequested) {
		var ret bool
		return ret
	}
	return *o.DeleteRequested
}

// GetDeleteRequestedOk returns a tuple with the DeleteRequested field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasGCPEndpointGroupView) GetDeleteRequestedOk() (*bool, bool) {
	if o == nil || isNil(o.DeleteRequested) {
    return nil, false
	}
	return o.DeleteRequested, true
}

// HasDeleteRequested returns a boolean if a field has been set.
func (o *ApiAtlasGCPEndpointGroupView) HasDeleteRequested() bool {
	if o != nil && !isNil(o.DeleteRequested) {
		return true
	}

	return false
}

// SetDeleteRequested gets a reference to the given bool and assigns it to the DeleteRequested field.
func (o *ApiAtlasGCPEndpointGroupView) SetDeleteRequested(v bool) {
	o.DeleteRequested = &v
}

// GetEndpointGroupName returns the EndpointGroupName field value if set, zero value otherwise.
func (o *ApiAtlasGCPEndpointGroupView) GetEndpointGroupName() string {
	if o == nil || isNil(o.EndpointGroupName) {
		var ret string
		return ret
	}
	return *o.EndpointGroupName
}

// GetEndpointGroupNameOk returns a tuple with the EndpointGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasGCPEndpointGroupView) GetEndpointGroupNameOk() (*string, bool) {
	if o == nil || isNil(o.EndpointGroupName) {
    return nil, false
	}
	return o.EndpointGroupName, true
}

// HasEndpointGroupName returns a boolean if a field has been set.
func (o *ApiAtlasGCPEndpointGroupView) HasEndpointGroupName() bool {
	if o != nil && !isNil(o.EndpointGroupName) {
		return true
	}

	return false
}

// SetEndpointGroupName gets a reference to the given string and assigns it to the EndpointGroupName field.
func (o *ApiAtlasGCPEndpointGroupView) SetEndpointGroupName(v string) {
	o.EndpointGroupName = &v
}

// GetEndpoints returns the Endpoints field value if set, zero value otherwise.
func (o *ApiAtlasGCPEndpointGroupView) GetEndpoints() []ApiAtlasGCPConsumerForwardingRuleView {
	if o == nil || isNil(o.Endpoints) {
		var ret []ApiAtlasGCPConsumerForwardingRuleView
		return ret
	}
	return o.Endpoints
}

// GetEndpointsOk returns a tuple with the Endpoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasGCPEndpointGroupView) GetEndpointsOk() ([]ApiAtlasGCPConsumerForwardingRuleView, bool) {
	if o == nil || isNil(o.Endpoints) {
    return nil, false
	}
	return o.Endpoints, true
}

// HasEndpoints returns a boolean if a field has been set.
func (o *ApiAtlasGCPEndpointGroupView) HasEndpoints() bool {
	if o != nil && !isNil(o.Endpoints) {
		return true
	}

	return false
}

// SetEndpoints gets a reference to the given []ApiAtlasGCPConsumerForwardingRuleView and assigns it to the Endpoints field.
func (o *ApiAtlasGCPEndpointGroupView) SetEndpoints(v []ApiAtlasGCPConsumerForwardingRuleView) {
	o.Endpoints = v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *ApiAtlasGCPEndpointGroupView) GetErrorMessage() string {
	if o == nil || isNil(o.ErrorMessage) {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasGCPEndpointGroupView) GetErrorMessageOk() (*string, bool) {
	if o == nil || isNil(o.ErrorMessage) {
    return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *ApiAtlasGCPEndpointGroupView) HasErrorMessage() bool {
	if o != nil && !isNil(o.ErrorMessage) {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *ApiAtlasGCPEndpointGroupView) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ApiAtlasGCPEndpointGroupView) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasGCPEndpointGroupView) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ApiAtlasGCPEndpointGroupView) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ApiAtlasGCPEndpointGroupView) SetStatus(v string) {
	o.Status = &v
}

func (o ApiAtlasGCPEndpointGroupView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.DeleteRequested) {
		toSerialize["deleteRequested"] = o.DeleteRequested
	}
	if !isNil(o.EndpointGroupName) {
		toSerialize["endpointGroupName"] = o.EndpointGroupName
	}
	if !isNil(o.Endpoints) {
		toSerialize["endpoints"] = o.Endpoints
	}
	if !isNil(o.ErrorMessage) {
		toSerialize["errorMessage"] = o.ErrorMessage
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableApiAtlasGCPEndpointGroupView struct {
	value *ApiAtlasGCPEndpointGroupView
	isSet bool
}

func (v NullableApiAtlasGCPEndpointGroupView) Get() *ApiAtlasGCPEndpointGroupView {
	return v.value
}

func (v *NullableApiAtlasGCPEndpointGroupView) Set(val *ApiAtlasGCPEndpointGroupView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasGCPEndpointGroupView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasGCPEndpointGroupView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasGCPEndpointGroupView(val *ApiAtlasGCPEndpointGroupView) *NullableApiAtlasGCPEndpointGroupView {
	return &NullableApiAtlasGCPEndpointGroupView{value: val, isSet: true}
}

func (v NullableApiAtlasGCPEndpointGroupView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasGCPEndpointGroupView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


