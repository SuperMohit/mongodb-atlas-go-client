/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ApiAtlasContainerPeerViewRequest - Collection of settings that configures the network connection for a virtual private connection.
type ApiAtlasContainerPeerViewRequest struct {
	ApiAtlasAWSPeerVpcRequestView *ApiAtlasAWSPeerVpcRequestView
	ApiAtlasAzurePeerNetworkRequestView *ApiAtlasAzurePeerNetworkRequestView
	ApiAtlasGCPPeerVpcRequestView *ApiAtlasGCPPeerVpcRequestView
}

// ApiAtlasAWSPeerVpcRequestViewAsApiAtlasContainerPeerViewRequest is a convenience function that returns ApiAtlasAWSPeerVpcRequestView wrapped in ApiAtlasContainerPeerViewRequest
func ApiAtlasAWSPeerVpcRequestViewAsApiAtlasContainerPeerViewRequest(v *ApiAtlasAWSPeerVpcRequestView) ApiAtlasContainerPeerViewRequest {
	return ApiAtlasContainerPeerViewRequest{
		ApiAtlasAWSPeerVpcRequestView: v,
	}
}

// ApiAtlasAzurePeerNetworkRequestViewAsApiAtlasContainerPeerViewRequest is a convenience function that returns ApiAtlasAzurePeerNetworkRequestView wrapped in ApiAtlasContainerPeerViewRequest
func ApiAtlasAzurePeerNetworkRequestViewAsApiAtlasContainerPeerViewRequest(v *ApiAtlasAzurePeerNetworkRequestView) ApiAtlasContainerPeerViewRequest {
	return ApiAtlasContainerPeerViewRequest{
		ApiAtlasAzurePeerNetworkRequestView: v,
	}
}

// ApiAtlasGCPPeerVpcRequestViewAsApiAtlasContainerPeerViewRequest is a convenience function that returns ApiAtlasGCPPeerVpcRequestView wrapped in ApiAtlasContainerPeerViewRequest
func ApiAtlasGCPPeerVpcRequestViewAsApiAtlasContainerPeerViewRequest(v *ApiAtlasGCPPeerVpcRequestView) ApiAtlasContainerPeerViewRequest {
	return ApiAtlasContainerPeerViewRequest{
		ApiAtlasGCPPeerVpcRequestView: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ApiAtlasContainerPeerViewRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ApiAtlasAWSPeerVpcRequestView
	err = newStrictDecoder(data).Decode(&dst.ApiAtlasAWSPeerVpcRequestView)
	if err == nil {
		jsonApiAtlasAWSPeerVpcRequestView, _ := json.Marshal(dst.ApiAtlasAWSPeerVpcRequestView)
		if string(jsonApiAtlasAWSPeerVpcRequestView) == "{}" { // empty struct
			dst.ApiAtlasAWSPeerVpcRequestView = nil
		} else {
			match++
		}
	} else {
		dst.ApiAtlasAWSPeerVpcRequestView = nil
	}

	// try to unmarshal data into ApiAtlasAzurePeerNetworkRequestView
	err = newStrictDecoder(data).Decode(&dst.ApiAtlasAzurePeerNetworkRequestView)
	if err == nil {
		jsonApiAtlasAzurePeerNetworkRequestView, _ := json.Marshal(dst.ApiAtlasAzurePeerNetworkRequestView)
		if string(jsonApiAtlasAzurePeerNetworkRequestView) == "{}" { // empty struct
			dst.ApiAtlasAzurePeerNetworkRequestView = nil
		} else {
			match++
		}
	} else {
		dst.ApiAtlasAzurePeerNetworkRequestView = nil
	}

	// try to unmarshal data into ApiAtlasGCPPeerVpcRequestView
	err = newStrictDecoder(data).Decode(&dst.ApiAtlasGCPPeerVpcRequestView)
	if err == nil {
		jsonApiAtlasGCPPeerVpcRequestView, _ := json.Marshal(dst.ApiAtlasGCPPeerVpcRequestView)
		if string(jsonApiAtlasGCPPeerVpcRequestView) == "{}" { // empty struct
			dst.ApiAtlasGCPPeerVpcRequestView = nil
		} else {
			match++
		}
	} else {
		dst.ApiAtlasGCPPeerVpcRequestView = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ApiAtlasAWSPeerVpcRequestView = nil
		dst.ApiAtlasAzurePeerNetworkRequestView = nil
		dst.ApiAtlasGCPPeerVpcRequestView = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ApiAtlasContainerPeerViewRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ApiAtlasContainerPeerViewRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ApiAtlasContainerPeerViewRequest) MarshalJSON() ([]byte, error) {
	if src.ApiAtlasAWSPeerVpcRequestView != nil {
		return json.Marshal(&src.ApiAtlasAWSPeerVpcRequestView)
	}

	if src.ApiAtlasAzurePeerNetworkRequestView != nil {
		return json.Marshal(&src.ApiAtlasAzurePeerNetworkRequestView)
	}

	if src.ApiAtlasGCPPeerVpcRequestView != nil {
		return json.Marshal(&src.ApiAtlasGCPPeerVpcRequestView)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ApiAtlasContainerPeerViewRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ApiAtlasAWSPeerVpcRequestView != nil {
		return obj.ApiAtlasAWSPeerVpcRequestView
	}

	if obj.ApiAtlasAzurePeerNetworkRequestView != nil {
		return obj.ApiAtlasAzurePeerNetworkRequestView
	}

	if obj.ApiAtlasGCPPeerVpcRequestView != nil {
		return obj.ApiAtlasGCPPeerVpcRequestView
	}

	// all schemas are nil
	return nil
}

type NullableApiAtlasContainerPeerViewRequest struct {
	value *ApiAtlasContainerPeerViewRequest
	isSet bool
}

func (v NullableApiAtlasContainerPeerViewRequest) Get() *ApiAtlasContainerPeerViewRequest {
	return v.value
}

func (v *NullableApiAtlasContainerPeerViewRequest) Set(val *ApiAtlasContainerPeerViewRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasContainerPeerViewRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasContainerPeerViewRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasContainerPeerViewRequest(val *ApiAtlasContainerPeerViewRequest) *NullableApiAtlasContainerPeerViewRequest {
	return &NullableApiAtlasContainerPeerViewRequest{value: val, isSet: true}
}

func (v NullableApiAtlasContainerPeerViewRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasContainerPeerViewRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


