/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ServerlessInstancePrivateEndpointEndpoint struct for ServerlessInstancePrivateEndpointEndpoint
type ServerlessInstancePrivateEndpointEndpoint struct {
	// Unique provider identifier of the private endpoint. 
	EndpointId string `json:"endpointId"`
	// Cloud provider where the private endpoint is deployed. 
	ProviderName string `json:"providerName"`
	// Region where the private endpoint is deployed. 
	Region string `json:"region"`
}

// NewServerlessInstancePrivateEndpointEndpoint instantiates a new ServerlessInstancePrivateEndpointEndpoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerlessInstancePrivateEndpointEndpoint(endpointId string, providerName string, region string) *ServerlessInstancePrivateEndpointEndpoint {
	this := ServerlessInstancePrivateEndpointEndpoint{}
	this.EndpointId = endpointId
	this.ProviderName = providerName
	this.Region = region
	return &this
}

// NewServerlessInstancePrivateEndpointEndpointWithDefaults instantiates a new ServerlessInstancePrivateEndpointEndpoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerlessInstancePrivateEndpointEndpointWithDefaults() *ServerlessInstancePrivateEndpointEndpoint {
	this := ServerlessInstancePrivateEndpointEndpoint{}
	return &this
}

// GetEndpointId returns the EndpointId field value
func (o *ServerlessInstancePrivateEndpointEndpoint) GetEndpointId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EndpointId
}

// GetEndpointIdOk returns a tuple with the EndpointId field value
// and a boolean to check if the value has been set.
func (o *ServerlessInstancePrivateEndpointEndpoint) GetEndpointIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.EndpointId, true
}

// SetEndpointId sets field value
func (o *ServerlessInstancePrivateEndpointEndpoint) SetEndpointId(v string) {
	o.EndpointId = v
}

// GetProviderName returns the ProviderName field value
func (o *ServerlessInstancePrivateEndpointEndpoint) GetProviderName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderName
}

// GetProviderNameOk returns a tuple with the ProviderName field value
// and a boolean to check if the value has been set.
func (o *ServerlessInstancePrivateEndpointEndpoint) GetProviderNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ProviderName, true
}

// SetProviderName sets field value
func (o *ServerlessInstancePrivateEndpointEndpoint) SetProviderName(v string) {
	o.ProviderName = v
}

// GetRegion returns the Region field value
func (o *ServerlessInstancePrivateEndpointEndpoint) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *ServerlessInstancePrivateEndpointEndpoint) GetRegionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *ServerlessInstancePrivateEndpointEndpoint) SetRegion(v string) {
	o.Region = v
}

func (o ServerlessInstancePrivateEndpointEndpoint) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["endpointId"] = o.EndpointId
	}
	if true {
		toSerialize["providerName"] = o.ProviderName
	}
	if true {
		toSerialize["region"] = o.Region
	}
	return json.Marshal(toSerialize)
}

type NullableServerlessInstancePrivateEndpointEndpoint struct {
	value *ServerlessInstancePrivateEndpointEndpoint
	isSet bool
}

func (v NullableServerlessInstancePrivateEndpointEndpoint) Get() *ServerlessInstancePrivateEndpointEndpoint {
	return v.value
}

func (v *NullableServerlessInstancePrivateEndpointEndpoint) Set(val *ServerlessInstancePrivateEndpointEndpoint) {
	v.value = val
	v.isSet = true
}

func (v NullableServerlessInstancePrivateEndpointEndpoint) IsSet() bool {
	return v.isSet
}

func (v *NullableServerlessInstancePrivateEndpointEndpoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerlessInstancePrivateEndpointEndpoint(val *ServerlessInstancePrivateEndpointEndpoint) *NullableServerlessInstancePrivateEndpointEndpoint {
	return &NullableServerlessInstancePrivateEndpointEndpoint{value: val, isSet: true}
}

func (v NullableServerlessInstancePrivateEndpointEndpoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerlessInstancePrivateEndpointEndpoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


