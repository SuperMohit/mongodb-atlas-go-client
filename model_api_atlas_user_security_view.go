/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiAtlasUserSecurityView struct for ApiAtlasUserSecurityView
type ApiAtlasUserSecurityView struct {
	CustomerX509 *ApiAtlasCustomerX509View `json:"customerX509,omitempty"`
	Ldap *ApiAtlasNDSLDAPView `json:"ldap,omitempty"`
	// List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.
	Links []Link `json:"links"`
}

// NewApiAtlasUserSecurityView instantiates a new ApiAtlasUserSecurityView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAtlasUserSecurityView(links []Link) *ApiAtlasUserSecurityView {
	this := ApiAtlasUserSecurityView{}
	this.Links = links
	return &this
}

// NewApiAtlasUserSecurityViewWithDefaults instantiates a new ApiAtlasUserSecurityView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAtlasUserSecurityViewWithDefaults() *ApiAtlasUserSecurityView {
	this := ApiAtlasUserSecurityView{}
	return &this
}

// GetCustomerX509 returns the CustomerX509 field value if set, zero value otherwise.
func (o *ApiAtlasUserSecurityView) GetCustomerX509() ApiAtlasCustomerX509View {
	if o == nil || isNil(o.CustomerX509) {
		var ret ApiAtlasCustomerX509View
		return ret
	}
	return *o.CustomerX509
}

// GetCustomerX509Ok returns a tuple with the CustomerX509 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasUserSecurityView) GetCustomerX509Ok() (*ApiAtlasCustomerX509View, bool) {
	if o == nil || isNil(o.CustomerX509) {
    return nil, false
	}
	return o.CustomerX509, true
}

// HasCustomerX509 returns a boolean if a field has been set.
func (o *ApiAtlasUserSecurityView) HasCustomerX509() bool {
	if o != nil && !isNil(o.CustomerX509) {
		return true
	}

	return false
}

// SetCustomerX509 gets a reference to the given ApiAtlasCustomerX509View and assigns it to the CustomerX509 field.
func (o *ApiAtlasUserSecurityView) SetCustomerX509(v ApiAtlasCustomerX509View) {
	o.CustomerX509 = &v
}

// GetLdap returns the Ldap field value if set, zero value otherwise.
func (o *ApiAtlasUserSecurityView) GetLdap() ApiAtlasNDSLDAPView {
	if o == nil || isNil(o.Ldap) {
		var ret ApiAtlasNDSLDAPView
		return ret
	}
	return *o.Ldap
}

// GetLdapOk returns a tuple with the Ldap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasUserSecurityView) GetLdapOk() (*ApiAtlasNDSLDAPView, bool) {
	if o == nil || isNil(o.Ldap) {
    return nil, false
	}
	return o.Ldap, true
}

// HasLdap returns a boolean if a field has been set.
func (o *ApiAtlasUserSecurityView) HasLdap() bool {
	if o != nil && !isNil(o.Ldap) {
		return true
	}

	return false
}

// SetLdap gets a reference to the given ApiAtlasNDSLDAPView and assigns it to the Ldap field.
func (o *ApiAtlasUserSecurityView) SetLdap(v ApiAtlasNDSLDAPView) {
	o.Ldap = &v
}

// GetLinks returns the Links field value
func (o *ApiAtlasUserSecurityView) GetLinks() []Link {
	if o == nil {
		var ret []Link
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *ApiAtlasUserSecurityView) GetLinksOk() ([]Link, bool) {
	if o == nil {
    return nil, false
	}
	return o.Links, true
}

// SetLinks sets field value
func (o *ApiAtlasUserSecurityView) SetLinks(v []Link) {
	o.Links = v
}

func (o ApiAtlasUserSecurityView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.CustomerX509) {
		toSerialize["customerX509"] = o.CustomerX509
	}
	if !isNil(o.Ldap) {
		toSerialize["ldap"] = o.Ldap
	}
	if true {
		toSerialize["links"] = o.Links
	}
	return json.Marshal(toSerialize)
}

type NullableApiAtlasUserSecurityView struct {
	value *ApiAtlasUserSecurityView
	isSet bool
}

func (v NullableApiAtlasUserSecurityView) Get() *ApiAtlasUserSecurityView {
	return v.value
}

func (v *NullableApiAtlasUserSecurityView) Set(val *ApiAtlasUserSecurityView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasUserSecurityView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasUserSecurityView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasUserSecurityView(val *ApiAtlasUserSecurityView) *NullableApiAtlasUserSecurityView {
	return &NullableApiAtlasUserSecurityView{value: val, isSet: true}
}

func (v NullableApiAtlasUserSecurityView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasUserSecurityView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


