/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiAtlasDataLakeOnlineArchiveStoreViewAllOf struct for ApiAtlasDataLakeOnlineArchiveStoreViewAllOf
type ApiAtlasDataLakeOnlineArchiveStoreViewAllOf struct {
	// ID of the Cluster the Online Archive belongs to.
	ClusterId *string `json:"clusterId,omitempty"`
	// Name of the Cluster the Online Archive belongs to.
	ClusterName *string `json:"clusterName,omitempty"`
	// ID of the Project the Online Archive belongs to.
	ProjectId *string `json:"projectId,omitempty"`
}

// NewApiAtlasDataLakeOnlineArchiveStoreViewAllOf instantiates a new ApiAtlasDataLakeOnlineArchiveStoreViewAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAtlasDataLakeOnlineArchiveStoreViewAllOf() *ApiAtlasDataLakeOnlineArchiveStoreViewAllOf {
	this := ApiAtlasDataLakeOnlineArchiveStoreViewAllOf{}
	return &this
}

// NewApiAtlasDataLakeOnlineArchiveStoreViewAllOfWithDefaults instantiates a new ApiAtlasDataLakeOnlineArchiveStoreViewAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAtlasDataLakeOnlineArchiveStoreViewAllOfWithDefaults() *ApiAtlasDataLakeOnlineArchiveStoreViewAllOf {
	this := ApiAtlasDataLakeOnlineArchiveStoreViewAllOf{}
	return &this
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise.
func (o *ApiAtlasDataLakeOnlineArchiveStoreViewAllOf) GetClusterId() string {
	if o == nil || isNil(o.ClusterId) {
		var ret string
		return ret
	}
	return *o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasDataLakeOnlineArchiveStoreViewAllOf) GetClusterIdOk() (*string, bool) {
	if o == nil || isNil(o.ClusterId) {
    return nil, false
	}
	return o.ClusterId, true
}

// HasClusterId returns a boolean if a field has been set.
func (o *ApiAtlasDataLakeOnlineArchiveStoreViewAllOf) HasClusterId() bool {
	if o != nil && !isNil(o.ClusterId) {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given string and assigns it to the ClusterId field.
func (o *ApiAtlasDataLakeOnlineArchiveStoreViewAllOf) SetClusterId(v string) {
	o.ClusterId = &v
}

// GetClusterName returns the ClusterName field value if set, zero value otherwise.
func (o *ApiAtlasDataLakeOnlineArchiveStoreViewAllOf) GetClusterName() string {
	if o == nil || isNil(o.ClusterName) {
		var ret string
		return ret
	}
	return *o.ClusterName
}

// GetClusterNameOk returns a tuple with the ClusterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasDataLakeOnlineArchiveStoreViewAllOf) GetClusterNameOk() (*string, bool) {
	if o == nil || isNil(o.ClusterName) {
    return nil, false
	}
	return o.ClusterName, true
}

// HasClusterName returns a boolean if a field has been set.
func (o *ApiAtlasDataLakeOnlineArchiveStoreViewAllOf) HasClusterName() bool {
	if o != nil && !isNil(o.ClusterName) {
		return true
	}

	return false
}

// SetClusterName gets a reference to the given string and assigns it to the ClusterName field.
func (o *ApiAtlasDataLakeOnlineArchiveStoreViewAllOf) SetClusterName(v string) {
	o.ClusterName = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *ApiAtlasDataLakeOnlineArchiveStoreViewAllOf) GetProjectId() string {
	if o == nil || isNil(o.ProjectId) {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasDataLakeOnlineArchiveStoreViewAllOf) GetProjectIdOk() (*string, bool) {
	if o == nil || isNil(o.ProjectId) {
    return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *ApiAtlasDataLakeOnlineArchiveStoreViewAllOf) HasProjectId() bool {
	if o != nil && !isNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *ApiAtlasDataLakeOnlineArchiveStoreViewAllOf) SetProjectId(v string) {
	o.ProjectId = &v
}

func (o ApiAtlasDataLakeOnlineArchiveStoreViewAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ClusterId) {
		toSerialize["clusterId"] = o.ClusterId
	}
	if !isNil(o.ClusterName) {
		toSerialize["clusterName"] = o.ClusterName
	}
	if !isNil(o.ProjectId) {
		toSerialize["projectId"] = o.ProjectId
	}
	return json.Marshal(toSerialize)
}

type NullableApiAtlasDataLakeOnlineArchiveStoreViewAllOf struct {
	value *ApiAtlasDataLakeOnlineArchiveStoreViewAllOf
	isSet bool
}

func (v NullableApiAtlasDataLakeOnlineArchiveStoreViewAllOf) Get() *ApiAtlasDataLakeOnlineArchiveStoreViewAllOf {
	return v.value
}

func (v *NullableApiAtlasDataLakeOnlineArchiveStoreViewAllOf) Set(val *ApiAtlasDataLakeOnlineArchiveStoreViewAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasDataLakeOnlineArchiveStoreViewAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasDataLakeOnlineArchiveStoreViewAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasDataLakeOnlineArchiveStoreViewAllOf(val *ApiAtlasDataLakeOnlineArchiveStoreViewAllOf) *NullableApiAtlasDataLakeOnlineArchiveStoreViewAllOf {
	return &NullableApiAtlasDataLakeOnlineArchiveStoreViewAllOf{value: val, isSet: true}
}

func (v NullableApiAtlasDataLakeOnlineArchiveStoreViewAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasDataLakeOnlineArchiveStoreViewAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


