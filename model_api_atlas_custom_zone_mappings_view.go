/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiAtlasCustomZoneMappingsView struct for ApiAtlasCustomZoneMappingsView
type ApiAtlasCustomZoneMappingsView struct {
	// List that contains comma-separated key value pairs to map zones to geographic regions. These pairs map an ISO 3166-1a2 location code, with an ISO 3166-2 subdivision code when possible, to the human-readable label for the desired custom zone. MongoDB Cloud maps the ISO 3166-1a2 code to the nearest geographical zone by default. Include this parameter to override the default mappings.  This parameter returns an empty object if no custom zones exist.
	CustomZoneMappings []ApiAtlasZoneMappingView `json:"customZoneMappings"`
}

// NewApiAtlasCustomZoneMappingsView instantiates a new ApiAtlasCustomZoneMappingsView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAtlasCustomZoneMappingsView(customZoneMappings []ApiAtlasZoneMappingView) *ApiAtlasCustomZoneMappingsView {
	this := ApiAtlasCustomZoneMappingsView{}
	this.CustomZoneMappings = customZoneMappings
	return &this
}

// NewApiAtlasCustomZoneMappingsViewWithDefaults instantiates a new ApiAtlasCustomZoneMappingsView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAtlasCustomZoneMappingsViewWithDefaults() *ApiAtlasCustomZoneMappingsView {
	this := ApiAtlasCustomZoneMappingsView{}
	return &this
}

// GetCustomZoneMappings returns the CustomZoneMappings field value
func (o *ApiAtlasCustomZoneMappingsView) GetCustomZoneMappings() []ApiAtlasZoneMappingView {
	if o == nil {
		var ret []ApiAtlasZoneMappingView
		return ret
	}

	return o.CustomZoneMappings
}

// GetCustomZoneMappingsOk returns a tuple with the CustomZoneMappings field value
// and a boolean to check if the value has been set.
func (o *ApiAtlasCustomZoneMappingsView) GetCustomZoneMappingsOk() ([]ApiAtlasZoneMappingView, bool) {
	if o == nil {
    return nil, false
	}
	return o.CustomZoneMappings, true
}

// SetCustomZoneMappings sets field value
func (o *ApiAtlasCustomZoneMappingsView) SetCustomZoneMappings(v []ApiAtlasZoneMappingView) {
	o.CustomZoneMappings = v
}

func (o ApiAtlasCustomZoneMappingsView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["customZoneMappings"] = o.CustomZoneMappings
	}
	return json.Marshal(toSerialize)
}

type NullableApiAtlasCustomZoneMappingsView struct {
	value *ApiAtlasCustomZoneMappingsView
	isSet bool
}

func (v NullableApiAtlasCustomZoneMappingsView) Get() *ApiAtlasCustomZoneMappingsView {
	return v.value
}

func (v *NullableApiAtlasCustomZoneMappingsView) Set(val *ApiAtlasCustomZoneMappingsView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasCustomZoneMappingsView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasCustomZoneMappingsView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasCustomZoneMappingsView(val *ApiAtlasCustomZoneMappingsView) *NullableApiAtlasCustomZoneMappingsView {
	return &NullableApiAtlasCustomZoneMappingsView{value: val, isSet: true}
}

func (v NullableApiAtlasCustomZoneMappingsView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasCustomZoneMappingsView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


