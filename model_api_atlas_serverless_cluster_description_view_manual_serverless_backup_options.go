/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiAtlasServerlessClusterDescriptionViewManualServerlessBackupOptions Options that configure serverless instance backups.
type ApiAtlasServerlessClusterDescriptionViewManualServerlessBackupOptions struct {
	// Flag that indicates whether the serverless instances uses **Serverless Continuous Backup**. If this parameter is `false`, the serverless instance uses **Basic Backup**. | Option | Description | |---|---| | Serverless Continuous Backup | Atlas takes incremental [snapshots](https://www.mongodb.com/docs/atlas/backup/cloud-backup/overview/#std-label-serverless-snapshots) of the data in your serverless instance every six hours and lets you restore the data from a selected point in time within the last 72 hours. Atlas also takes daily snapshots and retains these daily snapshots for 35 days. To learn more, see [Serverless Instance Costs](https://www.mongodb.com/docs/atlas/billing/serverless-instance-costs/#std-label-serverless-instance-costs). | | Basic Backup | Atlas takes incremental [snapshots](https://www.mongodb.com/docs/atlas/backup/cloud-backup/overview/#std-label-serverless-snapshots) of the data in your serverless instance every six hours and retains only the two most recent snapshots. You can use this option for free. |
	ServerlessContinuousBackupEnabled *bool `json:"serverlessContinuousBackupEnabled,omitempty"`
}

// NewApiAtlasServerlessClusterDescriptionViewManualServerlessBackupOptions instantiates a new ApiAtlasServerlessClusterDescriptionViewManualServerlessBackupOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAtlasServerlessClusterDescriptionViewManualServerlessBackupOptions() *ApiAtlasServerlessClusterDescriptionViewManualServerlessBackupOptions {
	this := ApiAtlasServerlessClusterDescriptionViewManualServerlessBackupOptions{}
	return &this
}

// NewApiAtlasServerlessClusterDescriptionViewManualServerlessBackupOptionsWithDefaults instantiates a new ApiAtlasServerlessClusterDescriptionViewManualServerlessBackupOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAtlasServerlessClusterDescriptionViewManualServerlessBackupOptionsWithDefaults() *ApiAtlasServerlessClusterDescriptionViewManualServerlessBackupOptions {
	this := ApiAtlasServerlessClusterDescriptionViewManualServerlessBackupOptions{}
	return &this
}

// GetServerlessContinuousBackupEnabled returns the ServerlessContinuousBackupEnabled field value if set, zero value otherwise.
func (o *ApiAtlasServerlessClusterDescriptionViewManualServerlessBackupOptions) GetServerlessContinuousBackupEnabled() bool {
	if o == nil || isNil(o.ServerlessContinuousBackupEnabled) {
		var ret bool
		return ret
	}
	return *o.ServerlessContinuousBackupEnabled
}

// GetServerlessContinuousBackupEnabledOk returns a tuple with the ServerlessContinuousBackupEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasServerlessClusterDescriptionViewManualServerlessBackupOptions) GetServerlessContinuousBackupEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.ServerlessContinuousBackupEnabled) {
    return nil, false
	}
	return o.ServerlessContinuousBackupEnabled, true
}

// HasServerlessContinuousBackupEnabled returns a boolean if a field has been set.
func (o *ApiAtlasServerlessClusterDescriptionViewManualServerlessBackupOptions) HasServerlessContinuousBackupEnabled() bool {
	if o != nil && !isNil(o.ServerlessContinuousBackupEnabled) {
		return true
	}

	return false
}

// SetServerlessContinuousBackupEnabled gets a reference to the given bool and assigns it to the ServerlessContinuousBackupEnabled field.
func (o *ApiAtlasServerlessClusterDescriptionViewManualServerlessBackupOptions) SetServerlessContinuousBackupEnabled(v bool) {
	o.ServerlessContinuousBackupEnabled = &v
}

func (o ApiAtlasServerlessClusterDescriptionViewManualServerlessBackupOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ServerlessContinuousBackupEnabled) {
		toSerialize["serverlessContinuousBackupEnabled"] = o.ServerlessContinuousBackupEnabled
	}
	return json.Marshal(toSerialize)
}

type NullableApiAtlasServerlessClusterDescriptionViewManualServerlessBackupOptions struct {
	value *ApiAtlasServerlessClusterDescriptionViewManualServerlessBackupOptions
	isSet bool
}

func (v NullableApiAtlasServerlessClusterDescriptionViewManualServerlessBackupOptions) Get() *ApiAtlasServerlessClusterDescriptionViewManualServerlessBackupOptions {
	return v.value
}

func (v *NullableApiAtlasServerlessClusterDescriptionViewManualServerlessBackupOptions) Set(val *ApiAtlasServerlessClusterDescriptionViewManualServerlessBackupOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasServerlessClusterDescriptionViewManualServerlessBackupOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasServerlessClusterDescriptionViewManualServerlessBackupOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasServerlessClusterDescriptionViewManualServerlessBackupOptions(val *ApiAtlasServerlessClusterDescriptionViewManualServerlessBackupOptions) *NullableApiAtlasServerlessClusterDescriptionViewManualServerlessBackupOptions {
	return &NullableApiAtlasServerlessClusterDescriptionViewManualServerlessBackupOptions{value: val, isSet: true}
}

func (v NullableApiAtlasServerlessClusterDescriptionViewManualServerlessBackupOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasServerlessClusterDescriptionViewManualServerlessBackupOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


