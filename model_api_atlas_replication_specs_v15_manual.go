/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiAtlasReplicationSpecsV15Manual struct for ApiAtlasReplicationSpecsV15Manual
type ApiAtlasReplicationSpecsV15Manual struct {
	// Unique 24-hexadecimal digit string that identifies the replication object for a zone in a Multi-Cloud Cluster. If you include existing zones in the request, you must specify this parameter. If you add a new zone to an existing Multi-Cloud Cluster, you may specify this parameter. The request deletes any existing zones in the Multi-Cloud Cluster that you exclude from the request.
	Id *string `json:"id,omitempty"`
	// Positive integer that specifies the number of shards to deploy in each specified zone. If you set this value to `1` and `\"clusterType\" : \"SHARDED\"`, MongoDB Cloud deploys a single-shard sharded cluster. Don't create a sharded cluster with a single shard for production environments. Single-shard sharded clusters don't provide the same benefits as multi-shard configurations.
	NumShards *int32 `json:"numShards,omitempty"`
	// Hardware specifications for nodes set for a given region. Each **regionConfigs** object describes the region's priority in elections and the number and type of MongoDB nodes that MongoDB Cloud deploys to the region. Each **regionConfigs** object must have either an **analyticsSpecs** object, **electableSpecs** object, or **readOnlySpecs** object. Tenant clusters only require **electableSpecs. Dedicated** clusters can specify any of these specifications, but must have at least one **electableSpecs** object within a **replicationSpec**. Every hardware specification must use the same **instanceSize**.  **Example:**  If you set `\"replicationSpecs[n].regionConfigs[m].analyticsSpecs.instanceSize\" : \"M30\"`, set `\"replicationSpecs[n].regionConfigs[m].electableSpecs.instanceSize\" : `\"M30\"` if you have electable nodes and `\"replicationSpecs[n].regionConfigs[m].readOnlySpecs.instanceSize\" : `\"M30\"` if you have read-only nodes.\",
	RegionConfigs []ApiAtlasClusterRegionConfigsV15Manual `json:"regionConfigs,omitempty"`
	// Human-readable label that identifies the zone in a Global Cluster. Provide this value only if `\"clusterType\" : \"GEOSHARDED\"`.
	ZoneName *string `json:"zoneName,omitempty"`
}

// NewApiAtlasReplicationSpecsV15Manual instantiates a new ApiAtlasReplicationSpecsV15Manual object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAtlasReplicationSpecsV15Manual() *ApiAtlasReplicationSpecsV15Manual {
	this := ApiAtlasReplicationSpecsV15Manual{}
	return &this
}

// NewApiAtlasReplicationSpecsV15ManualWithDefaults instantiates a new ApiAtlasReplicationSpecsV15Manual object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAtlasReplicationSpecsV15ManualWithDefaults() *ApiAtlasReplicationSpecsV15Manual {
	this := ApiAtlasReplicationSpecsV15Manual{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApiAtlasReplicationSpecsV15Manual) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasReplicationSpecsV15Manual) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApiAtlasReplicationSpecsV15Manual) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ApiAtlasReplicationSpecsV15Manual) SetId(v string) {
	o.Id = &v
}

// GetNumShards returns the NumShards field value if set, zero value otherwise.
func (o *ApiAtlasReplicationSpecsV15Manual) GetNumShards() int32 {
	if o == nil || isNil(o.NumShards) {
		var ret int32
		return ret
	}
	return *o.NumShards
}

// GetNumShardsOk returns a tuple with the NumShards field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasReplicationSpecsV15Manual) GetNumShardsOk() (*int32, bool) {
	if o == nil || isNil(o.NumShards) {
    return nil, false
	}
	return o.NumShards, true
}

// HasNumShards returns a boolean if a field has been set.
func (o *ApiAtlasReplicationSpecsV15Manual) HasNumShards() bool {
	if o != nil && !isNil(o.NumShards) {
		return true
	}

	return false
}

// SetNumShards gets a reference to the given int32 and assigns it to the NumShards field.
func (o *ApiAtlasReplicationSpecsV15Manual) SetNumShards(v int32) {
	o.NumShards = &v
}

// GetRegionConfigs returns the RegionConfigs field value if set, zero value otherwise.
func (o *ApiAtlasReplicationSpecsV15Manual) GetRegionConfigs() []ApiAtlasClusterRegionConfigsV15Manual {
	if o == nil || isNil(o.RegionConfigs) {
		var ret []ApiAtlasClusterRegionConfigsV15Manual
		return ret
	}
	return o.RegionConfigs
}

// GetRegionConfigsOk returns a tuple with the RegionConfigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasReplicationSpecsV15Manual) GetRegionConfigsOk() ([]ApiAtlasClusterRegionConfigsV15Manual, bool) {
	if o == nil || isNil(o.RegionConfigs) {
    return nil, false
	}
	return o.RegionConfigs, true
}

// HasRegionConfigs returns a boolean if a field has been set.
func (o *ApiAtlasReplicationSpecsV15Manual) HasRegionConfigs() bool {
	if o != nil && !isNil(o.RegionConfigs) {
		return true
	}

	return false
}

// SetRegionConfigs gets a reference to the given []ApiAtlasClusterRegionConfigsV15Manual and assigns it to the RegionConfigs field.
func (o *ApiAtlasReplicationSpecsV15Manual) SetRegionConfigs(v []ApiAtlasClusterRegionConfigsV15Manual) {
	o.RegionConfigs = v
}

// GetZoneName returns the ZoneName field value if set, zero value otherwise.
func (o *ApiAtlasReplicationSpecsV15Manual) GetZoneName() string {
	if o == nil || isNil(o.ZoneName) {
		var ret string
		return ret
	}
	return *o.ZoneName
}

// GetZoneNameOk returns a tuple with the ZoneName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasReplicationSpecsV15Manual) GetZoneNameOk() (*string, bool) {
	if o == nil || isNil(o.ZoneName) {
    return nil, false
	}
	return o.ZoneName, true
}

// HasZoneName returns a boolean if a field has been set.
func (o *ApiAtlasReplicationSpecsV15Manual) HasZoneName() bool {
	if o != nil && !isNil(o.ZoneName) {
		return true
	}

	return false
}

// SetZoneName gets a reference to the given string and assigns it to the ZoneName field.
func (o *ApiAtlasReplicationSpecsV15Manual) SetZoneName(v string) {
	o.ZoneName = &v
}

func (o ApiAtlasReplicationSpecsV15Manual) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.NumShards) {
		toSerialize["numShards"] = o.NumShards
	}
	if !isNil(o.RegionConfigs) {
		toSerialize["regionConfigs"] = o.RegionConfigs
	}
	if !isNil(o.ZoneName) {
		toSerialize["zoneName"] = o.ZoneName
	}
	return json.Marshal(toSerialize)
}

type NullableApiAtlasReplicationSpecsV15Manual struct {
	value *ApiAtlasReplicationSpecsV15Manual
	isSet bool
}

func (v NullableApiAtlasReplicationSpecsV15Manual) Get() *ApiAtlasReplicationSpecsV15Manual {
	return v.value
}

func (v *NullableApiAtlasReplicationSpecsV15Manual) Set(val *ApiAtlasReplicationSpecsV15Manual) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasReplicationSpecsV15Manual) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasReplicationSpecsV15Manual) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasReplicationSpecsV15Manual(val *ApiAtlasReplicationSpecsV15Manual) *NullableApiAtlasReplicationSpecsV15Manual {
	return &NullableApiAtlasReplicationSpecsV15Manual{value: val, isSet: true}
}

func (v NullableApiAtlasReplicationSpecsV15Manual) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasReplicationSpecsV15Manual) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


