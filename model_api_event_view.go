/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// ApiEventView struct for ApiEventView
type ApiEventView struct {
	// Unique 24-hexadecimal digit string that identifies the alert configuration associated with the **alertId**.
	AlertConfigId *string `json:"alertConfigId,omitempty"`
	// Unique 24-hexadecimal digit string that identifies the alert associated with the event.
	AlertId *string `json:"alertId,omitempty"`
	// Unique 24-hexadecimal digit string that identifies the API Key that triggered the event. If this resource returns this parameter, it doesn't return the **userId** parameter.
	ApiKeyId *string `json:"apiKeyId,omitempty"`
	// Human-readable label of the collection on which the event occurred. The resource returns this parameter when the **eventTypeName** includes `DATA_EXPLORER`.
	Collection *string `json:"collection,omitempty"`
	// Date and time when this event occurred. This parameter expresses its value in the ISO 8601 timestamp format in UTC.
	Created *time.Time `json:"created,omitempty"`
	CurrentValue *ApiMetricValueView `json:"currentValue,omitempty"`
	// Human-readable label of the database on which this incident occurred. The resource returns this parameter when `\"eventTypeName\" : \"DATA_EXPLORER\"` or `\"eventTypeName\" : \"DATA_EXPLORER_CRUD\"`.
	Database *string `json:"database,omitempty"`
	// Unique 24-hexadecimal digit string that identifies the endpoint associated with this event.
	EndpointId *string `json:"endpointId,omitempty"`
	// Category of incident recorded at this moment in time.
	EventTypeName *string `json:"eventTypeName,omitempty"`
	// Unique 24-hexadecimal digit string that identifies the project in which the event occurred. The **eventId** identifies the specific event.
	GroupId *string `json:"groupId,omitempty"`
	// Unique 24-hexadecimal digit string that identifies the event.
	Id *string `json:"id,omitempty"`
	// Unique 24-hexadecimal digit string that identifies of the invoice associated with the event.
	InvoiceId *string `json:"invoiceId,omitempty"`
	// Flag that indicates whether a MongoDB employee triggered the specified event.
	IsGlobalAdmin *bool `json:"isGlobalAdmin,omitempty"`
	// List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.
	Links []Link `json:"links"`
	// Human-readable label of the metric associated with the **alertId**.
	MetricName *string `json:"metricName,omitempty"`
	// Action that the database attempted to execute when the event triggered. The response returns this parameter when `eventTypeName\" : \"DATA_EXPLORER\"`.
	OpType *string `json:"opType,omitempty"`
	// Unique 24-hexadecimal digit string that identifies for the organization to which these events apply.
	OrgId *string `json:"orgId,omitempty"`
	// Unique 24-hexadecimal digit string that identifies the invoice payment associated with this event.
	PaymentId *string `json:"paymentId,omitempty"`
	// IANA port on which the MongoDB process listens for requests.
	Port *int32 `json:"port,omitempty"`
	// Unique identification string that the cloud provider uses to identify the private endpoint.
	ProviderEndpointId *string `json:"providerEndpointId,omitempty"`
	// Public part of the API key that triggered the event. If this resource returns this parameter, it doesn't return the **username** parameter.
	PublicKey *string `json:"publicKey,omitempty"`
	// Additional meta information captured about this event. The response returns this parameter as a JSON object when the query parameter `includeRaw=true`. The values in the raw document may change. Don't rely on raw values for formal monitoring.
	Raw *string `json:"raw,omitempty"`
	// IPv4 or IPv6 address from which the user triggered this event.
	RemoteAddress *string `json:"remoteAddress,omitempty"`
	// Human-readable label of the replica set associated with the event.
	ReplicaSetName *string `json:"replicaSetName,omitempty"`
	// Human-readable label of the shard associated with the event.
	ShardName *string `json:"shardName,omitempty"`
	// Public part of the API key that this event targets.
	TargetPublicKey *string `json:"targetPublicKey,omitempty"`
	// Email address for the console user that this event targets. The resource returns this parameter when `\"eventTypeName\" : \"USER\"`.
	TargetUsername *string `json:"targetUsername,omitempty"`
	// Unique 24-hexadecimal digit string that identifies the organization team associated with this event.
	TeamId *string `json:"teamId,omitempty"`
	// Unique 24-hexadecimal digit string that identifies the console user who triggered the event. If this resource returns this parameter, it doesn't return the **apiKeyId** parameter.
	UserId *string `json:"userId,omitempty"`
	// Email address for the user who triggered this event. If this resource returns this parameter, it doesn't return the **publicApiKey** parameter.
	Username *string `json:"username,omitempty"`
	// Entry in the list of source host addresses that the API key accepts and this event targets.
	WhitelistEntry *string `json:"whitelistEntry,omitempty"`
}

// NewApiEventView instantiates a new ApiEventView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiEventView(links []Link) *ApiEventView {
	this := ApiEventView{}
	this.Links = links
	return &this
}

// NewApiEventViewWithDefaults instantiates a new ApiEventView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiEventViewWithDefaults() *ApiEventView {
	this := ApiEventView{}
	return &this
}

// GetAlertConfigId returns the AlertConfigId field value if set, zero value otherwise.
func (o *ApiEventView) GetAlertConfigId() string {
	if o == nil || isNil(o.AlertConfigId) {
		var ret string
		return ret
	}
	return *o.AlertConfigId
}

// GetAlertConfigIdOk returns a tuple with the AlertConfigId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiEventView) GetAlertConfigIdOk() (*string, bool) {
	if o == nil || isNil(o.AlertConfigId) {
    return nil, false
	}
	return o.AlertConfigId, true
}

// HasAlertConfigId returns a boolean if a field has been set.
func (o *ApiEventView) HasAlertConfigId() bool {
	if o != nil && !isNil(o.AlertConfigId) {
		return true
	}

	return false
}

// SetAlertConfigId gets a reference to the given string and assigns it to the AlertConfigId field.
func (o *ApiEventView) SetAlertConfigId(v string) {
	o.AlertConfigId = &v
}

// GetAlertId returns the AlertId field value if set, zero value otherwise.
func (o *ApiEventView) GetAlertId() string {
	if o == nil || isNil(o.AlertId) {
		var ret string
		return ret
	}
	return *o.AlertId
}

// GetAlertIdOk returns a tuple with the AlertId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiEventView) GetAlertIdOk() (*string, bool) {
	if o == nil || isNil(o.AlertId) {
    return nil, false
	}
	return o.AlertId, true
}

// HasAlertId returns a boolean if a field has been set.
func (o *ApiEventView) HasAlertId() bool {
	if o != nil && !isNil(o.AlertId) {
		return true
	}

	return false
}

// SetAlertId gets a reference to the given string and assigns it to the AlertId field.
func (o *ApiEventView) SetAlertId(v string) {
	o.AlertId = &v
}

// GetApiKeyId returns the ApiKeyId field value if set, zero value otherwise.
func (o *ApiEventView) GetApiKeyId() string {
	if o == nil || isNil(o.ApiKeyId) {
		var ret string
		return ret
	}
	return *o.ApiKeyId
}

// GetApiKeyIdOk returns a tuple with the ApiKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiEventView) GetApiKeyIdOk() (*string, bool) {
	if o == nil || isNil(o.ApiKeyId) {
    return nil, false
	}
	return o.ApiKeyId, true
}

// HasApiKeyId returns a boolean if a field has been set.
func (o *ApiEventView) HasApiKeyId() bool {
	if o != nil && !isNil(o.ApiKeyId) {
		return true
	}

	return false
}

// SetApiKeyId gets a reference to the given string and assigns it to the ApiKeyId field.
func (o *ApiEventView) SetApiKeyId(v string) {
	o.ApiKeyId = &v
}

// GetCollection returns the Collection field value if set, zero value otherwise.
func (o *ApiEventView) GetCollection() string {
	if o == nil || isNil(o.Collection) {
		var ret string
		return ret
	}
	return *o.Collection
}

// GetCollectionOk returns a tuple with the Collection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiEventView) GetCollectionOk() (*string, bool) {
	if o == nil || isNil(o.Collection) {
    return nil, false
	}
	return o.Collection, true
}

// HasCollection returns a boolean if a field has been set.
func (o *ApiEventView) HasCollection() bool {
	if o != nil && !isNil(o.Collection) {
		return true
	}

	return false
}

// SetCollection gets a reference to the given string and assigns it to the Collection field.
func (o *ApiEventView) SetCollection(v string) {
	o.Collection = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *ApiEventView) GetCreated() time.Time {
	if o == nil || isNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiEventView) GetCreatedOk() (*time.Time, bool) {
	if o == nil || isNil(o.Created) {
    return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *ApiEventView) HasCreated() bool {
	if o != nil && !isNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *ApiEventView) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCurrentValue returns the CurrentValue field value if set, zero value otherwise.
func (o *ApiEventView) GetCurrentValue() ApiMetricValueView {
	if o == nil || isNil(o.CurrentValue) {
		var ret ApiMetricValueView
		return ret
	}
	return *o.CurrentValue
}

// GetCurrentValueOk returns a tuple with the CurrentValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiEventView) GetCurrentValueOk() (*ApiMetricValueView, bool) {
	if o == nil || isNil(o.CurrentValue) {
    return nil, false
	}
	return o.CurrentValue, true
}

// HasCurrentValue returns a boolean if a field has been set.
func (o *ApiEventView) HasCurrentValue() bool {
	if o != nil && !isNil(o.CurrentValue) {
		return true
	}

	return false
}

// SetCurrentValue gets a reference to the given ApiMetricValueView and assigns it to the CurrentValue field.
func (o *ApiEventView) SetCurrentValue(v ApiMetricValueView) {
	o.CurrentValue = &v
}

// GetDatabase returns the Database field value if set, zero value otherwise.
func (o *ApiEventView) GetDatabase() string {
	if o == nil || isNil(o.Database) {
		var ret string
		return ret
	}
	return *o.Database
}

// GetDatabaseOk returns a tuple with the Database field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiEventView) GetDatabaseOk() (*string, bool) {
	if o == nil || isNil(o.Database) {
    return nil, false
	}
	return o.Database, true
}

// HasDatabase returns a boolean if a field has been set.
func (o *ApiEventView) HasDatabase() bool {
	if o != nil && !isNil(o.Database) {
		return true
	}

	return false
}

// SetDatabase gets a reference to the given string and assigns it to the Database field.
func (o *ApiEventView) SetDatabase(v string) {
	o.Database = &v
}

// GetEndpointId returns the EndpointId field value if set, zero value otherwise.
func (o *ApiEventView) GetEndpointId() string {
	if o == nil || isNil(o.EndpointId) {
		var ret string
		return ret
	}
	return *o.EndpointId
}

// GetEndpointIdOk returns a tuple with the EndpointId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiEventView) GetEndpointIdOk() (*string, bool) {
	if o == nil || isNil(o.EndpointId) {
    return nil, false
	}
	return o.EndpointId, true
}

// HasEndpointId returns a boolean if a field has been set.
func (o *ApiEventView) HasEndpointId() bool {
	if o != nil && !isNil(o.EndpointId) {
		return true
	}

	return false
}

// SetEndpointId gets a reference to the given string and assigns it to the EndpointId field.
func (o *ApiEventView) SetEndpointId(v string) {
	o.EndpointId = &v
}

// GetEventTypeName returns the EventTypeName field value if set, zero value otherwise.
func (o *ApiEventView) GetEventTypeName() string {
	if o == nil || isNil(o.EventTypeName) {
		var ret string
		return ret
	}
	return *o.EventTypeName
}

// GetEventTypeNameOk returns a tuple with the EventTypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiEventView) GetEventTypeNameOk() (*string, bool) {
	if o == nil || isNil(o.EventTypeName) {
    return nil, false
	}
	return o.EventTypeName, true
}

// HasEventTypeName returns a boolean if a field has been set.
func (o *ApiEventView) HasEventTypeName() bool {
	if o != nil && !isNil(o.EventTypeName) {
		return true
	}

	return false
}

// SetEventTypeName gets a reference to the given string and assigns it to the EventTypeName field.
func (o *ApiEventView) SetEventTypeName(v string) {
	o.EventTypeName = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *ApiEventView) GetGroupId() string {
	if o == nil || isNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiEventView) GetGroupIdOk() (*string, bool) {
	if o == nil || isNil(o.GroupId) {
    return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *ApiEventView) HasGroupId() bool {
	if o != nil && !isNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *ApiEventView) SetGroupId(v string) {
	o.GroupId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApiEventView) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiEventView) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApiEventView) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ApiEventView) SetId(v string) {
	o.Id = &v
}

// GetInvoiceId returns the InvoiceId field value if set, zero value otherwise.
func (o *ApiEventView) GetInvoiceId() string {
	if o == nil || isNil(o.InvoiceId) {
		var ret string
		return ret
	}
	return *o.InvoiceId
}

// GetInvoiceIdOk returns a tuple with the InvoiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiEventView) GetInvoiceIdOk() (*string, bool) {
	if o == nil || isNil(o.InvoiceId) {
    return nil, false
	}
	return o.InvoiceId, true
}

// HasInvoiceId returns a boolean if a field has been set.
func (o *ApiEventView) HasInvoiceId() bool {
	if o != nil && !isNil(o.InvoiceId) {
		return true
	}

	return false
}

// SetInvoiceId gets a reference to the given string and assigns it to the InvoiceId field.
func (o *ApiEventView) SetInvoiceId(v string) {
	o.InvoiceId = &v
}

// GetIsGlobalAdmin returns the IsGlobalAdmin field value if set, zero value otherwise.
func (o *ApiEventView) GetIsGlobalAdmin() bool {
	if o == nil || isNil(o.IsGlobalAdmin) {
		var ret bool
		return ret
	}
	return *o.IsGlobalAdmin
}

// GetIsGlobalAdminOk returns a tuple with the IsGlobalAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiEventView) GetIsGlobalAdminOk() (*bool, bool) {
	if o == nil || isNil(o.IsGlobalAdmin) {
    return nil, false
	}
	return o.IsGlobalAdmin, true
}

// HasIsGlobalAdmin returns a boolean if a field has been set.
func (o *ApiEventView) HasIsGlobalAdmin() bool {
	if o != nil && !isNil(o.IsGlobalAdmin) {
		return true
	}

	return false
}

// SetIsGlobalAdmin gets a reference to the given bool and assigns it to the IsGlobalAdmin field.
func (o *ApiEventView) SetIsGlobalAdmin(v bool) {
	o.IsGlobalAdmin = &v
}

// GetLinks returns the Links field value
func (o *ApiEventView) GetLinks() []Link {
	if o == nil {
		var ret []Link
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *ApiEventView) GetLinksOk() ([]Link, bool) {
	if o == nil {
    return nil, false
	}
	return o.Links, true
}

// SetLinks sets field value
func (o *ApiEventView) SetLinks(v []Link) {
	o.Links = v
}

// GetMetricName returns the MetricName field value if set, zero value otherwise.
func (o *ApiEventView) GetMetricName() string {
	if o == nil || isNil(o.MetricName) {
		var ret string
		return ret
	}
	return *o.MetricName
}

// GetMetricNameOk returns a tuple with the MetricName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiEventView) GetMetricNameOk() (*string, bool) {
	if o == nil || isNil(o.MetricName) {
    return nil, false
	}
	return o.MetricName, true
}

// HasMetricName returns a boolean if a field has been set.
func (o *ApiEventView) HasMetricName() bool {
	if o != nil && !isNil(o.MetricName) {
		return true
	}

	return false
}

// SetMetricName gets a reference to the given string and assigns it to the MetricName field.
func (o *ApiEventView) SetMetricName(v string) {
	o.MetricName = &v
}

// GetOpType returns the OpType field value if set, zero value otherwise.
func (o *ApiEventView) GetOpType() string {
	if o == nil || isNil(o.OpType) {
		var ret string
		return ret
	}
	return *o.OpType
}

// GetOpTypeOk returns a tuple with the OpType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiEventView) GetOpTypeOk() (*string, bool) {
	if o == nil || isNil(o.OpType) {
    return nil, false
	}
	return o.OpType, true
}

// HasOpType returns a boolean if a field has been set.
func (o *ApiEventView) HasOpType() bool {
	if o != nil && !isNil(o.OpType) {
		return true
	}

	return false
}

// SetOpType gets a reference to the given string and assigns it to the OpType field.
func (o *ApiEventView) SetOpType(v string) {
	o.OpType = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *ApiEventView) GetOrgId() string {
	if o == nil || isNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiEventView) GetOrgIdOk() (*string, bool) {
	if o == nil || isNil(o.OrgId) {
    return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *ApiEventView) HasOrgId() bool {
	if o != nil && !isNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *ApiEventView) SetOrgId(v string) {
	o.OrgId = &v
}

// GetPaymentId returns the PaymentId field value if set, zero value otherwise.
func (o *ApiEventView) GetPaymentId() string {
	if o == nil || isNil(o.PaymentId) {
		var ret string
		return ret
	}
	return *o.PaymentId
}

// GetPaymentIdOk returns a tuple with the PaymentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiEventView) GetPaymentIdOk() (*string, bool) {
	if o == nil || isNil(o.PaymentId) {
    return nil, false
	}
	return o.PaymentId, true
}

// HasPaymentId returns a boolean if a field has been set.
func (o *ApiEventView) HasPaymentId() bool {
	if o != nil && !isNil(o.PaymentId) {
		return true
	}

	return false
}

// SetPaymentId gets a reference to the given string and assigns it to the PaymentId field.
func (o *ApiEventView) SetPaymentId(v string) {
	o.PaymentId = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *ApiEventView) GetPort() int32 {
	if o == nil || isNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiEventView) GetPortOk() (*int32, bool) {
	if o == nil || isNil(o.Port) {
    return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *ApiEventView) HasPort() bool {
	if o != nil && !isNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *ApiEventView) SetPort(v int32) {
	o.Port = &v
}

// GetProviderEndpointId returns the ProviderEndpointId field value if set, zero value otherwise.
func (o *ApiEventView) GetProviderEndpointId() string {
	if o == nil || isNil(o.ProviderEndpointId) {
		var ret string
		return ret
	}
	return *o.ProviderEndpointId
}

// GetProviderEndpointIdOk returns a tuple with the ProviderEndpointId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiEventView) GetProviderEndpointIdOk() (*string, bool) {
	if o == nil || isNil(o.ProviderEndpointId) {
    return nil, false
	}
	return o.ProviderEndpointId, true
}

// HasProviderEndpointId returns a boolean if a field has been set.
func (o *ApiEventView) HasProviderEndpointId() bool {
	if o != nil && !isNil(o.ProviderEndpointId) {
		return true
	}

	return false
}

// SetProviderEndpointId gets a reference to the given string and assigns it to the ProviderEndpointId field.
func (o *ApiEventView) SetProviderEndpointId(v string) {
	o.ProviderEndpointId = &v
}

// GetPublicKey returns the PublicKey field value if set, zero value otherwise.
func (o *ApiEventView) GetPublicKey() string {
	if o == nil || isNil(o.PublicKey) {
		var ret string
		return ret
	}
	return *o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiEventView) GetPublicKeyOk() (*string, bool) {
	if o == nil || isNil(o.PublicKey) {
    return nil, false
	}
	return o.PublicKey, true
}

// HasPublicKey returns a boolean if a field has been set.
func (o *ApiEventView) HasPublicKey() bool {
	if o != nil && !isNil(o.PublicKey) {
		return true
	}

	return false
}

// SetPublicKey gets a reference to the given string and assigns it to the PublicKey field.
func (o *ApiEventView) SetPublicKey(v string) {
	o.PublicKey = &v
}

// GetRaw returns the Raw field value if set, zero value otherwise.
func (o *ApiEventView) GetRaw() string {
	if o == nil || isNil(o.Raw) {
		var ret string
		return ret
	}
	return *o.Raw
}

// GetRawOk returns a tuple with the Raw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiEventView) GetRawOk() (*string, bool) {
	if o == nil || isNil(o.Raw) {
    return nil, false
	}
	return o.Raw, true
}

// HasRaw returns a boolean if a field has been set.
func (o *ApiEventView) HasRaw() bool {
	if o != nil && !isNil(o.Raw) {
		return true
	}

	return false
}

// SetRaw gets a reference to the given string and assigns it to the Raw field.
func (o *ApiEventView) SetRaw(v string) {
	o.Raw = &v
}

// GetRemoteAddress returns the RemoteAddress field value if set, zero value otherwise.
func (o *ApiEventView) GetRemoteAddress() string {
	if o == nil || isNil(o.RemoteAddress) {
		var ret string
		return ret
	}
	return *o.RemoteAddress
}

// GetRemoteAddressOk returns a tuple with the RemoteAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiEventView) GetRemoteAddressOk() (*string, bool) {
	if o == nil || isNil(o.RemoteAddress) {
    return nil, false
	}
	return o.RemoteAddress, true
}

// HasRemoteAddress returns a boolean if a field has been set.
func (o *ApiEventView) HasRemoteAddress() bool {
	if o != nil && !isNil(o.RemoteAddress) {
		return true
	}

	return false
}

// SetRemoteAddress gets a reference to the given string and assigns it to the RemoteAddress field.
func (o *ApiEventView) SetRemoteAddress(v string) {
	o.RemoteAddress = &v
}

// GetReplicaSetName returns the ReplicaSetName field value if set, zero value otherwise.
func (o *ApiEventView) GetReplicaSetName() string {
	if o == nil || isNil(o.ReplicaSetName) {
		var ret string
		return ret
	}
	return *o.ReplicaSetName
}

// GetReplicaSetNameOk returns a tuple with the ReplicaSetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiEventView) GetReplicaSetNameOk() (*string, bool) {
	if o == nil || isNil(o.ReplicaSetName) {
    return nil, false
	}
	return o.ReplicaSetName, true
}

// HasReplicaSetName returns a boolean if a field has been set.
func (o *ApiEventView) HasReplicaSetName() bool {
	if o != nil && !isNil(o.ReplicaSetName) {
		return true
	}

	return false
}

// SetReplicaSetName gets a reference to the given string and assigns it to the ReplicaSetName field.
func (o *ApiEventView) SetReplicaSetName(v string) {
	o.ReplicaSetName = &v
}

// GetShardName returns the ShardName field value if set, zero value otherwise.
func (o *ApiEventView) GetShardName() string {
	if o == nil || isNil(o.ShardName) {
		var ret string
		return ret
	}
	return *o.ShardName
}

// GetShardNameOk returns a tuple with the ShardName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiEventView) GetShardNameOk() (*string, bool) {
	if o == nil || isNil(o.ShardName) {
    return nil, false
	}
	return o.ShardName, true
}

// HasShardName returns a boolean if a field has been set.
func (o *ApiEventView) HasShardName() bool {
	if o != nil && !isNil(o.ShardName) {
		return true
	}

	return false
}

// SetShardName gets a reference to the given string and assigns it to the ShardName field.
func (o *ApiEventView) SetShardName(v string) {
	o.ShardName = &v
}

// GetTargetPublicKey returns the TargetPublicKey field value if set, zero value otherwise.
func (o *ApiEventView) GetTargetPublicKey() string {
	if o == nil || isNil(o.TargetPublicKey) {
		var ret string
		return ret
	}
	return *o.TargetPublicKey
}

// GetTargetPublicKeyOk returns a tuple with the TargetPublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiEventView) GetTargetPublicKeyOk() (*string, bool) {
	if o == nil || isNil(o.TargetPublicKey) {
    return nil, false
	}
	return o.TargetPublicKey, true
}

// HasTargetPublicKey returns a boolean if a field has been set.
func (o *ApiEventView) HasTargetPublicKey() bool {
	if o != nil && !isNil(o.TargetPublicKey) {
		return true
	}

	return false
}

// SetTargetPublicKey gets a reference to the given string and assigns it to the TargetPublicKey field.
func (o *ApiEventView) SetTargetPublicKey(v string) {
	o.TargetPublicKey = &v
}

// GetTargetUsername returns the TargetUsername field value if set, zero value otherwise.
func (o *ApiEventView) GetTargetUsername() string {
	if o == nil || isNil(o.TargetUsername) {
		var ret string
		return ret
	}
	return *o.TargetUsername
}

// GetTargetUsernameOk returns a tuple with the TargetUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiEventView) GetTargetUsernameOk() (*string, bool) {
	if o == nil || isNil(o.TargetUsername) {
    return nil, false
	}
	return o.TargetUsername, true
}

// HasTargetUsername returns a boolean if a field has been set.
func (o *ApiEventView) HasTargetUsername() bool {
	if o != nil && !isNil(o.TargetUsername) {
		return true
	}

	return false
}

// SetTargetUsername gets a reference to the given string and assigns it to the TargetUsername field.
func (o *ApiEventView) SetTargetUsername(v string) {
	o.TargetUsername = &v
}

// GetTeamId returns the TeamId field value if set, zero value otherwise.
func (o *ApiEventView) GetTeamId() string {
	if o == nil || isNil(o.TeamId) {
		var ret string
		return ret
	}
	return *o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiEventView) GetTeamIdOk() (*string, bool) {
	if o == nil || isNil(o.TeamId) {
    return nil, false
	}
	return o.TeamId, true
}

// HasTeamId returns a boolean if a field has been set.
func (o *ApiEventView) HasTeamId() bool {
	if o != nil && !isNil(o.TeamId) {
		return true
	}

	return false
}

// SetTeamId gets a reference to the given string and assigns it to the TeamId field.
func (o *ApiEventView) SetTeamId(v string) {
	o.TeamId = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *ApiEventView) GetUserId() string {
	if o == nil || isNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiEventView) GetUserIdOk() (*string, bool) {
	if o == nil || isNil(o.UserId) {
    return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *ApiEventView) HasUserId() bool {
	if o != nil && !isNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *ApiEventView) SetUserId(v string) {
	o.UserId = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *ApiEventView) GetUsername() string {
	if o == nil || isNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiEventView) GetUsernameOk() (*string, bool) {
	if o == nil || isNil(o.Username) {
    return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *ApiEventView) HasUsername() bool {
	if o != nil && !isNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *ApiEventView) SetUsername(v string) {
	o.Username = &v
}

// GetWhitelistEntry returns the WhitelistEntry field value if set, zero value otherwise.
func (o *ApiEventView) GetWhitelistEntry() string {
	if o == nil || isNil(o.WhitelistEntry) {
		var ret string
		return ret
	}
	return *o.WhitelistEntry
}

// GetWhitelistEntryOk returns a tuple with the WhitelistEntry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiEventView) GetWhitelistEntryOk() (*string, bool) {
	if o == nil || isNil(o.WhitelistEntry) {
    return nil, false
	}
	return o.WhitelistEntry, true
}

// HasWhitelistEntry returns a boolean if a field has been set.
func (o *ApiEventView) HasWhitelistEntry() bool {
	if o != nil && !isNil(o.WhitelistEntry) {
		return true
	}

	return false
}

// SetWhitelistEntry gets a reference to the given string and assigns it to the WhitelistEntry field.
func (o *ApiEventView) SetWhitelistEntry(v string) {
	o.WhitelistEntry = &v
}

func (o ApiEventView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AlertConfigId) {
		toSerialize["alertConfigId"] = o.AlertConfigId
	}
	if !isNil(o.AlertId) {
		toSerialize["alertId"] = o.AlertId
	}
	if !isNil(o.ApiKeyId) {
		toSerialize["apiKeyId"] = o.ApiKeyId
	}
	if !isNil(o.Collection) {
		toSerialize["collection"] = o.Collection
	}
	if !isNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !isNil(o.CurrentValue) {
		toSerialize["currentValue"] = o.CurrentValue
	}
	if !isNil(o.Database) {
		toSerialize["database"] = o.Database
	}
	if !isNil(o.EndpointId) {
		toSerialize["endpointId"] = o.EndpointId
	}
	if !isNil(o.EventTypeName) {
		toSerialize["eventTypeName"] = o.EventTypeName
	}
	if !isNil(o.GroupId) {
		toSerialize["groupId"] = o.GroupId
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.InvoiceId) {
		toSerialize["invoiceId"] = o.InvoiceId
	}
	if !isNil(o.IsGlobalAdmin) {
		toSerialize["isGlobalAdmin"] = o.IsGlobalAdmin
	}
	if true {
		toSerialize["links"] = o.Links
	}
	if !isNil(o.MetricName) {
		toSerialize["metricName"] = o.MetricName
	}
	if !isNil(o.OpType) {
		toSerialize["opType"] = o.OpType
	}
	if !isNil(o.OrgId) {
		toSerialize["orgId"] = o.OrgId
	}
	if !isNil(o.PaymentId) {
		toSerialize["paymentId"] = o.PaymentId
	}
	if !isNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !isNil(o.ProviderEndpointId) {
		toSerialize["providerEndpointId"] = o.ProviderEndpointId
	}
	if !isNil(o.PublicKey) {
		toSerialize["publicKey"] = o.PublicKey
	}
	if !isNil(o.Raw) {
		toSerialize["raw"] = o.Raw
	}
	if !isNil(o.RemoteAddress) {
		toSerialize["remoteAddress"] = o.RemoteAddress
	}
	if !isNil(o.ReplicaSetName) {
		toSerialize["replicaSetName"] = o.ReplicaSetName
	}
	if !isNil(o.ShardName) {
		toSerialize["shardName"] = o.ShardName
	}
	if !isNil(o.TargetPublicKey) {
		toSerialize["targetPublicKey"] = o.TargetPublicKey
	}
	if !isNil(o.TargetUsername) {
		toSerialize["targetUsername"] = o.TargetUsername
	}
	if !isNil(o.TeamId) {
		toSerialize["teamId"] = o.TeamId
	}
	if !isNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !isNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !isNil(o.WhitelistEntry) {
		toSerialize["whitelistEntry"] = o.WhitelistEntry
	}
	return json.Marshal(toSerialize)
}

type NullableApiEventView struct {
	value *ApiEventView
	isSet bool
}

func (v NullableApiEventView) Get() *ApiEventView {
	return v.value
}

func (v *NullableApiEventView) Set(val *ApiEventView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiEventView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiEventView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiEventView(val *ApiEventView) *NullableApiEventView {
	return &NullableApiEventView{value: val, isSet: true}
}

func (v NullableApiEventView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiEventView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


