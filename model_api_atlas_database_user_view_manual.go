/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ApiAtlasDatabaseUserViewManual - Authentication method that this MongoDB Database user applies.
type ApiAtlasDatabaseUserViewManual struct {
	ApiDatabaseUserIAMView *ApiDatabaseUserIAMView
	ApiDatabaseUserLDAPView *ApiDatabaseUserLDAPView
	ApiDatabaseUserSCRAMView *ApiDatabaseUserSCRAMView
	ApiDatabaseUserX509View *ApiDatabaseUserX509View
}

// ApiDatabaseUserIAMViewAsApiAtlasDatabaseUserViewManual is a convenience function that returns ApiDatabaseUserIAMView wrapped in ApiAtlasDatabaseUserViewManual
func ApiDatabaseUserIAMViewAsApiAtlasDatabaseUserViewManual(v *ApiDatabaseUserIAMView) ApiAtlasDatabaseUserViewManual {
	return ApiAtlasDatabaseUserViewManual{
		ApiDatabaseUserIAMView: v,
	}
}

// ApiDatabaseUserLDAPViewAsApiAtlasDatabaseUserViewManual is a convenience function that returns ApiDatabaseUserLDAPView wrapped in ApiAtlasDatabaseUserViewManual
func ApiDatabaseUserLDAPViewAsApiAtlasDatabaseUserViewManual(v *ApiDatabaseUserLDAPView) ApiAtlasDatabaseUserViewManual {
	return ApiAtlasDatabaseUserViewManual{
		ApiDatabaseUserLDAPView: v,
	}
}

// ApiDatabaseUserSCRAMViewAsApiAtlasDatabaseUserViewManual is a convenience function that returns ApiDatabaseUserSCRAMView wrapped in ApiAtlasDatabaseUserViewManual
func ApiDatabaseUserSCRAMViewAsApiAtlasDatabaseUserViewManual(v *ApiDatabaseUserSCRAMView) ApiAtlasDatabaseUserViewManual {
	return ApiAtlasDatabaseUserViewManual{
		ApiDatabaseUserSCRAMView: v,
	}
}

// ApiDatabaseUserX509ViewAsApiAtlasDatabaseUserViewManual is a convenience function that returns ApiDatabaseUserX509View wrapped in ApiAtlasDatabaseUserViewManual
func ApiDatabaseUserX509ViewAsApiAtlasDatabaseUserViewManual(v *ApiDatabaseUserX509View) ApiAtlasDatabaseUserViewManual {
	return ApiAtlasDatabaseUserViewManual{
		ApiDatabaseUserX509View: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ApiAtlasDatabaseUserViewManual) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ApiDatabaseUserIAMView
	err = newStrictDecoder(data).Decode(&dst.ApiDatabaseUserIAMView)
	if err == nil {
		jsonApiDatabaseUserIAMView, _ := json.Marshal(dst.ApiDatabaseUserIAMView)
		if string(jsonApiDatabaseUserIAMView) == "{}" { // empty struct
			dst.ApiDatabaseUserIAMView = nil
		} else {
			match++
		}
	} else {
		dst.ApiDatabaseUserIAMView = nil
	}

	// try to unmarshal data into ApiDatabaseUserLDAPView
	err = newStrictDecoder(data).Decode(&dst.ApiDatabaseUserLDAPView)
	if err == nil {
		jsonApiDatabaseUserLDAPView, _ := json.Marshal(dst.ApiDatabaseUserLDAPView)
		if string(jsonApiDatabaseUserLDAPView) == "{}" { // empty struct
			dst.ApiDatabaseUserLDAPView = nil
		} else {
			match++
		}
	} else {
		dst.ApiDatabaseUserLDAPView = nil
	}

	// try to unmarshal data into ApiDatabaseUserSCRAMView
	err = newStrictDecoder(data).Decode(&dst.ApiDatabaseUserSCRAMView)
	if err == nil {
		jsonApiDatabaseUserSCRAMView, _ := json.Marshal(dst.ApiDatabaseUserSCRAMView)
		if string(jsonApiDatabaseUserSCRAMView) == "{}" { // empty struct
			dst.ApiDatabaseUserSCRAMView = nil
		} else {
			match++
		}
	} else {
		dst.ApiDatabaseUserSCRAMView = nil
	}

	// try to unmarshal data into ApiDatabaseUserX509View
	err = newStrictDecoder(data).Decode(&dst.ApiDatabaseUserX509View)
	if err == nil {
		jsonApiDatabaseUserX509View, _ := json.Marshal(dst.ApiDatabaseUserX509View)
		if string(jsonApiDatabaseUserX509View) == "{}" { // empty struct
			dst.ApiDatabaseUserX509View = nil
		} else {
			match++
		}
	} else {
		dst.ApiDatabaseUserX509View = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ApiDatabaseUserIAMView = nil
		dst.ApiDatabaseUserLDAPView = nil
		dst.ApiDatabaseUserSCRAMView = nil
		dst.ApiDatabaseUserX509View = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ApiAtlasDatabaseUserViewManual)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ApiAtlasDatabaseUserViewManual)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ApiAtlasDatabaseUserViewManual) MarshalJSON() ([]byte, error) {
	if src.ApiDatabaseUserIAMView != nil {
		return json.Marshal(&src.ApiDatabaseUserIAMView)
	}

	if src.ApiDatabaseUserLDAPView != nil {
		return json.Marshal(&src.ApiDatabaseUserLDAPView)
	}

	if src.ApiDatabaseUserSCRAMView != nil {
		return json.Marshal(&src.ApiDatabaseUserSCRAMView)
	}

	if src.ApiDatabaseUserX509View != nil {
		return json.Marshal(&src.ApiDatabaseUserX509View)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ApiAtlasDatabaseUserViewManual) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ApiDatabaseUserIAMView != nil {
		return obj.ApiDatabaseUserIAMView
	}

	if obj.ApiDatabaseUserLDAPView != nil {
		return obj.ApiDatabaseUserLDAPView
	}

	if obj.ApiDatabaseUserSCRAMView != nil {
		return obj.ApiDatabaseUserSCRAMView
	}

	if obj.ApiDatabaseUserX509View != nil {
		return obj.ApiDatabaseUserX509View
	}

	// all schemas are nil
	return nil
}

type NullableApiAtlasDatabaseUserViewManual struct {
	value *ApiAtlasDatabaseUserViewManual
	isSet bool
}

func (v NullableApiAtlasDatabaseUserViewManual) Get() *ApiAtlasDatabaseUserViewManual {
	return v.value
}

func (v *NullableApiAtlasDatabaseUserViewManual) Set(val *ApiAtlasDatabaseUserViewManual) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasDatabaseUserViewManual) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasDatabaseUserViewManual) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasDatabaseUserViewManual(val *ApiAtlasDatabaseUserViewManual) *NullableApiAtlasDatabaseUserViewManual {
	return &NullableApiAtlasDatabaseUserViewManual{value: val, isSet: true}
}

func (v NullableApiAtlasDatabaseUserViewManual) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasDatabaseUserViewManual) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


