/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ServerlessInstanceConnectionStrings Collection of Uniform Resource Locators that point to the MongoDB database.
type ServerlessInstanceConnectionStrings struct {
	// List of private endpoint connection strings that you can use to connect to this serverless instance through a private endpoint. This parameter returns only if you created a private endpoint for this serverless instance and it is AVAILABLE.
	PrivateEndpoint []ServerlessInstancePrivateEndpoint `json:"privateEndpoint,omitempty"`
	// Public connection string that you can use to connect to this serverless instance. This connection string uses the `mongodb+srv://` protocol.
	StandardSrv string `json:"standardSrv"`
}

// NewServerlessInstanceConnectionStrings instantiates a new ServerlessInstanceConnectionStrings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerlessInstanceConnectionStrings(standardSrv string) *ServerlessInstanceConnectionStrings {
	this := ServerlessInstanceConnectionStrings{}
	this.StandardSrv = standardSrv
	return &this
}

// NewServerlessInstanceConnectionStringsWithDefaults instantiates a new ServerlessInstanceConnectionStrings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerlessInstanceConnectionStringsWithDefaults() *ServerlessInstanceConnectionStrings {
	this := ServerlessInstanceConnectionStrings{}
	return &this
}

// GetPrivateEndpoint returns the PrivateEndpoint field value if set, zero value otherwise.
func (o *ServerlessInstanceConnectionStrings) GetPrivateEndpoint() []ServerlessInstancePrivateEndpoint {
	if o == nil || isNil(o.PrivateEndpoint) {
		var ret []ServerlessInstancePrivateEndpoint
		return ret
	}
	return o.PrivateEndpoint
}

// GetPrivateEndpointOk returns a tuple with the PrivateEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerlessInstanceConnectionStrings) GetPrivateEndpointOk() ([]ServerlessInstancePrivateEndpoint, bool) {
	if o == nil || isNil(o.PrivateEndpoint) {
    return nil, false
	}
	return o.PrivateEndpoint, true
}

// HasPrivateEndpoint returns a boolean if a field has been set.
func (o *ServerlessInstanceConnectionStrings) HasPrivateEndpoint() bool {
	if o != nil && !isNil(o.PrivateEndpoint) {
		return true
	}

	return false
}

// SetPrivateEndpoint gets a reference to the given []ServerlessInstancePrivateEndpoint and assigns it to the PrivateEndpoint field.
func (o *ServerlessInstanceConnectionStrings) SetPrivateEndpoint(v []ServerlessInstancePrivateEndpoint) {
	o.PrivateEndpoint = v
}

// GetStandardSrv returns the StandardSrv field value
func (o *ServerlessInstanceConnectionStrings) GetStandardSrv() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StandardSrv
}

// GetStandardSrvOk returns a tuple with the StandardSrv field value
// and a boolean to check if the value has been set.
func (o *ServerlessInstanceConnectionStrings) GetStandardSrvOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.StandardSrv, true
}

// SetStandardSrv sets field value
func (o *ServerlessInstanceConnectionStrings) SetStandardSrv(v string) {
	o.StandardSrv = v
}

func (o ServerlessInstanceConnectionStrings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.PrivateEndpoint) {
		toSerialize["privateEndpoint"] = o.PrivateEndpoint
	}
	if true {
		toSerialize["standardSrv"] = o.StandardSrv
	}
	return json.Marshal(toSerialize)
}

type NullableServerlessInstanceConnectionStrings struct {
	value *ServerlessInstanceConnectionStrings
	isSet bool
}

func (v NullableServerlessInstanceConnectionStrings) Get() *ServerlessInstanceConnectionStrings {
	return v.value
}

func (v *NullableServerlessInstanceConnectionStrings) Set(val *ServerlessInstanceConnectionStrings) {
	v.value = val
	v.isSet = true
}

func (v NullableServerlessInstanceConnectionStrings) IsSet() bool {
	return v.isSet
}

func (v *NullableServerlessInstanceConnectionStrings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerlessInstanceConnectionStrings(val *ServerlessInstanceConnectionStrings) *NullableServerlessInstanceConnectionStrings {
	return &NullableServerlessInstanceConnectionStrings{value: val, isSet: true}
}

func (v NullableServerlessInstanceConnectionStrings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerlessInstanceConnectionStrings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


