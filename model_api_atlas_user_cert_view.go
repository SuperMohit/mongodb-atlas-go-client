/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// ApiAtlasUserCertView struct for ApiAtlasUserCertView
type ApiAtlasUserCertView struct {
	// Unique 24-hexadecimal character string that identifies this certificate.
	Id *int64 `json:"_id,omitempty"`
	// Date and time when MongoDB Cloud created this certificate. This parameter expresses its value in the ISO 8601 timestamp format in UTC.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// Unique 24-hexadecimal character string that identifies the project.
	GroupId *string `json:"groupId,omitempty"`
	// List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.
	Links []Link `json:"links"`
	// Number of months that the certificate remains valid until it expires.
	MonthsUntilExpiration *int32 `json:"monthsUntilExpiration,omitempty"`
	// Date and time when this certificate expires. This parameter expresses its value in the ISO 8601 timestamp format in UTC.
	NotAfter *time.Time `json:"notAfter,omitempty"`
	// Subject Alternative Name associated with this certificate. This parameter expresses its value as a distinguished name as defined in [RFC 2253](https://tools.ietf.org/html/2253).
	Subject *string `json:"subject,omitempty"`
}

// NewApiAtlasUserCertView instantiates a new ApiAtlasUserCertView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAtlasUserCertView(links []Link) *ApiAtlasUserCertView {
	this := ApiAtlasUserCertView{}
	this.Links = links
	var monthsUntilExpiration int32 = 3
	this.MonthsUntilExpiration = &monthsUntilExpiration
	return &this
}

// NewApiAtlasUserCertViewWithDefaults instantiates a new ApiAtlasUserCertView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAtlasUserCertViewWithDefaults() *ApiAtlasUserCertView {
	this := ApiAtlasUserCertView{}
	var monthsUntilExpiration int32 = 3
	this.MonthsUntilExpiration = &monthsUntilExpiration
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApiAtlasUserCertView) GetId() int64 {
	if o == nil || isNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasUserCertView) GetIdOk() (*int64, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApiAtlasUserCertView) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *ApiAtlasUserCertView) SetId(v int64) {
	o.Id = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ApiAtlasUserCertView) GetCreatedAt() time.Time {
	if o == nil || isNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasUserCertView) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.CreatedAt) {
    return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ApiAtlasUserCertView) HasCreatedAt() bool {
	if o != nil && !isNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ApiAtlasUserCertView) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *ApiAtlasUserCertView) GetGroupId() string {
	if o == nil || isNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasUserCertView) GetGroupIdOk() (*string, bool) {
	if o == nil || isNil(o.GroupId) {
    return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *ApiAtlasUserCertView) HasGroupId() bool {
	if o != nil && !isNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *ApiAtlasUserCertView) SetGroupId(v string) {
	o.GroupId = &v
}

// GetLinks returns the Links field value
func (o *ApiAtlasUserCertView) GetLinks() []Link {
	if o == nil {
		var ret []Link
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *ApiAtlasUserCertView) GetLinksOk() ([]Link, bool) {
	if o == nil {
    return nil, false
	}
	return o.Links, true
}

// SetLinks sets field value
func (o *ApiAtlasUserCertView) SetLinks(v []Link) {
	o.Links = v
}

// GetMonthsUntilExpiration returns the MonthsUntilExpiration field value if set, zero value otherwise.
func (o *ApiAtlasUserCertView) GetMonthsUntilExpiration() int32 {
	if o == nil || isNil(o.MonthsUntilExpiration) {
		var ret int32
		return ret
	}
	return *o.MonthsUntilExpiration
}

// GetMonthsUntilExpirationOk returns a tuple with the MonthsUntilExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasUserCertView) GetMonthsUntilExpirationOk() (*int32, bool) {
	if o == nil || isNil(o.MonthsUntilExpiration) {
    return nil, false
	}
	return o.MonthsUntilExpiration, true
}

// HasMonthsUntilExpiration returns a boolean if a field has been set.
func (o *ApiAtlasUserCertView) HasMonthsUntilExpiration() bool {
	if o != nil && !isNil(o.MonthsUntilExpiration) {
		return true
	}

	return false
}

// SetMonthsUntilExpiration gets a reference to the given int32 and assigns it to the MonthsUntilExpiration field.
func (o *ApiAtlasUserCertView) SetMonthsUntilExpiration(v int32) {
	o.MonthsUntilExpiration = &v
}

// GetNotAfter returns the NotAfter field value if set, zero value otherwise.
func (o *ApiAtlasUserCertView) GetNotAfter() time.Time {
	if o == nil || isNil(o.NotAfter) {
		var ret time.Time
		return ret
	}
	return *o.NotAfter
}

// GetNotAfterOk returns a tuple with the NotAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasUserCertView) GetNotAfterOk() (*time.Time, bool) {
	if o == nil || isNil(o.NotAfter) {
    return nil, false
	}
	return o.NotAfter, true
}

// HasNotAfter returns a boolean if a field has been set.
func (o *ApiAtlasUserCertView) HasNotAfter() bool {
	if o != nil && !isNil(o.NotAfter) {
		return true
	}

	return false
}

// SetNotAfter gets a reference to the given time.Time and assigns it to the NotAfter field.
func (o *ApiAtlasUserCertView) SetNotAfter(v time.Time) {
	o.NotAfter = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *ApiAtlasUserCertView) GetSubject() string {
	if o == nil || isNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasUserCertView) GetSubjectOk() (*string, bool) {
	if o == nil || isNil(o.Subject) {
    return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *ApiAtlasUserCertView) HasSubject() bool {
	if o != nil && !isNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *ApiAtlasUserCertView) SetSubject(v string) {
	o.Subject = &v
}

func (o ApiAtlasUserCertView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["_id"] = o.Id
	}
	if !isNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !isNil(o.GroupId) {
		toSerialize["groupId"] = o.GroupId
	}
	if true {
		toSerialize["links"] = o.Links
	}
	if !isNil(o.MonthsUntilExpiration) {
		toSerialize["monthsUntilExpiration"] = o.MonthsUntilExpiration
	}
	if !isNil(o.NotAfter) {
		toSerialize["notAfter"] = o.NotAfter
	}
	if !isNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	return json.Marshal(toSerialize)
}

type NullableApiAtlasUserCertView struct {
	value *ApiAtlasUserCertView
	isSet bool
}

func (v NullableApiAtlasUserCertView) Get() *ApiAtlasUserCertView {
	return v.value
}

func (v *NullableApiAtlasUserCertView) Set(val *ApiAtlasUserCertView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasUserCertView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasUserCertView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasUserCertView(val *ApiAtlasUserCertView) *NullableApiAtlasUserCertView {
	return &NullableApiAtlasUserCertView{value: val, isSet: true}
}

func (v NullableApiAtlasUserCertView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasUserCertView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


