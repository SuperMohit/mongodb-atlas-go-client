/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiAtlasZoneMappingView Human-readable label that identifies the subset of a global cluster.
type ApiAtlasZoneMappingView struct {
	// Code that represents a location that maps to a zone in your global cluster. MongoDB Cloud represents this location with a ISO 3166-2 location and subdivision codes when possible.
	Location string `json:"location"`
	// Human-readable label that identifies the zone in your global cluster. This zone maps to a location code.
	Zone string `json:"zone"`
}

// NewApiAtlasZoneMappingView instantiates a new ApiAtlasZoneMappingView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAtlasZoneMappingView(location string, zone string) *ApiAtlasZoneMappingView {
	this := ApiAtlasZoneMappingView{}
	this.Location = location
	this.Zone = zone
	return &this
}

// NewApiAtlasZoneMappingViewWithDefaults instantiates a new ApiAtlasZoneMappingView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAtlasZoneMappingViewWithDefaults() *ApiAtlasZoneMappingView {
	this := ApiAtlasZoneMappingView{}
	return &this
}

// GetLocation returns the Location field value
func (o *ApiAtlasZoneMappingView) GetLocation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *ApiAtlasZoneMappingView) GetLocationOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *ApiAtlasZoneMappingView) SetLocation(v string) {
	o.Location = v
}

// GetZone returns the Zone field value
func (o *ApiAtlasZoneMappingView) GetZone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Zone
}

// GetZoneOk returns a tuple with the Zone field value
// and a boolean to check if the value has been set.
func (o *ApiAtlasZoneMappingView) GetZoneOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Zone, true
}

// SetZone sets field value
func (o *ApiAtlasZoneMappingView) SetZone(v string) {
	o.Zone = v
}

func (o ApiAtlasZoneMappingView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["location"] = o.Location
	}
	if true {
		toSerialize["zone"] = o.Zone
	}
	return json.Marshal(toSerialize)
}

type NullableApiAtlasZoneMappingView struct {
	value *ApiAtlasZoneMappingView
	isSet bool
}

func (v NullableApiAtlasZoneMappingView) Get() *ApiAtlasZoneMappingView {
	return v.value
}

func (v *NullableApiAtlasZoneMappingView) Set(val *ApiAtlasZoneMappingView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasZoneMappingView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasZoneMappingView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasZoneMappingView(val *ApiAtlasZoneMappingView) *NullableApiAtlasZoneMappingView {
	return &NullableApiAtlasZoneMappingView{value: val, isSet: true}
}

func (v NullableApiAtlasZoneMappingView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasZoneMappingView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


