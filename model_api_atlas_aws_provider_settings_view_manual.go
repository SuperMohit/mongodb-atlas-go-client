/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiAtlasAWSProviderSettingsViewManual struct for ApiAtlasAWSProviderSettingsViewManual
type ApiAtlasAWSProviderSettingsViewManual struct {
	AutoScaling *ApiAtlasAWSProviderSettingsViewManualAllOfAutoScaling `json:"autoScaling,omitempty"`
	// Maximum Disk Input/Output Operations per Second (IOPS) that the database host can perform.
	DiskIOPS *int32 `json:"diskIOPS,omitempty"`
	// Flag that indicates whether the Amazon Elastic Block Store (EBS) encryption feature encrypts the host's root volume for both data at rest within the volume and for data moving between the volume and the cluster. Clusters always have this setting enabled.
	// Deprecated
	EncryptEBSVolume *bool `json:"encryptEBSVolume,omitempty"`
	// Cluster tier, with a default storage and memory capacity, that applies to all the data-bearing hosts in your cluster.
	InstanceSizeName *string `json:"instanceSizeName,omitempty"`
	// Human-readable label that identifies the geographic location of your MongoDB cluster. The region you choose can affect network latency for clients accessing your databases. For multi-region clusters, see **replicationSpec.region**.
	RegionName *string `json:"regionName,omitempty"`
	// Disk Input/Output Operations per Second (IOPS) setting for Amazon Web Services (AWS) storage that you configure only for abbr title=\"Amazon Web Services\">AWS</abbr>. Specify whether Disk Input/Output Operations per Second (IOPS) must not exceed the default Input/Output Operations per Second (IOPS) rate for the selected volume size (`STANDARD`), or must fall within the allowable Input/Output Operations per Second (IOPS) range for the selected volume size (`PROVISIONED`).
	VolumeType *string `json:"volumeType,omitempty"`
}

// NewApiAtlasAWSProviderSettingsViewManual instantiates a new ApiAtlasAWSProviderSettingsViewManual object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAtlasAWSProviderSettingsViewManual(providerName string) *ApiAtlasAWSProviderSettingsViewManual {
	this := ApiAtlasAWSProviderSettingsViewManual{}
	this.ProviderName = providerName
	var encryptEBSVolume bool = true
	this.EncryptEBSVolume = &encryptEBSVolume
	return &this
}

// NewApiAtlasAWSProviderSettingsViewManualWithDefaults instantiates a new ApiAtlasAWSProviderSettingsViewManual object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAtlasAWSProviderSettingsViewManualWithDefaults() *ApiAtlasAWSProviderSettingsViewManual {
	this := ApiAtlasAWSProviderSettingsViewManual{}
	var encryptEBSVolume bool = true
	this.EncryptEBSVolume = &encryptEBSVolume
	return &this
}

// GetAutoScaling returns the AutoScaling field value if set, zero value otherwise.
func (o *ApiAtlasAWSProviderSettingsViewManual) GetAutoScaling() ApiAtlasAWSProviderSettingsViewManualAllOfAutoScaling {
	if o == nil || isNil(o.AutoScaling) {
		var ret ApiAtlasAWSProviderSettingsViewManualAllOfAutoScaling
		return ret
	}
	return *o.AutoScaling
}

// GetAutoScalingOk returns a tuple with the AutoScaling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasAWSProviderSettingsViewManual) GetAutoScalingOk() (*ApiAtlasAWSProviderSettingsViewManualAllOfAutoScaling, bool) {
	if o == nil || isNil(o.AutoScaling) {
    return nil, false
	}
	return o.AutoScaling, true
}

// HasAutoScaling returns a boolean if a field has been set.
func (o *ApiAtlasAWSProviderSettingsViewManual) HasAutoScaling() bool {
	if o != nil && !isNil(o.AutoScaling) {
		return true
	}

	return false
}

// SetAutoScaling gets a reference to the given ApiAtlasAWSProviderSettingsViewManualAllOfAutoScaling and assigns it to the AutoScaling field.
func (o *ApiAtlasAWSProviderSettingsViewManual) SetAutoScaling(v ApiAtlasAWSProviderSettingsViewManualAllOfAutoScaling) {
	o.AutoScaling = &v
}

// GetDiskIOPS returns the DiskIOPS field value if set, zero value otherwise.
func (o *ApiAtlasAWSProviderSettingsViewManual) GetDiskIOPS() int32 {
	if o == nil || isNil(o.DiskIOPS) {
		var ret int32
		return ret
	}
	return *o.DiskIOPS
}

// GetDiskIOPSOk returns a tuple with the DiskIOPS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasAWSProviderSettingsViewManual) GetDiskIOPSOk() (*int32, bool) {
	if o == nil || isNil(o.DiskIOPS) {
    return nil, false
	}
	return o.DiskIOPS, true
}

// HasDiskIOPS returns a boolean if a field has been set.
func (o *ApiAtlasAWSProviderSettingsViewManual) HasDiskIOPS() bool {
	if o != nil && !isNil(o.DiskIOPS) {
		return true
	}

	return false
}

// SetDiskIOPS gets a reference to the given int32 and assigns it to the DiskIOPS field.
func (o *ApiAtlasAWSProviderSettingsViewManual) SetDiskIOPS(v int32) {
	o.DiskIOPS = &v
}

// GetEncryptEBSVolume returns the EncryptEBSVolume field value if set, zero value otherwise.
// Deprecated
func (o *ApiAtlasAWSProviderSettingsViewManual) GetEncryptEBSVolume() bool {
	if o == nil || isNil(o.EncryptEBSVolume) {
		var ret bool
		return ret
	}
	return *o.EncryptEBSVolume
}

// GetEncryptEBSVolumeOk returns a tuple with the EncryptEBSVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *ApiAtlasAWSProviderSettingsViewManual) GetEncryptEBSVolumeOk() (*bool, bool) {
	if o == nil || isNil(o.EncryptEBSVolume) {
    return nil, false
	}
	return o.EncryptEBSVolume, true
}

// HasEncryptEBSVolume returns a boolean if a field has been set.
func (o *ApiAtlasAWSProviderSettingsViewManual) HasEncryptEBSVolume() bool {
	if o != nil && !isNil(o.EncryptEBSVolume) {
		return true
	}

	return false
}

// SetEncryptEBSVolume gets a reference to the given bool and assigns it to the EncryptEBSVolume field.
// Deprecated
func (o *ApiAtlasAWSProviderSettingsViewManual) SetEncryptEBSVolume(v bool) {
	o.EncryptEBSVolume = &v
}

// GetInstanceSizeName returns the InstanceSizeName field value if set, zero value otherwise.
func (o *ApiAtlasAWSProviderSettingsViewManual) GetInstanceSizeName() string {
	if o == nil || isNil(o.InstanceSizeName) {
		var ret string
		return ret
	}
	return *o.InstanceSizeName
}

// GetInstanceSizeNameOk returns a tuple with the InstanceSizeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasAWSProviderSettingsViewManual) GetInstanceSizeNameOk() (*string, bool) {
	if o == nil || isNil(o.InstanceSizeName) {
    return nil, false
	}
	return o.InstanceSizeName, true
}

// HasInstanceSizeName returns a boolean if a field has been set.
func (o *ApiAtlasAWSProviderSettingsViewManual) HasInstanceSizeName() bool {
	if o != nil && !isNil(o.InstanceSizeName) {
		return true
	}

	return false
}

// SetInstanceSizeName gets a reference to the given string and assigns it to the InstanceSizeName field.
func (o *ApiAtlasAWSProviderSettingsViewManual) SetInstanceSizeName(v string) {
	o.InstanceSizeName = &v
}

// GetRegionName returns the RegionName field value if set, zero value otherwise.
func (o *ApiAtlasAWSProviderSettingsViewManual) GetRegionName() string {
	if o == nil || isNil(o.RegionName) {
		var ret string
		return ret
	}
	return *o.RegionName
}

// GetRegionNameOk returns a tuple with the RegionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasAWSProviderSettingsViewManual) GetRegionNameOk() (*string, bool) {
	if o == nil || isNil(o.RegionName) {
    return nil, false
	}
	return o.RegionName, true
}

// HasRegionName returns a boolean if a field has been set.
func (o *ApiAtlasAWSProviderSettingsViewManual) HasRegionName() bool {
	if o != nil && !isNil(o.RegionName) {
		return true
	}

	return false
}

// SetRegionName gets a reference to the given string and assigns it to the RegionName field.
func (o *ApiAtlasAWSProviderSettingsViewManual) SetRegionName(v string) {
	o.RegionName = &v
}

// GetVolumeType returns the VolumeType field value if set, zero value otherwise.
func (o *ApiAtlasAWSProviderSettingsViewManual) GetVolumeType() string {
	if o == nil || isNil(o.VolumeType) {
		var ret string
		return ret
	}
	return *o.VolumeType
}

// GetVolumeTypeOk returns a tuple with the VolumeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasAWSProviderSettingsViewManual) GetVolumeTypeOk() (*string, bool) {
	if o == nil || isNil(o.VolumeType) {
    return nil, false
	}
	return o.VolumeType, true
}

// HasVolumeType returns a boolean if a field has been set.
func (o *ApiAtlasAWSProviderSettingsViewManual) HasVolumeType() bool {
	if o != nil && !isNil(o.VolumeType) {
		return true
	}

	return false
}

// SetVolumeType gets a reference to the given string and assigns it to the VolumeType field.
func (o *ApiAtlasAWSProviderSettingsViewManual) SetVolumeType(v string) {
	o.VolumeType = &v
}

func (o ApiAtlasAWSProviderSettingsViewManual) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AutoScaling) {
		toSerialize["autoScaling"] = o.AutoScaling
	}
	if !isNil(o.DiskIOPS) {
		toSerialize["diskIOPS"] = o.DiskIOPS
	}
	if !isNil(o.EncryptEBSVolume) {
		toSerialize["encryptEBSVolume"] = o.EncryptEBSVolume
	}
	if !isNil(o.InstanceSizeName) {
		toSerialize["instanceSizeName"] = o.InstanceSizeName
	}
	if !isNil(o.RegionName) {
		toSerialize["regionName"] = o.RegionName
	}
	if !isNil(o.VolumeType) {
		toSerialize["volumeType"] = o.VolumeType
	}
	return json.Marshal(toSerialize)
}

type NullableApiAtlasAWSProviderSettingsViewManual struct {
	value *ApiAtlasAWSProviderSettingsViewManual
	isSet bool
}

func (v NullableApiAtlasAWSProviderSettingsViewManual) Get() *ApiAtlasAWSProviderSettingsViewManual {
	return v.value
}

func (v *NullableApiAtlasAWSProviderSettingsViewManual) Set(val *ApiAtlasAWSProviderSettingsViewManual) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasAWSProviderSettingsViewManual) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasAWSProviderSettingsViewManual) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasAWSProviderSettingsViewManual(val *ApiAtlasAWSProviderSettingsViewManual) *NullableApiAtlasAWSProviderSettingsViewManual {
	return &NullableApiAtlasAWSProviderSettingsViewManual{value: val, isSet: true}
}

func (v NullableApiAtlasAWSProviderSettingsViewManual) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasAWSProviderSettingsViewManual) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


