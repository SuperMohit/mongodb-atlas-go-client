/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiDatabaseUserIAMViewAllOf struct for ApiDatabaseUserIAMViewAllOf
type ApiDatabaseUserIAMViewAllOf struct {
	// Human-readable label that indicates whether the new database user authenticates with the Amazon Web Services (AWS) Identity and Access Management (IAM) credentials associated with the user or the user's role.
	AwsIAMType *string `json:"awsIAMType,omitempty"`
	// Human-readable label that represents the user that authenticates to MongoDB. 
	Username *string `json:"username,omitempty"`
}

// NewApiDatabaseUserIAMViewAllOf instantiates a new ApiDatabaseUserIAMViewAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiDatabaseUserIAMViewAllOf() *ApiDatabaseUserIAMViewAllOf {
	this := ApiDatabaseUserIAMViewAllOf{}
	var awsIAMType string = "NONE"
	this.AwsIAMType = &awsIAMType
	return &this
}

// NewApiDatabaseUserIAMViewAllOfWithDefaults instantiates a new ApiDatabaseUserIAMViewAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiDatabaseUserIAMViewAllOfWithDefaults() *ApiDatabaseUserIAMViewAllOf {
	this := ApiDatabaseUserIAMViewAllOf{}
	var awsIAMType string = "NONE"
	this.AwsIAMType = &awsIAMType
	return &this
}

// GetAwsIAMType returns the AwsIAMType field value if set, zero value otherwise.
func (o *ApiDatabaseUserIAMViewAllOf) GetAwsIAMType() string {
	if o == nil || isNil(o.AwsIAMType) {
		var ret string
		return ret
	}
	return *o.AwsIAMType
}

// GetAwsIAMTypeOk returns a tuple with the AwsIAMType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiDatabaseUserIAMViewAllOf) GetAwsIAMTypeOk() (*string, bool) {
	if o == nil || isNil(o.AwsIAMType) {
    return nil, false
	}
	return o.AwsIAMType, true
}

// HasAwsIAMType returns a boolean if a field has been set.
func (o *ApiDatabaseUserIAMViewAllOf) HasAwsIAMType() bool {
	if o != nil && !isNil(o.AwsIAMType) {
		return true
	}

	return false
}

// SetAwsIAMType gets a reference to the given string and assigns it to the AwsIAMType field.
func (o *ApiDatabaseUserIAMViewAllOf) SetAwsIAMType(v string) {
	o.AwsIAMType = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *ApiDatabaseUserIAMViewAllOf) GetUsername() string {
	if o == nil || isNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiDatabaseUserIAMViewAllOf) GetUsernameOk() (*string, bool) {
	if o == nil || isNil(o.Username) {
    return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *ApiDatabaseUserIAMViewAllOf) HasUsername() bool {
	if o != nil && !isNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *ApiDatabaseUserIAMViewAllOf) SetUsername(v string) {
	o.Username = &v
}

func (o ApiDatabaseUserIAMViewAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AwsIAMType) {
		toSerialize["awsIAMType"] = o.AwsIAMType
	}
	if !isNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return json.Marshal(toSerialize)
}

type NullableApiDatabaseUserIAMViewAllOf struct {
	value *ApiDatabaseUserIAMViewAllOf
	isSet bool
}

func (v NullableApiDatabaseUserIAMViewAllOf) Get() *ApiDatabaseUserIAMViewAllOf {
	return v.value
}

func (v *NullableApiDatabaseUserIAMViewAllOf) Set(val *ApiDatabaseUserIAMViewAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableApiDatabaseUserIAMViewAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableApiDatabaseUserIAMViewAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiDatabaseUserIAMViewAllOf(val *ApiDatabaseUserIAMViewAllOf) *NullableApiDatabaseUserIAMViewAllOf {
	return &NullableApiDatabaseUserIAMViewAllOf{value: val, isSet: true}
}

func (v NullableApiDatabaseUserIAMViewAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiDatabaseUserIAMViewAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


