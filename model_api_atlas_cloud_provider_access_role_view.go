/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiAtlasCloudProviderAccessRoleView Cloud provider access role.
type ApiAtlasCloudProviderAccessRoleView struct {
	// Human-readable label that identifies the cloud provider of the role.
	ProviderName string `json:"providerName"`
}

// NewApiAtlasCloudProviderAccessRoleView instantiates a new ApiAtlasCloudProviderAccessRoleView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAtlasCloudProviderAccessRoleView(providerName string) *ApiAtlasCloudProviderAccessRoleView {
	this := ApiAtlasCloudProviderAccessRoleView{}
	this.ProviderName = providerName
	return &this
}

// NewApiAtlasCloudProviderAccessRoleViewWithDefaults instantiates a new ApiAtlasCloudProviderAccessRoleView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAtlasCloudProviderAccessRoleViewWithDefaults() *ApiAtlasCloudProviderAccessRoleView {
	this := ApiAtlasCloudProviderAccessRoleView{}
	return &this
}

// GetProviderName returns the ProviderName field value
func (o *ApiAtlasCloudProviderAccessRoleView) GetProviderName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderName
}

// GetProviderNameOk returns a tuple with the ProviderName field value
// and a boolean to check if the value has been set.
func (o *ApiAtlasCloudProviderAccessRoleView) GetProviderNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ProviderName, true
}

// SetProviderName sets field value
func (o *ApiAtlasCloudProviderAccessRoleView) SetProviderName(v string) {
	o.ProviderName = v
}

func (o ApiAtlasCloudProviderAccessRoleView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["providerName"] = o.ProviderName
	}
	return json.Marshal(toSerialize)
}

type NullableApiAtlasCloudProviderAccessRoleView struct {
	value *ApiAtlasCloudProviderAccessRoleView
	isSet bool
}

func (v NullableApiAtlasCloudProviderAccessRoleView) Get() *ApiAtlasCloudProviderAccessRoleView {
	return v.value
}

func (v *NullableApiAtlasCloudProviderAccessRoleView) Set(val *ApiAtlasCloudProviderAccessRoleView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasCloudProviderAccessRoleView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasCloudProviderAccessRoleView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasCloudProviderAccessRoleView(val *ApiAtlasCloudProviderAccessRoleView) *NullableApiAtlasCloudProviderAccessRoleView {
	return &NullableApiAtlasCloudProviderAccessRoleView{value: val, isSet: true}
}

func (v NullableApiAtlasCloudProviderAccessRoleView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasCloudProviderAccessRoleView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


