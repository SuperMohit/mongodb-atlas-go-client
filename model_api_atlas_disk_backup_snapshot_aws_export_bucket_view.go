/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiAtlasDiskBackupSnapshotAWSExportBucketView struct for ApiAtlasDiskBackupSnapshotAWSExportBucketView
type ApiAtlasDiskBackupSnapshotAWSExportBucketView struct {
	// Unique 24-hexadecimal character string that identifies the Amazon Web Services (AWS) Simple Storage Service (S3) export bucket.
	Id *string `json:"_id,omitempty"`
	// Human-readable label that identifies the AWS bucket that the role is authorized to access.
	BucketName *string `json:"bucketName,omitempty"`
	// Human-readable label that identifies the cloud provider that stores this snapshot.
	CloudProvider *string `json:"cloudProvider,omitempty"`
	// Unique 24-hexadecimal character string that identifies the AWS IAM role that MongoDB Cloud uses to access the AWS S3 bucket.
	IamRoleId *string `json:"iamRoleId,omitempty"`
	// List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.
	Links []Link `json:"links"`
}

// NewApiAtlasDiskBackupSnapshotAWSExportBucketView instantiates a new ApiAtlasDiskBackupSnapshotAWSExportBucketView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAtlasDiskBackupSnapshotAWSExportBucketView(links []Link) *ApiAtlasDiskBackupSnapshotAWSExportBucketView {
	this := ApiAtlasDiskBackupSnapshotAWSExportBucketView{}
	this.Links = links
	return &this
}

// NewApiAtlasDiskBackupSnapshotAWSExportBucketViewWithDefaults instantiates a new ApiAtlasDiskBackupSnapshotAWSExportBucketView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAtlasDiskBackupSnapshotAWSExportBucketViewWithDefaults() *ApiAtlasDiskBackupSnapshotAWSExportBucketView {
	this := ApiAtlasDiskBackupSnapshotAWSExportBucketView{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApiAtlasDiskBackupSnapshotAWSExportBucketView) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasDiskBackupSnapshotAWSExportBucketView) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApiAtlasDiskBackupSnapshotAWSExportBucketView) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ApiAtlasDiskBackupSnapshotAWSExportBucketView) SetId(v string) {
	o.Id = &v
}

// GetBucketName returns the BucketName field value if set, zero value otherwise.
func (o *ApiAtlasDiskBackupSnapshotAWSExportBucketView) GetBucketName() string {
	if o == nil || isNil(o.BucketName) {
		var ret string
		return ret
	}
	return *o.BucketName
}

// GetBucketNameOk returns a tuple with the BucketName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasDiskBackupSnapshotAWSExportBucketView) GetBucketNameOk() (*string, bool) {
	if o == nil || isNil(o.BucketName) {
    return nil, false
	}
	return o.BucketName, true
}

// HasBucketName returns a boolean if a field has been set.
func (o *ApiAtlasDiskBackupSnapshotAWSExportBucketView) HasBucketName() bool {
	if o != nil && !isNil(o.BucketName) {
		return true
	}

	return false
}

// SetBucketName gets a reference to the given string and assigns it to the BucketName field.
func (o *ApiAtlasDiskBackupSnapshotAWSExportBucketView) SetBucketName(v string) {
	o.BucketName = &v
}

// GetCloudProvider returns the CloudProvider field value if set, zero value otherwise.
func (o *ApiAtlasDiskBackupSnapshotAWSExportBucketView) GetCloudProvider() string {
	if o == nil || isNil(o.CloudProvider) {
		var ret string
		return ret
	}
	return *o.CloudProvider
}

// GetCloudProviderOk returns a tuple with the CloudProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasDiskBackupSnapshotAWSExportBucketView) GetCloudProviderOk() (*string, bool) {
	if o == nil || isNil(o.CloudProvider) {
    return nil, false
	}
	return o.CloudProvider, true
}

// HasCloudProvider returns a boolean if a field has been set.
func (o *ApiAtlasDiskBackupSnapshotAWSExportBucketView) HasCloudProvider() bool {
	if o != nil && !isNil(o.CloudProvider) {
		return true
	}

	return false
}

// SetCloudProvider gets a reference to the given string and assigns it to the CloudProvider field.
func (o *ApiAtlasDiskBackupSnapshotAWSExportBucketView) SetCloudProvider(v string) {
	o.CloudProvider = &v
}

// GetIamRoleId returns the IamRoleId field value if set, zero value otherwise.
func (o *ApiAtlasDiskBackupSnapshotAWSExportBucketView) GetIamRoleId() string {
	if o == nil || isNil(o.IamRoleId) {
		var ret string
		return ret
	}
	return *o.IamRoleId
}

// GetIamRoleIdOk returns a tuple with the IamRoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasDiskBackupSnapshotAWSExportBucketView) GetIamRoleIdOk() (*string, bool) {
	if o == nil || isNil(o.IamRoleId) {
    return nil, false
	}
	return o.IamRoleId, true
}

// HasIamRoleId returns a boolean if a field has been set.
func (o *ApiAtlasDiskBackupSnapshotAWSExportBucketView) HasIamRoleId() bool {
	if o != nil && !isNil(o.IamRoleId) {
		return true
	}

	return false
}

// SetIamRoleId gets a reference to the given string and assigns it to the IamRoleId field.
func (o *ApiAtlasDiskBackupSnapshotAWSExportBucketView) SetIamRoleId(v string) {
	o.IamRoleId = &v
}

// GetLinks returns the Links field value
func (o *ApiAtlasDiskBackupSnapshotAWSExportBucketView) GetLinks() []Link {
	if o == nil {
		var ret []Link
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *ApiAtlasDiskBackupSnapshotAWSExportBucketView) GetLinksOk() ([]Link, bool) {
	if o == nil {
    return nil, false
	}
	return o.Links, true
}

// SetLinks sets field value
func (o *ApiAtlasDiskBackupSnapshotAWSExportBucketView) SetLinks(v []Link) {
	o.Links = v
}

func (o ApiAtlasDiskBackupSnapshotAWSExportBucketView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["_id"] = o.Id
	}
	if !isNil(o.BucketName) {
		toSerialize["bucketName"] = o.BucketName
	}
	if !isNil(o.CloudProvider) {
		toSerialize["cloudProvider"] = o.CloudProvider
	}
	if !isNil(o.IamRoleId) {
		toSerialize["iamRoleId"] = o.IamRoleId
	}
	if true {
		toSerialize["links"] = o.Links
	}
	return json.Marshal(toSerialize)
}

type NullableApiAtlasDiskBackupSnapshotAWSExportBucketView struct {
	value *ApiAtlasDiskBackupSnapshotAWSExportBucketView
	isSet bool
}

func (v NullableApiAtlasDiskBackupSnapshotAWSExportBucketView) Get() *ApiAtlasDiskBackupSnapshotAWSExportBucketView {
	return v.value
}

func (v *NullableApiAtlasDiskBackupSnapshotAWSExportBucketView) Set(val *ApiAtlasDiskBackupSnapshotAWSExportBucketView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasDiskBackupSnapshotAWSExportBucketView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasDiskBackupSnapshotAWSExportBucketView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasDiskBackupSnapshotAWSExportBucketView(val *ApiAtlasDiskBackupSnapshotAWSExportBucketView) *NullableApiAtlasDiskBackupSnapshotAWSExportBucketView {
	return &NullableApiAtlasDiskBackupSnapshotAWSExportBucketView{value: val, isSet: true}
}

func (v NullableApiAtlasDiskBackupSnapshotAWSExportBucketView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasDiskBackupSnapshotAWSExportBucketView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


