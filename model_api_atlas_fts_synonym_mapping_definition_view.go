/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiAtlasFTSSynonymMappingDefinitionView Synonyms used for this full text index.
type ApiAtlasFTSSynonymMappingDefinitionView struct {
	// Specific pre-defined method chosen to apply to the synonyms to be searched.
	Analyzer string `json:"analyzer"`
	// Human-readable label that identifies the synonym definition. Each **synonym.name** must be unique within the same index definition.
	Name string `json:"name"`
	Source SynonymSource `json:"source"`
}

// NewApiAtlasFTSSynonymMappingDefinitionView instantiates a new ApiAtlasFTSSynonymMappingDefinitionView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAtlasFTSSynonymMappingDefinitionView(analyzer string, name string, source SynonymSource) *ApiAtlasFTSSynonymMappingDefinitionView {
	this := ApiAtlasFTSSynonymMappingDefinitionView{}
	this.Analyzer = analyzer
	this.Name = name
	this.Source = source
	return &this
}

// NewApiAtlasFTSSynonymMappingDefinitionViewWithDefaults instantiates a new ApiAtlasFTSSynonymMappingDefinitionView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAtlasFTSSynonymMappingDefinitionViewWithDefaults() *ApiAtlasFTSSynonymMappingDefinitionView {
	this := ApiAtlasFTSSynonymMappingDefinitionView{}
	var analyzer string = "lucene.standard"
	this.Analyzer = analyzer
	return &this
}

// GetAnalyzer returns the Analyzer field value
func (o *ApiAtlasFTSSynonymMappingDefinitionView) GetAnalyzer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Analyzer
}

// GetAnalyzerOk returns a tuple with the Analyzer field value
// and a boolean to check if the value has been set.
func (o *ApiAtlasFTSSynonymMappingDefinitionView) GetAnalyzerOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Analyzer, true
}

// SetAnalyzer sets field value
func (o *ApiAtlasFTSSynonymMappingDefinitionView) SetAnalyzer(v string) {
	o.Analyzer = v
}

// GetName returns the Name field value
func (o *ApiAtlasFTSSynonymMappingDefinitionView) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ApiAtlasFTSSynonymMappingDefinitionView) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ApiAtlasFTSSynonymMappingDefinitionView) SetName(v string) {
	o.Name = v
}

// GetSource returns the Source field value
func (o *ApiAtlasFTSSynonymMappingDefinitionView) GetSource() SynonymSource {
	if o == nil {
		var ret SynonymSource
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *ApiAtlasFTSSynonymMappingDefinitionView) GetSourceOk() (*SynonymSource, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *ApiAtlasFTSSynonymMappingDefinitionView) SetSource(v SynonymSource) {
	o.Source = v
}

func (o ApiAtlasFTSSynonymMappingDefinitionView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["analyzer"] = o.Analyzer
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["source"] = o.Source
	}
	return json.Marshal(toSerialize)
}

type NullableApiAtlasFTSSynonymMappingDefinitionView struct {
	value *ApiAtlasFTSSynonymMappingDefinitionView
	isSet bool
}

func (v NullableApiAtlasFTSSynonymMappingDefinitionView) Get() *ApiAtlasFTSSynonymMappingDefinitionView {
	return v.value
}

func (v *NullableApiAtlasFTSSynonymMappingDefinitionView) Set(val *ApiAtlasFTSSynonymMappingDefinitionView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasFTSSynonymMappingDefinitionView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasFTSSynonymMappingDefinitionView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasFTSSynonymMappingDefinitionView(val *ApiAtlasFTSSynonymMappingDefinitionView) *NullableApiAtlasFTSSynonymMappingDefinitionView {
	return &NullableApiAtlasFTSSynonymMappingDefinitionView{value: val, isSet: true}
}

func (v NullableApiAtlasFTSSynonymMappingDefinitionView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasFTSSynonymMappingDefinitionView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


