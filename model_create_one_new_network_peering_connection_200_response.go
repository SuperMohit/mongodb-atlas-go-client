/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CreateOneNewNetworkPeeringConnection200Response - struct for CreateOneNewNetworkPeeringConnection200Response
type CreateOneNewNetworkPeeringConnection200Response struct {
	ApiAtlasAWSPeerVpcView *ApiAtlasAWSPeerVpcView
	ApiAtlasAzurePeerNetworkView *ApiAtlasAzurePeerNetworkView
	ApiAtlasGCPPeerVpcView *ApiAtlasGCPPeerVpcView
}

// ApiAtlasAWSPeerVpcViewAsCreateOneNewNetworkPeeringConnection200Response is a convenience function that returns ApiAtlasAWSPeerVpcView wrapped in CreateOneNewNetworkPeeringConnection200Response
func ApiAtlasAWSPeerVpcViewAsCreateOneNewNetworkPeeringConnection200Response(v *ApiAtlasAWSPeerVpcView) CreateOneNewNetworkPeeringConnection200Response {
	return CreateOneNewNetworkPeeringConnection200Response{
		ApiAtlasAWSPeerVpcView: v,
	}
}

// ApiAtlasAzurePeerNetworkViewAsCreateOneNewNetworkPeeringConnection200Response is a convenience function that returns ApiAtlasAzurePeerNetworkView wrapped in CreateOneNewNetworkPeeringConnection200Response
func ApiAtlasAzurePeerNetworkViewAsCreateOneNewNetworkPeeringConnection200Response(v *ApiAtlasAzurePeerNetworkView) CreateOneNewNetworkPeeringConnection200Response {
	return CreateOneNewNetworkPeeringConnection200Response{
		ApiAtlasAzurePeerNetworkView: v,
	}
}

// ApiAtlasGCPPeerVpcViewAsCreateOneNewNetworkPeeringConnection200Response is a convenience function that returns ApiAtlasGCPPeerVpcView wrapped in CreateOneNewNetworkPeeringConnection200Response
func ApiAtlasGCPPeerVpcViewAsCreateOneNewNetworkPeeringConnection200Response(v *ApiAtlasGCPPeerVpcView) CreateOneNewNetworkPeeringConnection200Response {
	return CreateOneNewNetworkPeeringConnection200Response{
		ApiAtlasGCPPeerVpcView: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateOneNewNetworkPeeringConnection200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ApiAtlasAWSPeerVpcView
	err = newStrictDecoder(data).Decode(&dst.ApiAtlasAWSPeerVpcView)
	if err == nil {
		jsonApiAtlasAWSPeerVpcView, _ := json.Marshal(dst.ApiAtlasAWSPeerVpcView)
		if string(jsonApiAtlasAWSPeerVpcView) == "{}" { // empty struct
			dst.ApiAtlasAWSPeerVpcView = nil
		} else {
			match++
		}
	} else {
		dst.ApiAtlasAWSPeerVpcView = nil
	}

	// try to unmarshal data into ApiAtlasAzurePeerNetworkView
	err = newStrictDecoder(data).Decode(&dst.ApiAtlasAzurePeerNetworkView)
	if err == nil {
		jsonApiAtlasAzurePeerNetworkView, _ := json.Marshal(dst.ApiAtlasAzurePeerNetworkView)
		if string(jsonApiAtlasAzurePeerNetworkView) == "{}" { // empty struct
			dst.ApiAtlasAzurePeerNetworkView = nil
		} else {
			match++
		}
	} else {
		dst.ApiAtlasAzurePeerNetworkView = nil
	}

	// try to unmarshal data into ApiAtlasGCPPeerVpcView
	err = newStrictDecoder(data).Decode(&dst.ApiAtlasGCPPeerVpcView)
	if err == nil {
		jsonApiAtlasGCPPeerVpcView, _ := json.Marshal(dst.ApiAtlasGCPPeerVpcView)
		if string(jsonApiAtlasGCPPeerVpcView) == "{}" { // empty struct
			dst.ApiAtlasGCPPeerVpcView = nil
		} else {
			match++
		}
	} else {
		dst.ApiAtlasGCPPeerVpcView = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ApiAtlasAWSPeerVpcView = nil
		dst.ApiAtlasAzurePeerNetworkView = nil
		dst.ApiAtlasGCPPeerVpcView = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateOneNewNetworkPeeringConnection200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateOneNewNetworkPeeringConnection200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateOneNewNetworkPeeringConnection200Response) MarshalJSON() ([]byte, error) {
	if src.ApiAtlasAWSPeerVpcView != nil {
		return json.Marshal(&src.ApiAtlasAWSPeerVpcView)
	}

	if src.ApiAtlasAzurePeerNetworkView != nil {
		return json.Marshal(&src.ApiAtlasAzurePeerNetworkView)
	}

	if src.ApiAtlasGCPPeerVpcView != nil {
		return json.Marshal(&src.ApiAtlasGCPPeerVpcView)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateOneNewNetworkPeeringConnection200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ApiAtlasAWSPeerVpcView != nil {
		return obj.ApiAtlasAWSPeerVpcView
	}

	if obj.ApiAtlasAzurePeerNetworkView != nil {
		return obj.ApiAtlasAzurePeerNetworkView
	}

	if obj.ApiAtlasGCPPeerVpcView != nil {
		return obj.ApiAtlasGCPPeerVpcView
	}

	// all schemas are nil
	return nil
}

type NullableCreateOneNewNetworkPeeringConnection200Response struct {
	value *CreateOneNewNetworkPeeringConnection200Response
	isSet bool
}

func (v NullableCreateOneNewNetworkPeeringConnection200Response) Get() *CreateOneNewNetworkPeeringConnection200Response {
	return v.value
}

func (v *NullableCreateOneNewNetworkPeeringConnection200Response) Set(val *CreateOneNewNetworkPeeringConnection200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateOneNewNetworkPeeringConnection200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateOneNewNetworkPeeringConnection200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateOneNewNetworkPeeringConnection200Response(val *CreateOneNewNetworkPeeringConnection200Response) *NullableCreateOneNewNetworkPeeringConnection200Response {
	return &NullableCreateOneNewNetworkPeeringConnection200Response{value: val, isSet: true}
}

func (v NullableCreateOneNewNetworkPeeringConnection200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateOneNewNetworkPeeringConnection200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


