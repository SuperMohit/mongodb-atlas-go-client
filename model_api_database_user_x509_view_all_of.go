/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiDatabaseUserX509ViewAllOf struct for ApiDatabaseUserX509ViewAllOf
type ApiDatabaseUserX509ViewAllOf struct {
	// Human-readable label that represents the user that authenticates to MongoDB. This must be formatted as a [RFC 2253](https://tools.ietf.org/html/2253) Distinguished Name. 
	Username *string `json:"username,omitempty"`
	// X.509 method that MongoDB Cloud uses to authenticate the database user. - For MongoDB Cloud-managed X.509, specify `MANAGED`. - For self-managed X.509, specify `CUSTOMER`. Users created with the `CUSTOMER` method require a Common Name (CN) in the **username** parameter. You must create externally authenticated users on the `$external` database.
	X509Type *string `json:"x509Type,omitempty"`
}

// NewApiDatabaseUserX509ViewAllOf instantiates a new ApiDatabaseUserX509ViewAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiDatabaseUserX509ViewAllOf() *ApiDatabaseUserX509ViewAllOf {
	this := ApiDatabaseUserX509ViewAllOf{}
	var x509Type string = "NONE"
	this.X509Type = &x509Type
	return &this
}

// NewApiDatabaseUserX509ViewAllOfWithDefaults instantiates a new ApiDatabaseUserX509ViewAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiDatabaseUserX509ViewAllOfWithDefaults() *ApiDatabaseUserX509ViewAllOf {
	this := ApiDatabaseUserX509ViewAllOf{}
	var x509Type string = "NONE"
	this.X509Type = &x509Type
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *ApiDatabaseUserX509ViewAllOf) GetUsername() string {
	if o == nil || isNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiDatabaseUserX509ViewAllOf) GetUsernameOk() (*string, bool) {
	if o == nil || isNil(o.Username) {
    return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *ApiDatabaseUserX509ViewAllOf) HasUsername() bool {
	if o != nil && !isNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *ApiDatabaseUserX509ViewAllOf) SetUsername(v string) {
	o.Username = &v
}

// GetX509Type returns the X509Type field value if set, zero value otherwise.
func (o *ApiDatabaseUserX509ViewAllOf) GetX509Type() string {
	if o == nil || isNil(o.X509Type) {
		var ret string
		return ret
	}
	return *o.X509Type
}

// GetX509TypeOk returns a tuple with the X509Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiDatabaseUserX509ViewAllOf) GetX509TypeOk() (*string, bool) {
	if o == nil || isNil(o.X509Type) {
    return nil, false
	}
	return o.X509Type, true
}

// HasX509Type returns a boolean if a field has been set.
func (o *ApiDatabaseUserX509ViewAllOf) HasX509Type() bool {
	if o != nil && !isNil(o.X509Type) {
		return true
	}

	return false
}

// SetX509Type gets a reference to the given string and assigns it to the X509Type field.
func (o *ApiDatabaseUserX509ViewAllOf) SetX509Type(v string) {
	o.X509Type = &v
}

func (o ApiDatabaseUserX509ViewAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !isNil(o.X509Type) {
		toSerialize["x509Type"] = o.X509Type
	}
	return json.Marshal(toSerialize)
}

type NullableApiDatabaseUserX509ViewAllOf struct {
	value *ApiDatabaseUserX509ViewAllOf
	isSet bool
}

func (v NullableApiDatabaseUserX509ViewAllOf) Get() *ApiDatabaseUserX509ViewAllOf {
	return v.value
}

func (v *NullableApiDatabaseUserX509ViewAllOf) Set(val *ApiDatabaseUserX509ViewAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableApiDatabaseUserX509ViewAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableApiDatabaseUserX509ViewAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiDatabaseUserX509ViewAllOf(val *ApiDatabaseUserX509ViewAllOf) *NullableApiDatabaseUserX509ViewAllOf {
	return &NullableApiDatabaseUserX509ViewAllOf{value: val, isSet: true}
}

func (v NullableApiDatabaseUserX509ViewAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiDatabaseUserX509ViewAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


