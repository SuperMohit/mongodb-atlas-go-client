/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiAtlasSnapshotRetentionView struct for ApiAtlasSnapshotRetentionView
type ApiAtlasSnapshotRetentionView struct {
	// List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.
	Links []Link `json:"links"`
	// Quantity of time in which MongoDB Cloud measures snapshot retention.
	RetentionUnit string `json:"retentionUnit"`
	// Number that indicates the amount of days, weeks, or months that MongoDB Cloud retains the snapshot. For less frequent policy items, MongoDB Cloud requires that you specify a value greater than or equal to the value specified for more frequent policy items. If the hourly policy item specifies a retention of two days, specify two days or greater for the retention of the weekly policy item.
	RetentionValue int32 `json:"retentionValue"`
}

// NewApiAtlasSnapshotRetentionView instantiates a new ApiAtlasSnapshotRetentionView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAtlasSnapshotRetentionView(links []Link, retentionUnit string, retentionValue int32) *ApiAtlasSnapshotRetentionView {
	this := ApiAtlasSnapshotRetentionView{}
	this.Links = links
	this.RetentionUnit = retentionUnit
	this.RetentionValue = retentionValue
	return &this
}

// NewApiAtlasSnapshotRetentionViewWithDefaults instantiates a new ApiAtlasSnapshotRetentionView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAtlasSnapshotRetentionViewWithDefaults() *ApiAtlasSnapshotRetentionView {
	this := ApiAtlasSnapshotRetentionView{}
	return &this
}

// GetLinks returns the Links field value
func (o *ApiAtlasSnapshotRetentionView) GetLinks() []Link {
	if o == nil {
		var ret []Link
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *ApiAtlasSnapshotRetentionView) GetLinksOk() ([]Link, bool) {
	if o == nil {
    return nil, false
	}
	return o.Links, true
}

// SetLinks sets field value
func (o *ApiAtlasSnapshotRetentionView) SetLinks(v []Link) {
	o.Links = v
}

// GetRetentionUnit returns the RetentionUnit field value
func (o *ApiAtlasSnapshotRetentionView) GetRetentionUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RetentionUnit
}

// GetRetentionUnitOk returns a tuple with the RetentionUnit field value
// and a boolean to check if the value has been set.
func (o *ApiAtlasSnapshotRetentionView) GetRetentionUnitOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.RetentionUnit, true
}

// SetRetentionUnit sets field value
func (o *ApiAtlasSnapshotRetentionView) SetRetentionUnit(v string) {
	o.RetentionUnit = v
}

// GetRetentionValue returns the RetentionValue field value
func (o *ApiAtlasSnapshotRetentionView) GetRetentionValue() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RetentionValue
}

// GetRetentionValueOk returns a tuple with the RetentionValue field value
// and a boolean to check if the value has been set.
func (o *ApiAtlasSnapshotRetentionView) GetRetentionValueOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.RetentionValue, true
}

// SetRetentionValue sets field value
func (o *ApiAtlasSnapshotRetentionView) SetRetentionValue(v int32) {
	o.RetentionValue = v
}

func (o ApiAtlasSnapshotRetentionView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["links"] = o.Links
	}
	if true {
		toSerialize["retentionUnit"] = o.RetentionUnit
	}
	if true {
		toSerialize["retentionValue"] = o.RetentionValue
	}
	return json.Marshal(toSerialize)
}

type NullableApiAtlasSnapshotRetentionView struct {
	value *ApiAtlasSnapshotRetentionView
	isSet bool
}

func (v NullableApiAtlasSnapshotRetentionView) Get() *ApiAtlasSnapshotRetentionView {
	return v.value
}

func (v *NullableApiAtlasSnapshotRetentionView) Set(val *ApiAtlasSnapshotRetentionView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasSnapshotRetentionView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasSnapshotRetentionView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasSnapshotRetentionView(val *ApiAtlasSnapshotRetentionView) *NullableApiAtlasSnapshotRetentionView {
	return &NullableApiAtlasSnapshotRetentionView{value: val, isSet: true}
}

func (v NullableApiAtlasSnapshotRetentionView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasSnapshotRetentionView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


