/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IdentityProviderView struct for IdentityProviderView
type IdentityProviderView struct {
	// URL that points to where to send the SAML response.
	AcsUrl *string `json:"acsUrl,omitempty"`
	// List that contains the domains associated with the identity provider.
	AssociatedDomains []string `json:"associatedDomains"`
	// List that contains the connected organization configurations associated with the identity provider.
	AssociatedOrgs []ConnectedOrgConfigView `json:"associatedOrgs"`
	// Unique string that identifies the intended audience of the SAML assertion.
	AudienceUri *string `json:"audienceUri,omitempty"`
	// Human-readable label that identifies the identity provider.
	DisplayName *string `json:"displayName,omitempty"`
	// Unique string that identifies the issuer of the SAML Assertion.
	IssuerUri *string `json:"issuerUri,omitempty"`
	// Unique 20-hexadecimal digit string that identifies the identity provider.
	OktaIdpId string `json:"oktaIdpId"`
	PemFileInfo *PemFileInfoView `json:"pemFileInfo,omitempty"`
	// SAML Authentication Request Protocol HTTP method binding (POST or REDIRECT) that Federated Authentication uses to send the authentication request.
	RequestBinding *string `json:"requestBinding,omitempty"`
	// Signature algorithm that Federated Authentication uses to encrypt the identity provider signature.
	ResponseSignatureAlgorithm *string `json:"responseSignatureAlgorithm,omitempty"`
	// Flag that indicates whether the identity provider has SSO debug enabled.
	SsoDebugEnabled *bool `json:"ssoDebugEnabled,omitempty"`
	// URL that points to the receiver of the SAML authentication request.
	SsoUrl *string `json:"ssoUrl,omitempty"`
	// String enum that indicates whether the identity provider is active.
	Status *string `json:"status,omitempty"`
}

// NewIdentityProviderView instantiates a new IdentityProviderView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityProviderView(associatedDomains []string, associatedOrgs []ConnectedOrgConfigView, oktaIdpId string) *IdentityProviderView {
	this := IdentityProviderView{}
	this.AssociatedDomains = associatedDomains
	this.AssociatedOrgs = associatedOrgs
	this.OktaIdpId = oktaIdpId
	return &this
}

// NewIdentityProviderViewWithDefaults instantiates a new IdentityProviderView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityProviderViewWithDefaults() *IdentityProviderView {
	this := IdentityProviderView{}
	return &this
}

// GetAcsUrl returns the AcsUrl field value if set, zero value otherwise.
func (o *IdentityProviderView) GetAcsUrl() string {
	if o == nil || isNil(o.AcsUrl) {
		var ret string
		return ret
	}
	return *o.AcsUrl
}

// GetAcsUrlOk returns a tuple with the AcsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProviderView) GetAcsUrlOk() (*string, bool) {
	if o == nil || isNil(o.AcsUrl) {
    return nil, false
	}
	return o.AcsUrl, true
}

// HasAcsUrl returns a boolean if a field has been set.
func (o *IdentityProviderView) HasAcsUrl() bool {
	if o != nil && !isNil(o.AcsUrl) {
		return true
	}

	return false
}

// SetAcsUrl gets a reference to the given string and assigns it to the AcsUrl field.
func (o *IdentityProviderView) SetAcsUrl(v string) {
	o.AcsUrl = &v
}

// GetAssociatedDomains returns the AssociatedDomains field value
func (o *IdentityProviderView) GetAssociatedDomains() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AssociatedDomains
}

// GetAssociatedDomainsOk returns a tuple with the AssociatedDomains field value
// and a boolean to check if the value has been set.
func (o *IdentityProviderView) GetAssociatedDomainsOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.AssociatedDomains, true
}

// SetAssociatedDomains sets field value
func (o *IdentityProviderView) SetAssociatedDomains(v []string) {
	o.AssociatedDomains = v
}

// GetAssociatedOrgs returns the AssociatedOrgs field value
func (o *IdentityProviderView) GetAssociatedOrgs() []ConnectedOrgConfigView {
	if o == nil {
		var ret []ConnectedOrgConfigView
		return ret
	}

	return o.AssociatedOrgs
}

// GetAssociatedOrgsOk returns a tuple with the AssociatedOrgs field value
// and a boolean to check if the value has been set.
func (o *IdentityProviderView) GetAssociatedOrgsOk() ([]ConnectedOrgConfigView, bool) {
	if o == nil {
    return nil, false
	}
	return o.AssociatedOrgs, true
}

// SetAssociatedOrgs sets field value
func (o *IdentityProviderView) SetAssociatedOrgs(v []ConnectedOrgConfigView) {
	o.AssociatedOrgs = v
}

// GetAudienceUri returns the AudienceUri field value if set, zero value otherwise.
func (o *IdentityProviderView) GetAudienceUri() string {
	if o == nil || isNil(o.AudienceUri) {
		var ret string
		return ret
	}
	return *o.AudienceUri
}

// GetAudienceUriOk returns a tuple with the AudienceUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProviderView) GetAudienceUriOk() (*string, bool) {
	if o == nil || isNil(o.AudienceUri) {
    return nil, false
	}
	return o.AudienceUri, true
}

// HasAudienceUri returns a boolean if a field has been set.
func (o *IdentityProviderView) HasAudienceUri() bool {
	if o != nil && !isNil(o.AudienceUri) {
		return true
	}

	return false
}

// SetAudienceUri gets a reference to the given string and assigns it to the AudienceUri field.
func (o *IdentityProviderView) SetAudienceUri(v string) {
	o.AudienceUri = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *IdentityProviderView) GetDisplayName() string {
	if o == nil || isNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProviderView) GetDisplayNameOk() (*string, bool) {
	if o == nil || isNil(o.DisplayName) {
    return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *IdentityProviderView) HasDisplayName() bool {
	if o != nil && !isNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *IdentityProviderView) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetIssuerUri returns the IssuerUri field value if set, zero value otherwise.
func (o *IdentityProviderView) GetIssuerUri() string {
	if o == nil || isNil(o.IssuerUri) {
		var ret string
		return ret
	}
	return *o.IssuerUri
}

// GetIssuerUriOk returns a tuple with the IssuerUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProviderView) GetIssuerUriOk() (*string, bool) {
	if o == nil || isNil(o.IssuerUri) {
    return nil, false
	}
	return o.IssuerUri, true
}

// HasIssuerUri returns a boolean if a field has been set.
func (o *IdentityProviderView) HasIssuerUri() bool {
	if o != nil && !isNil(o.IssuerUri) {
		return true
	}

	return false
}

// SetIssuerUri gets a reference to the given string and assigns it to the IssuerUri field.
func (o *IdentityProviderView) SetIssuerUri(v string) {
	o.IssuerUri = &v
}

// GetOktaIdpId returns the OktaIdpId field value
func (o *IdentityProviderView) GetOktaIdpId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OktaIdpId
}

// GetOktaIdpIdOk returns a tuple with the OktaIdpId field value
// and a boolean to check if the value has been set.
func (o *IdentityProviderView) GetOktaIdpIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.OktaIdpId, true
}

// SetOktaIdpId sets field value
func (o *IdentityProviderView) SetOktaIdpId(v string) {
	o.OktaIdpId = v
}

// GetPemFileInfo returns the PemFileInfo field value if set, zero value otherwise.
func (o *IdentityProviderView) GetPemFileInfo() PemFileInfoView {
	if o == nil || isNil(o.PemFileInfo) {
		var ret PemFileInfoView
		return ret
	}
	return *o.PemFileInfo
}

// GetPemFileInfoOk returns a tuple with the PemFileInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProviderView) GetPemFileInfoOk() (*PemFileInfoView, bool) {
	if o == nil || isNil(o.PemFileInfo) {
    return nil, false
	}
	return o.PemFileInfo, true
}

// HasPemFileInfo returns a boolean if a field has been set.
func (o *IdentityProviderView) HasPemFileInfo() bool {
	if o != nil && !isNil(o.PemFileInfo) {
		return true
	}

	return false
}

// SetPemFileInfo gets a reference to the given PemFileInfoView and assigns it to the PemFileInfo field.
func (o *IdentityProviderView) SetPemFileInfo(v PemFileInfoView) {
	o.PemFileInfo = &v
}

// GetRequestBinding returns the RequestBinding field value if set, zero value otherwise.
func (o *IdentityProviderView) GetRequestBinding() string {
	if o == nil || isNil(o.RequestBinding) {
		var ret string
		return ret
	}
	return *o.RequestBinding
}

// GetRequestBindingOk returns a tuple with the RequestBinding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProviderView) GetRequestBindingOk() (*string, bool) {
	if o == nil || isNil(o.RequestBinding) {
    return nil, false
	}
	return o.RequestBinding, true
}

// HasRequestBinding returns a boolean if a field has been set.
func (o *IdentityProviderView) HasRequestBinding() bool {
	if o != nil && !isNil(o.RequestBinding) {
		return true
	}

	return false
}

// SetRequestBinding gets a reference to the given string and assigns it to the RequestBinding field.
func (o *IdentityProviderView) SetRequestBinding(v string) {
	o.RequestBinding = &v
}

// GetResponseSignatureAlgorithm returns the ResponseSignatureAlgorithm field value if set, zero value otherwise.
func (o *IdentityProviderView) GetResponseSignatureAlgorithm() string {
	if o == nil || isNil(o.ResponseSignatureAlgorithm) {
		var ret string
		return ret
	}
	return *o.ResponseSignatureAlgorithm
}

// GetResponseSignatureAlgorithmOk returns a tuple with the ResponseSignatureAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProviderView) GetResponseSignatureAlgorithmOk() (*string, bool) {
	if o == nil || isNil(o.ResponseSignatureAlgorithm) {
    return nil, false
	}
	return o.ResponseSignatureAlgorithm, true
}

// HasResponseSignatureAlgorithm returns a boolean if a field has been set.
func (o *IdentityProviderView) HasResponseSignatureAlgorithm() bool {
	if o != nil && !isNil(o.ResponseSignatureAlgorithm) {
		return true
	}

	return false
}

// SetResponseSignatureAlgorithm gets a reference to the given string and assigns it to the ResponseSignatureAlgorithm field.
func (o *IdentityProviderView) SetResponseSignatureAlgorithm(v string) {
	o.ResponseSignatureAlgorithm = &v
}

// GetSsoDebugEnabled returns the SsoDebugEnabled field value if set, zero value otherwise.
func (o *IdentityProviderView) GetSsoDebugEnabled() bool {
	if o == nil || isNil(o.SsoDebugEnabled) {
		var ret bool
		return ret
	}
	return *o.SsoDebugEnabled
}

// GetSsoDebugEnabledOk returns a tuple with the SsoDebugEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProviderView) GetSsoDebugEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.SsoDebugEnabled) {
    return nil, false
	}
	return o.SsoDebugEnabled, true
}

// HasSsoDebugEnabled returns a boolean if a field has been set.
func (o *IdentityProviderView) HasSsoDebugEnabled() bool {
	if o != nil && !isNil(o.SsoDebugEnabled) {
		return true
	}

	return false
}

// SetSsoDebugEnabled gets a reference to the given bool and assigns it to the SsoDebugEnabled field.
func (o *IdentityProviderView) SetSsoDebugEnabled(v bool) {
	o.SsoDebugEnabled = &v
}

// GetSsoUrl returns the SsoUrl field value if set, zero value otherwise.
func (o *IdentityProviderView) GetSsoUrl() string {
	if o == nil || isNil(o.SsoUrl) {
		var ret string
		return ret
	}
	return *o.SsoUrl
}

// GetSsoUrlOk returns a tuple with the SsoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProviderView) GetSsoUrlOk() (*string, bool) {
	if o == nil || isNil(o.SsoUrl) {
    return nil, false
	}
	return o.SsoUrl, true
}

// HasSsoUrl returns a boolean if a field has been set.
func (o *IdentityProviderView) HasSsoUrl() bool {
	if o != nil && !isNil(o.SsoUrl) {
		return true
	}

	return false
}

// SetSsoUrl gets a reference to the given string and assigns it to the SsoUrl field.
func (o *IdentityProviderView) SetSsoUrl(v string) {
	o.SsoUrl = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *IdentityProviderView) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProviderView) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *IdentityProviderView) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *IdentityProviderView) SetStatus(v string) {
	o.Status = &v
}

func (o IdentityProviderView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AcsUrl) {
		toSerialize["acsUrl"] = o.AcsUrl
	}
	if true {
		toSerialize["associatedDomains"] = o.AssociatedDomains
	}
	if true {
		toSerialize["associatedOrgs"] = o.AssociatedOrgs
	}
	if !isNil(o.AudienceUri) {
		toSerialize["audienceUri"] = o.AudienceUri
	}
	if !isNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !isNil(o.IssuerUri) {
		toSerialize["issuerUri"] = o.IssuerUri
	}
	if true {
		toSerialize["oktaIdpId"] = o.OktaIdpId
	}
	if !isNil(o.PemFileInfo) {
		toSerialize["pemFileInfo"] = o.PemFileInfo
	}
	if !isNil(o.RequestBinding) {
		toSerialize["requestBinding"] = o.RequestBinding
	}
	if !isNil(o.ResponseSignatureAlgorithm) {
		toSerialize["responseSignatureAlgorithm"] = o.ResponseSignatureAlgorithm
	}
	if !isNil(o.SsoDebugEnabled) {
		toSerialize["ssoDebugEnabled"] = o.SsoDebugEnabled
	}
	if !isNil(o.SsoUrl) {
		toSerialize["ssoUrl"] = o.SsoUrl
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableIdentityProviderView struct {
	value *IdentityProviderView
	isSet bool
}

func (v NullableIdentityProviderView) Get() *IdentityProviderView {
	return v.value
}

func (v *NullableIdentityProviderView) Set(val *IdentityProviderView) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityProviderView) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityProviderView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityProviderView(val *IdentityProviderView) *NullableIdentityProviderView {
	return &NullableIdentityProviderView{value: val, isSet: true}
}

func (v NullableIdentityProviderView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityProviderView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


