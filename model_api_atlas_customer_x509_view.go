/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiAtlasCustomerX509View Settings to configure TLS Certificates for database users.
type ApiAtlasCustomerX509View struct {
	// Concatenated list of customer certificate authority (CA) certificates needed to authenticate database users. MongoDB Cloud expects this as a PEM-formatted certificate.
	Cas *string `json:"cas,omitempty"`
	// List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.
	Links []Link `json:"links"`
}

// NewApiAtlasCustomerX509View instantiates a new ApiAtlasCustomerX509View object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAtlasCustomerX509View(links []Link) *ApiAtlasCustomerX509View {
	this := ApiAtlasCustomerX509View{}
	this.Links = links
	return &this
}

// NewApiAtlasCustomerX509ViewWithDefaults instantiates a new ApiAtlasCustomerX509View object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAtlasCustomerX509ViewWithDefaults() *ApiAtlasCustomerX509View {
	this := ApiAtlasCustomerX509View{}
	return &this
}

// GetCas returns the Cas field value if set, zero value otherwise.
func (o *ApiAtlasCustomerX509View) GetCas() string {
	if o == nil || isNil(o.Cas) {
		var ret string
		return ret
	}
	return *o.Cas
}

// GetCasOk returns a tuple with the Cas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasCustomerX509View) GetCasOk() (*string, bool) {
	if o == nil || isNil(o.Cas) {
    return nil, false
	}
	return o.Cas, true
}

// HasCas returns a boolean if a field has been set.
func (o *ApiAtlasCustomerX509View) HasCas() bool {
	if o != nil && !isNil(o.Cas) {
		return true
	}

	return false
}

// SetCas gets a reference to the given string and assigns it to the Cas field.
func (o *ApiAtlasCustomerX509View) SetCas(v string) {
	o.Cas = &v
}

// GetLinks returns the Links field value
func (o *ApiAtlasCustomerX509View) GetLinks() []Link {
	if o == nil {
		var ret []Link
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *ApiAtlasCustomerX509View) GetLinksOk() ([]Link, bool) {
	if o == nil {
    return nil, false
	}
	return o.Links, true
}

// SetLinks sets field value
func (o *ApiAtlasCustomerX509View) SetLinks(v []Link) {
	o.Links = v
}

func (o ApiAtlasCustomerX509View) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Cas) {
		toSerialize["cas"] = o.Cas
	}
	if true {
		toSerialize["links"] = o.Links
	}
	return json.Marshal(toSerialize)
}

type NullableApiAtlasCustomerX509View struct {
	value *ApiAtlasCustomerX509View
	isSet bool
}

func (v NullableApiAtlasCustomerX509View) Get() *ApiAtlasCustomerX509View {
	return v.value
}

func (v *NullableApiAtlasCustomerX509View) Set(val *ApiAtlasCustomerX509View) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasCustomerX509View) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasCustomerX509View) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasCustomerX509View(val *ApiAtlasCustomerX509View) *NullableApiAtlasCustomerX509View {
	return &NullableApiAtlasCustomerX509View{value: val, isSet: true}
}

func (v NullableApiAtlasCustomerX509View) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasCustomerX509View) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


