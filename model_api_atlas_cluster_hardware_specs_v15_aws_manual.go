/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiAtlasClusterHardwareSpecsV15AWSManual Hardware specifications for all electable nodes deployed in the region. Electable nodes can become the primary and can enable local reads. If you don't specify this option, MongoDB Cloud deploys no electable nodes to the region.
type ApiAtlasClusterHardwareSpecsV15AWSManual struct {
	// Target throughput desired for storage attached to your AWS-provisioned cluster. Only change this parameter if you:  - set `\"replicationSpecs[n].regionConfigs[m].providerName\" : \"AWS\"`. - set `\"replicationSpecs[n].regionConfigs[m].electableSpecs.instanceSize\" : \"M30\"` or greater not including `Mxx_NVME` tiers.  The maximum input/output operations per second (IOPS) depend on the selected **.instanceSize** and **.diskSizeGB**. This parameter defaults to the cluster tier's standard IOPS value. Changing this value impacts cluster cost. MongoDB Cloud enforces minimum ratios of storage capacity to system memory for given cluster tiers. This keeps cluster performance consistent with large datasets.  - Instance sizes `M10` to `M40` have a ratio of disk capacity to system memory of 60:1. - Instance sizes greater than `M40` have a ratio of 120:1.
	DiskIOPS *int32 `json:"diskIOPS,omitempty"`
	// Type of storage you want to attach to your AWS-provisioned cluster.  - `STANDARD` volume types can't exceed the default input/output operations per second (IOPS) rate for the selected volume size.  - `PROVISIONED` volume types must fall within the allowable IOPS range for the selected volume size.\",
	EbsVolumeType *string `json:"ebsVolumeType,omitempty"`
	// Hardware specification for the instance sizes in this region. Each instance size has a default storage and memory capacity. The instance size you select applies to all the data-bearing hosts in your instance size. If you deploy a Global Cluster, you must choose a instance size of `M30` or greater.
	InstanceSize *string `json:"instanceSize,omitempty"`
	// Number of read-only nodes for MongoDB Cloud deploys to the region. Read-only nodes can never become the primary, but can enable local reads.
	NodeCount *int32 `json:"nodeCount,omitempty"`
}

// NewApiAtlasClusterHardwareSpecsV15AWSManual instantiates a new ApiAtlasClusterHardwareSpecsV15AWSManual object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAtlasClusterHardwareSpecsV15AWSManual() *ApiAtlasClusterHardwareSpecsV15AWSManual {
	this := ApiAtlasClusterHardwareSpecsV15AWSManual{}
	var ebsVolumeType string = "PROVISIONED"
	this.EbsVolumeType = &ebsVolumeType
	return &this
}

// NewApiAtlasClusterHardwareSpecsV15AWSManualWithDefaults instantiates a new ApiAtlasClusterHardwareSpecsV15AWSManual object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAtlasClusterHardwareSpecsV15AWSManualWithDefaults() *ApiAtlasClusterHardwareSpecsV15AWSManual {
	this := ApiAtlasClusterHardwareSpecsV15AWSManual{}
	var ebsVolumeType string = "PROVISIONED"
	this.EbsVolumeType = &ebsVolumeType
	return &this
}

// GetDiskIOPS returns the DiskIOPS field value if set, zero value otherwise.
func (o *ApiAtlasClusterHardwareSpecsV15AWSManual) GetDiskIOPS() int32 {
	if o == nil || isNil(o.DiskIOPS) {
		var ret int32
		return ret
	}
	return *o.DiskIOPS
}

// GetDiskIOPSOk returns a tuple with the DiskIOPS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasClusterHardwareSpecsV15AWSManual) GetDiskIOPSOk() (*int32, bool) {
	if o == nil || isNil(o.DiskIOPS) {
    return nil, false
	}
	return o.DiskIOPS, true
}

// HasDiskIOPS returns a boolean if a field has been set.
func (o *ApiAtlasClusterHardwareSpecsV15AWSManual) HasDiskIOPS() bool {
	if o != nil && !isNil(o.DiskIOPS) {
		return true
	}

	return false
}

// SetDiskIOPS gets a reference to the given int32 and assigns it to the DiskIOPS field.
func (o *ApiAtlasClusterHardwareSpecsV15AWSManual) SetDiskIOPS(v int32) {
	o.DiskIOPS = &v
}

// GetEbsVolumeType returns the EbsVolumeType field value if set, zero value otherwise.
func (o *ApiAtlasClusterHardwareSpecsV15AWSManual) GetEbsVolumeType() string {
	if o == nil || isNil(o.EbsVolumeType) {
		var ret string
		return ret
	}
	return *o.EbsVolumeType
}

// GetEbsVolumeTypeOk returns a tuple with the EbsVolumeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasClusterHardwareSpecsV15AWSManual) GetEbsVolumeTypeOk() (*string, bool) {
	if o == nil || isNil(o.EbsVolumeType) {
    return nil, false
	}
	return o.EbsVolumeType, true
}

// HasEbsVolumeType returns a boolean if a field has been set.
func (o *ApiAtlasClusterHardwareSpecsV15AWSManual) HasEbsVolumeType() bool {
	if o != nil && !isNil(o.EbsVolumeType) {
		return true
	}

	return false
}

// SetEbsVolumeType gets a reference to the given string and assigns it to the EbsVolumeType field.
func (o *ApiAtlasClusterHardwareSpecsV15AWSManual) SetEbsVolumeType(v string) {
	o.EbsVolumeType = &v
}

// GetInstanceSize returns the InstanceSize field value if set, zero value otherwise.
func (o *ApiAtlasClusterHardwareSpecsV15AWSManual) GetInstanceSize() string {
	if o == nil || isNil(o.InstanceSize) {
		var ret string
		return ret
	}
	return *o.InstanceSize
}

// GetInstanceSizeOk returns a tuple with the InstanceSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasClusterHardwareSpecsV15AWSManual) GetInstanceSizeOk() (*string, bool) {
	if o == nil || isNil(o.InstanceSize) {
    return nil, false
	}
	return o.InstanceSize, true
}

// HasInstanceSize returns a boolean if a field has been set.
func (o *ApiAtlasClusterHardwareSpecsV15AWSManual) HasInstanceSize() bool {
	if o != nil && !isNil(o.InstanceSize) {
		return true
	}

	return false
}

// SetInstanceSize gets a reference to the given string and assigns it to the InstanceSize field.
func (o *ApiAtlasClusterHardwareSpecsV15AWSManual) SetInstanceSize(v string) {
	o.InstanceSize = &v
}

// GetNodeCount returns the NodeCount field value if set, zero value otherwise.
func (o *ApiAtlasClusterHardwareSpecsV15AWSManual) GetNodeCount() int32 {
	if o == nil || isNil(o.NodeCount) {
		var ret int32
		return ret
	}
	return *o.NodeCount
}

// GetNodeCountOk returns a tuple with the NodeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasClusterHardwareSpecsV15AWSManual) GetNodeCountOk() (*int32, bool) {
	if o == nil || isNil(o.NodeCount) {
    return nil, false
	}
	return o.NodeCount, true
}

// HasNodeCount returns a boolean if a field has been set.
func (o *ApiAtlasClusterHardwareSpecsV15AWSManual) HasNodeCount() bool {
	if o != nil && !isNil(o.NodeCount) {
		return true
	}

	return false
}

// SetNodeCount gets a reference to the given int32 and assigns it to the NodeCount field.
func (o *ApiAtlasClusterHardwareSpecsV15AWSManual) SetNodeCount(v int32) {
	o.NodeCount = &v
}

func (o ApiAtlasClusterHardwareSpecsV15AWSManual) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.DiskIOPS) {
		toSerialize["diskIOPS"] = o.DiskIOPS
	}
	if !isNil(o.EbsVolumeType) {
		toSerialize["ebsVolumeType"] = o.EbsVolumeType
	}
	if !isNil(o.InstanceSize) {
		toSerialize["instanceSize"] = o.InstanceSize
	}
	if !isNil(o.NodeCount) {
		toSerialize["nodeCount"] = o.NodeCount
	}
	return json.Marshal(toSerialize)
}

type NullableApiAtlasClusterHardwareSpecsV15AWSManual struct {
	value *ApiAtlasClusterHardwareSpecsV15AWSManual
	isSet bool
}

func (v NullableApiAtlasClusterHardwareSpecsV15AWSManual) Get() *ApiAtlasClusterHardwareSpecsV15AWSManual {
	return v.value
}

func (v *NullableApiAtlasClusterHardwareSpecsV15AWSManual) Set(val *ApiAtlasClusterHardwareSpecsV15AWSManual) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasClusterHardwareSpecsV15AWSManual) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasClusterHardwareSpecsV15AWSManual) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasClusterHardwareSpecsV15AWSManual(val *ApiAtlasClusterHardwareSpecsV15AWSManual) *NullableApiAtlasClusterHardwareSpecsV15AWSManual {
	return &NullableApiAtlasClusterHardwareSpecsV15AWSManual{value: val, isSet: true}
}

func (v NullableApiAtlasClusterHardwareSpecsV15AWSManual) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasClusterHardwareSpecsV15AWSManual) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


