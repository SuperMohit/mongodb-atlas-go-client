/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ReturnOnePrivateEndpointForOneProvider200Response - struct for ReturnOnePrivateEndpointForOneProvider200Response
type ReturnOnePrivateEndpointForOneProvider200Response struct {
	ApiAtlasAWSInterfaceEndpointView *ApiAtlasAWSInterfaceEndpointView
	ApiAtlasAzurePrivateEndpointView *ApiAtlasAzurePrivateEndpointView
	ApiAtlasGCPEndpointGroupView *ApiAtlasGCPEndpointGroupView
}

// ApiAtlasAWSInterfaceEndpointViewAsReturnOnePrivateEndpointForOneProvider200Response is a convenience function that returns ApiAtlasAWSInterfaceEndpointView wrapped in ReturnOnePrivateEndpointForOneProvider200Response
func ApiAtlasAWSInterfaceEndpointViewAsReturnOnePrivateEndpointForOneProvider200Response(v *ApiAtlasAWSInterfaceEndpointView) ReturnOnePrivateEndpointForOneProvider200Response {
	return ReturnOnePrivateEndpointForOneProvider200Response{
		ApiAtlasAWSInterfaceEndpointView: v,
	}
}

// ApiAtlasAzurePrivateEndpointViewAsReturnOnePrivateEndpointForOneProvider200Response is a convenience function that returns ApiAtlasAzurePrivateEndpointView wrapped in ReturnOnePrivateEndpointForOneProvider200Response
func ApiAtlasAzurePrivateEndpointViewAsReturnOnePrivateEndpointForOneProvider200Response(v *ApiAtlasAzurePrivateEndpointView) ReturnOnePrivateEndpointForOneProvider200Response {
	return ReturnOnePrivateEndpointForOneProvider200Response{
		ApiAtlasAzurePrivateEndpointView: v,
	}
}

// ApiAtlasGCPEndpointGroupViewAsReturnOnePrivateEndpointForOneProvider200Response is a convenience function that returns ApiAtlasGCPEndpointGroupView wrapped in ReturnOnePrivateEndpointForOneProvider200Response
func ApiAtlasGCPEndpointGroupViewAsReturnOnePrivateEndpointForOneProvider200Response(v *ApiAtlasGCPEndpointGroupView) ReturnOnePrivateEndpointForOneProvider200Response {
	return ReturnOnePrivateEndpointForOneProvider200Response{
		ApiAtlasGCPEndpointGroupView: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ReturnOnePrivateEndpointForOneProvider200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ApiAtlasAWSInterfaceEndpointView
	err = newStrictDecoder(data).Decode(&dst.ApiAtlasAWSInterfaceEndpointView)
	if err == nil {
		jsonApiAtlasAWSInterfaceEndpointView, _ := json.Marshal(dst.ApiAtlasAWSInterfaceEndpointView)
		if string(jsonApiAtlasAWSInterfaceEndpointView) == "{}" { // empty struct
			dst.ApiAtlasAWSInterfaceEndpointView = nil
		} else {
			match++
		}
	} else {
		dst.ApiAtlasAWSInterfaceEndpointView = nil
	}

	// try to unmarshal data into ApiAtlasAzurePrivateEndpointView
	err = newStrictDecoder(data).Decode(&dst.ApiAtlasAzurePrivateEndpointView)
	if err == nil {
		jsonApiAtlasAzurePrivateEndpointView, _ := json.Marshal(dst.ApiAtlasAzurePrivateEndpointView)
		if string(jsonApiAtlasAzurePrivateEndpointView) == "{}" { // empty struct
			dst.ApiAtlasAzurePrivateEndpointView = nil
		} else {
			match++
		}
	} else {
		dst.ApiAtlasAzurePrivateEndpointView = nil
	}

	// try to unmarshal data into ApiAtlasGCPEndpointGroupView
	err = newStrictDecoder(data).Decode(&dst.ApiAtlasGCPEndpointGroupView)
	if err == nil {
		jsonApiAtlasGCPEndpointGroupView, _ := json.Marshal(dst.ApiAtlasGCPEndpointGroupView)
		if string(jsonApiAtlasGCPEndpointGroupView) == "{}" { // empty struct
			dst.ApiAtlasGCPEndpointGroupView = nil
		} else {
			match++
		}
	} else {
		dst.ApiAtlasGCPEndpointGroupView = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ApiAtlasAWSInterfaceEndpointView = nil
		dst.ApiAtlasAzurePrivateEndpointView = nil
		dst.ApiAtlasGCPEndpointGroupView = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ReturnOnePrivateEndpointForOneProvider200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ReturnOnePrivateEndpointForOneProvider200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ReturnOnePrivateEndpointForOneProvider200Response) MarshalJSON() ([]byte, error) {
	if src.ApiAtlasAWSInterfaceEndpointView != nil {
		return json.Marshal(&src.ApiAtlasAWSInterfaceEndpointView)
	}

	if src.ApiAtlasAzurePrivateEndpointView != nil {
		return json.Marshal(&src.ApiAtlasAzurePrivateEndpointView)
	}

	if src.ApiAtlasGCPEndpointGroupView != nil {
		return json.Marshal(&src.ApiAtlasGCPEndpointGroupView)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ReturnOnePrivateEndpointForOneProvider200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ApiAtlasAWSInterfaceEndpointView != nil {
		return obj.ApiAtlasAWSInterfaceEndpointView
	}

	if obj.ApiAtlasAzurePrivateEndpointView != nil {
		return obj.ApiAtlasAzurePrivateEndpointView
	}

	if obj.ApiAtlasGCPEndpointGroupView != nil {
		return obj.ApiAtlasGCPEndpointGroupView
	}

	// all schemas are nil
	return nil
}

type NullableReturnOnePrivateEndpointForOneProvider200Response struct {
	value *ReturnOnePrivateEndpointForOneProvider200Response
	isSet bool
}

func (v NullableReturnOnePrivateEndpointForOneProvider200Response) Get() *ReturnOnePrivateEndpointForOneProvider200Response {
	return v.value
}

func (v *NullableReturnOnePrivateEndpointForOneProvider200Response) Set(val *ReturnOnePrivateEndpointForOneProvider200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableReturnOnePrivateEndpointForOneProvider200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableReturnOnePrivateEndpointForOneProvider200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReturnOnePrivateEndpointForOneProvider200Response(val *ReturnOnePrivateEndpointForOneProvider200Response) *NullableReturnOnePrivateEndpointForOneProvider200Response {
	return &NullableReturnOnePrivateEndpointForOneProvider200Response{value: val, isSet: true}
}

func (v NullableReturnOnePrivateEndpointForOneProvider200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReturnOnePrivateEndpointForOneProvider200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


