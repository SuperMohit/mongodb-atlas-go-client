/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// ApiAtlasIngestionPipelineView Details of a Data Lake Pipeline.
type ApiAtlasIngestionPipelineView struct {
	// Unique 24-hexadecimal digit string that identifies the Data Lake Pipeline.
	Id *string `json:"_id,omitempty"`
	// Timestamp that indicates when the Data Lake Pipeline was created.
	CreatedDate *time.Time `json:"createdDate,omitempty"`
	// Unique 24-hexadecimal digit string that identifies the group.
	GroupId *string `json:"groupId,omitempty"`
	// Timestamp that indicates the last time that the Data Lake Pipeline was updated.
	LastUpdatedDate *time.Time `json:"lastUpdatedDate,omitempty"`
	// Name of this Data Lake Pipeline.
	Name *string `json:"name,omitempty"`
	Sink *ApiAtlasIngestionSinkView `json:"sink,omitempty"`
	Source *ApiAtlasIngestionSourceView `json:"source,omitempty"`
	// State of this Data Lake Pipeline.
	State *string `json:"state,omitempty"`
	// Fields to be excluded for this Data Lake Pipeline.
	Transformations []ApiAtlasFieldTransformationView `json:"transformations,omitempty"`
}

// NewApiAtlasIngestionPipelineView instantiates a new ApiAtlasIngestionPipelineView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAtlasIngestionPipelineView() *ApiAtlasIngestionPipelineView {
	this := ApiAtlasIngestionPipelineView{}
	return &this
}

// NewApiAtlasIngestionPipelineViewWithDefaults instantiates a new ApiAtlasIngestionPipelineView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAtlasIngestionPipelineViewWithDefaults() *ApiAtlasIngestionPipelineView {
	this := ApiAtlasIngestionPipelineView{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApiAtlasIngestionPipelineView) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasIngestionPipelineView) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApiAtlasIngestionPipelineView) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ApiAtlasIngestionPipelineView) SetId(v string) {
	o.Id = &v
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise.
func (o *ApiAtlasIngestionPipelineView) GetCreatedDate() time.Time {
	if o == nil || isNil(o.CreatedDate) {
		var ret time.Time
		return ret
	}
	return *o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasIngestionPipelineView) GetCreatedDateOk() (*time.Time, bool) {
	if o == nil || isNil(o.CreatedDate) {
    return nil, false
	}
	return o.CreatedDate, true
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *ApiAtlasIngestionPipelineView) HasCreatedDate() bool {
	if o != nil && !isNil(o.CreatedDate) {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given time.Time and assigns it to the CreatedDate field.
func (o *ApiAtlasIngestionPipelineView) SetCreatedDate(v time.Time) {
	o.CreatedDate = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *ApiAtlasIngestionPipelineView) GetGroupId() string {
	if o == nil || isNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasIngestionPipelineView) GetGroupIdOk() (*string, bool) {
	if o == nil || isNil(o.GroupId) {
    return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *ApiAtlasIngestionPipelineView) HasGroupId() bool {
	if o != nil && !isNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *ApiAtlasIngestionPipelineView) SetGroupId(v string) {
	o.GroupId = &v
}

// GetLastUpdatedDate returns the LastUpdatedDate field value if set, zero value otherwise.
func (o *ApiAtlasIngestionPipelineView) GetLastUpdatedDate() time.Time {
	if o == nil || isNil(o.LastUpdatedDate) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdatedDate
}

// GetLastUpdatedDateOk returns a tuple with the LastUpdatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasIngestionPipelineView) GetLastUpdatedDateOk() (*time.Time, bool) {
	if o == nil || isNil(o.LastUpdatedDate) {
    return nil, false
	}
	return o.LastUpdatedDate, true
}

// HasLastUpdatedDate returns a boolean if a field has been set.
func (o *ApiAtlasIngestionPipelineView) HasLastUpdatedDate() bool {
	if o != nil && !isNil(o.LastUpdatedDate) {
		return true
	}

	return false
}

// SetLastUpdatedDate gets a reference to the given time.Time and assigns it to the LastUpdatedDate field.
func (o *ApiAtlasIngestionPipelineView) SetLastUpdatedDate(v time.Time) {
	o.LastUpdatedDate = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApiAtlasIngestionPipelineView) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasIngestionPipelineView) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApiAtlasIngestionPipelineView) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApiAtlasIngestionPipelineView) SetName(v string) {
	o.Name = &v
}

// GetSink returns the Sink field value if set, zero value otherwise.
func (o *ApiAtlasIngestionPipelineView) GetSink() ApiAtlasIngestionSinkView {
	if o == nil || isNil(o.Sink) {
		var ret ApiAtlasIngestionSinkView
		return ret
	}
	return *o.Sink
}

// GetSinkOk returns a tuple with the Sink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasIngestionPipelineView) GetSinkOk() (*ApiAtlasIngestionSinkView, bool) {
	if o == nil || isNil(o.Sink) {
    return nil, false
	}
	return o.Sink, true
}

// HasSink returns a boolean if a field has been set.
func (o *ApiAtlasIngestionPipelineView) HasSink() bool {
	if o != nil && !isNil(o.Sink) {
		return true
	}

	return false
}

// SetSink gets a reference to the given ApiAtlasIngestionSinkView and assigns it to the Sink field.
func (o *ApiAtlasIngestionPipelineView) SetSink(v ApiAtlasIngestionSinkView) {
	o.Sink = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *ApiAtlasIngestionPipelineView) GetSource() ApiAtlasIngestionSourceView {
	if o == nil || isNil(o.Source) {
		var ret ApiAtlasIngestionSourceView
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasIngestionPipelineView) GetSourceOk() (*ApiAtlasIngestionSourceView, bool) {
	if o == nil || isNil(o.Source) {
    return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *ApiAtlasIngestionPipelineView) HasSource() bool {
	if o != nil && !isNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given ApiAtlasIngestionSourceView and assigns it to the Source field.
func (o *ApiAtlasIngestionPipelineView) SetSource(v ApiAtlasIngestionSourceView) {
	o.Source = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ApiAtlasIngestionPipelineView) GetState() string {
	if o == nil || isNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasIngestionPipelineView) GetStateOk() (*string, bool) {
	if o == nil || isNil(o.State) {
    return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ApiAtlasIngestionPipelineView) HasState() bool {
	if o != nil && !isNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *ApiAtlasIngestionPipelineView) SetState(v string) {
	o.State = &v
}

// GetTransformations returns the Transformations field value if set, zero value otherwise.
func (o *ApiAtlasIngestionPipelineView) GetTransformations() []ApiAtlasFieldTransformationView {
	if o == nil || isNil(o.Transformations) {
		var ret []ApiAtlasFieldTransformationView
		return ret
	}
	return o.Transformations
}

// GetTransformationsOk returns a tuple with the Transformations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasIngestionPipelineView) GetTransformationsOk() ([]ApiAtlasFieldTransformationView, bool) {
	if o == nil || isNil(o.Transformations) {
    return nil, false
	}
	return o.Transformations, true
}

// HasTransformations returns a boolean if a field has been set.
func (o *ApiAtlasIngestionPipelineView) HasTransformations() bool {
	if o != nil && !isNil(o.Transformations) {
		return true
	}

	return false
}

// SetTransformations gets a reference to the given []ApiAtlasFieldTransformationView and assigns it to the Transformations field.
func (o *ApiAtlasIngestionPipelineView) SetTransformations(v []ApiAtlasFieldTransformationView) {
	o.Transformations = v
}

func (o ApiAtlasIngestionPipelineView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["_id"] = o.Id
	}
	if !isNil(o.CreatedDate) {
		toSerialize["createdDate"] = o.CreatedDate
	}
	if !isNil(o.GroupId) {
		toSerialize["groupId"] = o.GroupId
	}
	if !isNil(o.LastUpdatedDate) {
		toSerialize["lastUpdatedDate"] = o.LastUpdatedDate
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Sink) {
		toSerialize["sink"] = o.Sink
	}
	if !isNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !isNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !isNil(o.Transformations) {
		toSerialize["transformations"] = o.Transformations
	}
	return json.Marshal(toSerialize)
}

type NullableApiAtlasIngestionPipelineView struct {
	value *ApiAtlasIngestionPipelineView
	isSet bool
}

func (v NullableApiAtlasIngestionPipelineView) Get() *ApiAtlasIngestionPipelineView {
	return v.value
}

func (v *NullableApiAtlasIngestionPipelineView) Set(val *ApiAtlasIngestionPipelineView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasIngestionPipelineView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasIngestionPipelineView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasIngestionPipelineView(val *ApiAtlasIngestionPipelineView) *NullableApiAtlasIngestionPipelineView {
	return &NullableApiAtlasIngestionPipelineView{value: val, isSet: true}
}

func (v NullableApiAtlasIngestionPipelineView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasIngestionPipelineView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


