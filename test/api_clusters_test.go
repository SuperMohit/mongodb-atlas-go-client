/*
MongoDB Atlas Administration API

Testing ClustersApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_ClustersApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test ClustersApiService CheckStatusOfClusterSampleDatasetRequest", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var sampleDatasetId string

        resp, httpRes, err := apiClient.ClustersApi.CheckStatusOfClusterSampleDatasetRequest(context.Background(), groupId, sampleDatasetId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ClustersApiService CreateOneCluster", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string

        resp, httpRes, err := apiClient.ClustersApi.CreateOneCluster(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ClustersApiService LoadSampleDatasetRequestIntoCluster", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var name string

        resp, httpRes, err := apiClient.ClustersApi.LoadSampleDatasetRequestIntoCluster(context.Background(), groupId, name).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ClustersApiService RemoveOneCluster", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var name string

        resp, httpRes, err := apiClient.ClustersApi.RemoveOneCluster(context.Background(), groupId, name).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ClustersApiService ReturnAllAuthorizedClustersInAllProjects", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ClustersApi.ReturnAllAuthorizedClustersInAllProjects(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ClustersApiService ReturnAllCloudProviderRegions", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string

        resp, httpRes, err := apiClient.ClustersApi.ReturnAllCloudProviderRegions(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ClustersApiService ReturnAllClusters", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string

        resp, httpRes, err := apiClient.ClustersApi.ReturnAllClusters(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ClustersApiService ReturnOneAdvancedConfigurationOptionsForOneCluster", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var clusterName string

        resp, httpRes, err := apiClient.ClustersApi.ReturnOneAdvancedConfigurationOptionsForOneCluster(context.Background(), groupId, clusterName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ClustersApiService ReturnOneCluster", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var name string

        resp, httpRes, err := apiClient.ClustersApi.ReturnOneCluster(context.Background(), groupId, name).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ClustersApiService ReturnOneStatusOfAllClusterOperations", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var clusterName string

        resp, httpRes, err := apiClient.ClustersApi.ReturnOneStatusOfAllClusterOperations(context.Background(), groupId, clusterName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ClustersApiService TestFailoverForOneCluster", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var clusterName string

        resp, httpRes, err := apiClient.ClustersApi.TestFailoverForOneCluster(context.Background(), groupId, clusterName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ClustersApiService UpdateAdvancedConfigurationOptionsForOneCluster", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var clusterName string

        resp, httpRes, err := apiClient.ClustersApi.UpdateAdvancedConfigurationOptionsForOneCluster(context.Background(), groupId, clusterName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ClustersApiService UpdateConfigurationOfOneCluster", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var name string

        resp, httpRes, err := apiClient.ClustersApi.UpdateConfigurationOfOneCluster(context.Background(), groupId, name).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ClustersApiService UpgradeOneTenantCluster", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string

        resp, httpRes, err := apiClient.ClustersApi.UpgradeOneTenantCluster(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
