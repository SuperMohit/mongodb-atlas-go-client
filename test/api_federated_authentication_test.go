/*
MongoDB Atlas Administration API

Testing FederatedAuthenticationApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_FederatedAuthenticationApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test FederatedAuthenticationApiService AddRoleMapping", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var federationSettingsId string
        var orgId string

        resp, httpRes, err := apiClient.FederatedAuthenticationApi.AddRoleMapping(context.Background(), federationSettingsId, orgId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test FederatedAuthenticationApiService DeleteFederationApp", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var federationSettingsId string

        resp, httpRes, err := apiClient.FederatedAuthenticationApi.DeleteFederationApp(context.Background(), federationSettingsId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test FederatedAuthenticationApiService DeleteRoleMapping", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var federationSettingsId string
        var id string
        var orgId string

        resp, httpRes, err := apiClient.FederatedAuthenticationApi.DeleteRoleMapping(context.Background(), federationSettingsId, id, orgId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test FederatedAuthenticationApiService GetAllConnectedOrgConfigs", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var federationSettingsId string

        resp, httpRes, err := apiClient.FederatedAuthenticationApi.GetAllConnectedOrgConfigs(context.Background(), federationSettingsId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test FederatedAuthenticationApiService GetAllIdentityProviders", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var federationSettingsId string

        resp, httpRes, err := apiClient.FederatedAuthenticationApi.GetAllIdentityProviders(context.Background(), federationSettingsId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test FederatedAuthenticationApiService GetAllRoleMappings", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var federationSettingsId string
        var orgId string

        resp, httpRes, err := apiClient.FederatedAuthenticationApi.GetAllRoleMappings(context.Background(), federationSettingsId, orgId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test FederatedAuthenticationApiService GetConnectedOrgConfig", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var federationSettingsId string
        var orgId string

        resp, httpRes, err := apiClient.FederatedAuthenticationApi.GetConnectedOrgConfig(context.Background(), federationSettingsId, orgId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test FederatedAuthenticationApiService GetFederationSettings", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var orgId string

        resp, httpRes, err := apiClient.FederatedAuthenticationApi.GetFederationSettings(context.Background(), orgId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test FederatedAuthenticationApiService GetIdentityProvider", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var federationSettingsId string
        var identityProviderId string

        resp, httpRes, err := apiClient.FederatedAuthenticationApi.GetIdentityProvider(context.Background(), federationSettingsId, identityProviderId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test FederatedAuthenticationApiService GetIdentityProviderMetadata", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var federationSettingsId string
        var identityProviderId string

        resp, httpRes, err := apiClient.FederatedAuthenticationApi.GetIdentityProviderMetadata(context.Background(), federationSettingsId, identityProviderId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test FederatedAuthenticationApiService GetRoleMapping", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var federationSettingsId string
        var id string
        var orgId string

        resp, httpRes, err := apiClient.FederatedAuthenticationApi.GetRoleMapping(context.Background(), federationSettingsId, id, orgId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test FederatedAuthenticationApiService RemoveConnectedOrgConfig", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var federationSettingsId string
        var orgId string

        resp, httpRes, err := apiClient.FederatedAuthenticationApi.RemoveConnectedOrgConfig(context.Background(), federationSettingsId, orgId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test FederatedAuthenticationApiService UpdateConnectedOrgConfig", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var federationSettingsId string
        var orgId string

        resp, httpRes, err := apiClient.FederatedAuthenticationApi.UpdateConnectedOrgConfig(context.Background(), federationSettingsId, orgId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test FederatedAuthenticationApiService UpdateIdentityProvider", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var federationSettingsId string
        var identityProviderId string

        resp, httpRes, err := apiClient.FederatedAuthenticationApi.UpdateIdentityProvider(context.Background(), federationSettingsId, identityProviderId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test FederatedAuthenticationApiService UpdateRoleMapping", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var federationSettingsId string
        var id string
        var orgId string

        resp, httpRes, err := apiClient.FederatedAuthenticationApi.UpdateRoleMapping(context.Background(), federationSettingsId, id, orgId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
