/*
MongoDB Atlas Administration API

Testing GlobalClustersApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_GlobalClustersApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test GlobalClustersApiService AddOneCustomZoneMappingToOneGlobalCluster", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var clusterName string

        resp, httpRes, err := apiClient.GlobalClustersApi.AddOneCustomZoneMappingToOneGlobalCluster(context.Background(), groupId, clusterName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GlobalClustersApiService CreateOneManagedNamespaceInOneGlobalCluster", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var clusterName string

        resp, httpRes, err := apiClient.GlobalClustersApi.CreateOneManagedNamespaceInOneGlobalCluster(context.Background(), groupId, clusterName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GlobalClustersApiService DeleteAllCustomZoneMappings", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var clusterName string

        resp, httpRes, err := apiClient.GlobalClustersApi.DeleteAllCustomZoneMappings(context.Background(), groupId, clusterName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GlobalClustersApiService DeleteManagedNamespace", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var clusterName string
        var groupId string

        resp, httpRes, err := apiClient.GlobalClustersApi.DeleteManagedNamespace(context.Background(), clusterName, groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GlobalClustersApiService RemoveAllCustomZoneMappingsFromOneGlobalCluster", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var clusterName string

        resp, httpRes, err := apiClient.GlobalClustersApi.RemoveAllCustomZoneMappingsFromOneGlobalCluster(context.Background(), groupId, clusterName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GlobalClustersApiService RemoveOneManagedNamespaceFromOneGlobalCluster", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var clusterName string

        resp, httpRes, err := apiClient.GlobalClustersApi.RemoveOneManagedNamespaceFromOneGlobalCluster(context.Background(), groupId, clusterName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GlobalClustersApiService ReturnAllGlobalClustersData", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var clusterName string

        resp, httpRes, err := apiClient.GlobalClustersApi.ReturnAllGlobalClustersData(context.Background(), groupId, clusterName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
