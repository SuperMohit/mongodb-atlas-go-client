/*
MongoDB Atlas Administration API

Testing CloudMigrationServiceApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_CloudMigrationServiceApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test CloudMigrationServiceApiService AvailableProjects", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var orgId string

        resp, httpRes, err := apiClient.CloudMigrationServiceApi.AvailableProjects(context.Background(), orgId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test CloudMigrationServiceApiService CreateLinkToken", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var orgId string

        resp, httpRes, err := apiClient.CloudMigrationServiceApi.CreateLinkToken(context.Background(), orgId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test CloudMigrationServiceApiService CreatePushMigration", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string

        resp, httpRes, err := apiClient.CloudMigrationServiceApi.CreatePushMigration(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test CloudMigrationServiceApiService CutoverOneMigration", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var liveMigrationId string

        resp, httpRes, err := apiClient.CloudMigrationServiceApi.CutoverOneMigration(context.Background(), groupId, liveMigrationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test CloudMigrationServiceApiService DeleteOrgLink", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var orgId string

        resp, httpRes, err := apiClient.CloudMigrationServiceApi.DeleteOrgLink(context.Background(), orgId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test CloudMigrationServiceApiService DeleteOrgLink1", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var orgId string

        resp, httpRes, err := apiClient.CloudMigrationServiceApi.DeleteOrgLink1(context.Background(), orgId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test CloudMigrationServiceApiService MigrationLink", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var orgId string

        resp, httpRes, err := apiClient.CloudMigrationServiceApi.MigrationLink(context.Background(), orgId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test CloudMigrationServiceApiService MigrationLinkStatus", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var orgId string

        resp, httpRes, err := apiClient.CloudMigrationServiceApi.MigrationLinkStatus(context.Background(), orgId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test CloudMigrationServiceApiService ReturnOnePushMigration", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var liveMigrationId string

        resp, httpRes, err := apiClient.CloudMigrationServiceApi.ReturnOnePushMigration(context.Background(), groupId, liveMigrationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test CloudMigrationServiceApiService ReturnOneValidationJob", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var validationId string

        resp, httpRes, err := apiClient.CloudMigrationServiceApi.ReturnOneValidationJob(context.Background(), groupId, validationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test CloudMigrationServiceApiService ValidateOneMigration", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string

        resp, httpRes, err := apiClient.CloudMigrationServiceApi.ValidateOneMigration(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
