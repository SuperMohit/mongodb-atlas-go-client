/*
MongoDB Atlas Administration API

Testing NetworkPeeringConnectionsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_NetworkPeeringConnectionsApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test NetworkPeeringConnectionsApiService CreateOneNewNetworkPeeringConnection", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string

        resp, httpRes, err := apiClient.NetworkPeeringConnectionsApi.CreateOneNewNetworkPeeringConnection(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test NetworkPeeringConnectionsApiService RemoveOneExistingNetworkPeeringConnection", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var peerId string

        resp, httpRes, err := apiClient.NetworkPeeringConnectionsApi.RemoveOneExistingNetworkPeeringConnection(context.Background(), groupId, peerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test NetworkPeeringConnectionsApiService ReturnAllNetworkPeeringConnectionsInOneProject", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string

        resp, httpRes, err := apiClient.NetworkPeeringConnectionsApi.ReturnAllNetworkPeeringConnectionsInOneProject(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test NetworkPeeringConnectionsApiService ReturnOneNetworkPeeringConnectionInOneProject", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var peerId string

        resp, httpRes, err := apiClient.NetworkPeeringConnectionsApi.ReturnOneNetworkPeeringConnectionInOneProject(context.Background(), groupId, peerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test NetworkPeeringConnectionsApiService UpdateOneNewNetworkPeeringConnection", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var peerId string

        resp, httpRes, err := apiClient.NetworkPeeringConnectionsApi.UpdateOneNewNetworkPeeringConnection(context.Background(), groupId, peerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
