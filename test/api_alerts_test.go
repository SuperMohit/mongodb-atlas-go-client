/*
MongoDB Atlas Administration API

Testing AlertsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_AlertsApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test AlertsApiService AcknowledgeOneAlertFromOneProject", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var alertId string

        resp, httpRes, err := apiClient.AlertsApi.AcknowledgeOneAlertFromOneProject(context.Background(), groupId, alertId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AlertsApiService ReturnAllAlertConfigurationsSetForOneAlert", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var alertId string

        resp, httpRes, err := apiClient.AlertsApi.ReturnAllAlertConfigurationsSetForOneAlert(context.Background(), groupId, alertId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AlertsApiService ReturnAllAlertsFromOneProject", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string

        resp, httpRes, err := apiClient.AlertsApi.ReturnAllAlertsFromOneProject(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AlertsApiService ReturnOneAlertFromOneProject", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var alertId string

        resp, httpRes, err := apiClient.AlertsApi.ReturnOneAlertFromOneProject(context.Background(), groupId, alertId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
