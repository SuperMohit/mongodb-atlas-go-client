/*
MongoDB Atlas Administration API

Testing TeamsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_TeamsApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test TeamsApiService AddOneOrMoreTeamsToOneProject", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string

        resp, httpRes, err := apiClient.TeamsApi.AddOneOrMoreTeamsToOneProject(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TeamsApiService AssignOneOrganizationUserToOneTeam", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var orgId string
        var teamId string

        resp, httpRes, err := apiClient.TeamsApi.AssignOneOrganizationUserToOneTeam(context.Background(), orgId, teamId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TeamsApiService CreateOneTeamInOneOrganization", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var orgId string

        resp, httpRes, err := apiClient.TeamsApi.CreateOneTeamInOneOrganization(context.Background(), orgId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TeamsApiService RemoveOneMongoDBCloudUserFromOneTeam", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var orgId string
        var teamId string
        var userId string

        resp, httpRes, err := apiClient.TeamsApi.RemoveOneMongoDBCloudUserFromOneTeam(context.Background(), orgId, teamId, userId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TeamsApiService RemoveOneTeamFromOneOrganization", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var orgId string
        var teamId string

        resp, httpRes, err := apiClient.TeamsApi.RemoveOneTeamFromOneOrganization(context.Background(), orgId, teamId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TeamsApiService RemoveOneTeamFromOneProject", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var teamId string

        resp, httpRes, err := apiClient.TeamsApi.RemoveOneTeamFromOneProject(context.Background(), groupId, teamId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TeamsApiService RenameOneTeam", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var orgId string
        var teamId string

        resp, httpRes, err := apiClient.TeamsApi.RenameOneTeam(context.Background(), orgId, teamId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TeamsApiService ReturnAllMongoDBCloudUsersAssignedToOneTeam", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var orgId string
        var teamId string

        resp, httpRes, err := apiClient.TeamsApi.ReturnAllMongoDBCloudUsersAssignedToOneTeam(context.Background(), orgId, teamId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TeamsApiService ReturnAllTeams", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string

        resp, httpRes, err := apiClient.TeamsApi.ReturnAllTeams(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TeamsApiService ReturnAllTeamsInOneOrganization", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var orgId string

        resp, httpRes, err := apiClient.TeamsApi.ReturnAllTeamsInOneOrganization(context.Background(), orgId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TeamsApiService ReturnOneTeamUsingItsId", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var orgId string
        var teamId string

        resp, httpRes, err := apiClient.TeamsApi.ReturnOneTeamUsingItsId(context.Background(), orgId, teamId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TeamsApiService ReturnOneTeamUsingItsName", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var orgId string
        var teamName string

        resp, httpRes, err := apiClient.TeamsApi.ReturnOneTeamUsingItsName(context.Background(), orgId, teamName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TeamsApiService UpdateTeamRolesInOneProject", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var teamId string

        resp, httpRes, err := apiClient.TeamsApi.UpdateTeamRolesInOneProject(context.Background(), groupId, teamId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
