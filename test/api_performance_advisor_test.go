/*
MongoDB Atlas Administration API

Testing PerformanceAdvisorApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_PerformanceAdvisorApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test PerformanceAdvisorApiService DisableManagedSlowOperationThreshold", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string

        resp, httpRes, err := apiClient.PerformanceAdvisorApi.DisableManagedSlowOperationThreshold(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PerformanceAdvisorApiService EnableManagedSlowOperationThreshold", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string

        resp, httpRes, err := apiClient.PerformanceAdvisorApi.EnableManagedSlowOperationThreshold(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PerformanceAdvisorApiService ReturnAllNamespacesForOneHost", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var hostId string

        resp, httpRes, err := apiClient.PerformanceAdvisorApi.ReturnAllNamespacesForOneHost(context.Background(), groupId, hostId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PerformanceAdvisorApiService ReturnAllNamespacesForOneHost1", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var processId string

        resp, httpRes, err := apiClient.PerformanceAdvisorApi.ReturnAllNamespacesForOneHost1(context.Background(), groupId, processId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PerformanceAdvisorApiService ReturnSlowQueries", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var hostId string

        resp, httpRes, err := apiClient.PerformanceAdvisorApi.ReturnSlowQueries(context.Background(), groupId, hostId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PerformanceAdvisorApiService ReturnSlowQueries1", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var processId string

        resp, httpRes, err := apiClient.PerformanceAdvisorApi.ReturnSlowQueries1(context.Background(), groupId, processId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PerformanceAdvisorApiService ReturnSuggestedIndexes", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var hostId string

        resp, httpRes, err := apiClient.PerformanceAdvisorApi.ReturnSuggestedIndexes(context.Background(), groupId, hostId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PerformanceAdvisorApiService ReturnSuggestedIndexes1", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var processId string

        resp, httpRes, err := apiClient.PerformanceAdvisorApi.ReturnSuggestedIndexes1(context.Background(), groupId, processId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
