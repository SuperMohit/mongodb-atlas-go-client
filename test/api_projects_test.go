/*
MongoDB Atlas Administration API

Testing ProjectsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_ProjectsApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test ProjectsApiService CancelOneProjectInvitation", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var invitationId string

        resp, httpRes, err := apiClient.ProjectsApi.CancelOneProjectInvitation(context.Background(), groupId, invitationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ProjectsApiService CreateOneProject", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ProjectsApi.CreateOneProject(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ProjectsApiService GetGroupSettings", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string

        resp, httpRes, err := apiClient.ProjectsApi.GetGroupSettings(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ProjectsApiService InviteOneMongoDBCloudUserToJoinOneProject", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string

        resp, httpRes, err := apiClient.ProjectsApi.InviteOneMongoDBCloudUserToJoinOneProject(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ProjectsApiService PatchGroupSettings", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string

        resp, httpRes, err := apiClient.ProjectsApi.PatchGroupSettings(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ProjectsApiService RemoveOneProject", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string

        resp, httpRes, err := apiClient.ProjectsApi.RemoveOneProject(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ProjectsApiService RemoveOneUserFromOneProject", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var userId string

        resp, httpRes, err := apiClient.ProjectsApi.RemoveOneUserFromOneProject(context.Background(), groupId, userId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ProjectsApiService ReturnAllProjectInvitations", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string

        resp, httpRes, err := apiClient.ProjectsApi.ReturnAllProjectInvitations(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ProjectsApiService ReturnAllProjects", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ProjectsApi.ReturnAllProjects(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ProjectsApiService ReturnAllUsersInOneProject", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string

        resp, httpRes, err := apiClient.ProjectsApi.ReturnAllUsersInOneProject(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ProjectsApiService ReturnOneProject", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string

        resp, httpRes, err := apiClient.ProjectsApi.ReturnOneProject(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ProjectsApiService ReturnOneProjectInvitation", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var invitationId string

        resp, httpRes, err := apiClient.ProjectsApi.ReturnOneProjectInvitation(context.Background(), groupId, invitationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ProjectsApiService ReturnOneProjectUsingItsName", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupName string

        resp, httpRes, err := apiClient.ProjectsApi.ReturnOneProjectUsingItsName(context.Background(), groupName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ProjectsApiService UpdateOneProjectInvitation", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string

        resp, httpRes, err := apiClient.ProjectsApi.UpdateOneProjectInvitation(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ProjectsApiService UpdateOneProjectInvitationByInvitationId", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var invitationId string

        resp, httpRes, err := apiClient.ProjectsApi.UpdateOneProjectInvitationByInvitationId(context.Background(), groupId, invitationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
