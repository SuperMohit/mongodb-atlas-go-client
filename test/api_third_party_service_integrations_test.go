/*
MongoDB Atlas Administration API

Testing ThirdPartyServiceIntegrationsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_ThirdPartyServiceIntegrationsApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test ThirdPartyServiceIntegrationsApiService ConfigureOneThirdPartyServiceIntegration", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var integrationType string
        var groupId string

        resp, httpRes, err := apiClient.ThirdPartyServiceIntegrationsApi.ConfigureOneThirdPartyServiceIntegration(context.Background(), integrationType, groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ThirdPartyServiceIntegrationsApiService RemoveOneThirdPartyServiceIntegration", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var integrationType string
        var groupId string

        resp, httpRes, err := apiClient.ThirdPartyServiceIntegrationsApi.RemoveOneThirdPartyServiceIntegration(context.Background(), integrationType, groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ThirdPartyServiceIntegrationsApiService ReturnAllActiveThirdPartyServiceIntegrations", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string

        resp, httpRes, err := apiClient.ThirdPartyServiceIntegrationsApi.ReturnAllActiveThirdPartyServiceIntegrations(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ThirdPartyServiceIntegrationsApiService ReturnOneThirdPartyServiceIntegration", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var integrationType string

        resp, httpRes, err := apiClient.ThirdPartyServiceIntegrationsApi.ReturnOneThirdPartyServiceIntegration(context.Background(), groupId, integrationType).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ThirdPartyServiceIntegrationsApiService UpdateOneThirdPartyServiceIntegration", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var integrationType string
        var groupId string

        resp, httpRes, err := apiClient.ThirdPartyServiceIntegrationsApi.UpdateOneThirdPartyServiceIntegration(context.Background(), integrationType, groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
