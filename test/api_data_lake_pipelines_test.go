/*
MongoDB Atlas Administration API

Testing DataLakePipelinesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_DataLakePipelinesApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test DataLakePipelinesApiService CreateOneDataLakePipeline", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string

        resp, httpRes, err := apiClient.DataLakePipelinesApi.CreateOneDataLakePipeline(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DataLakePipelinesApiService DeletePipelineRunDataset", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var pipelineName string
        var pipelineRunId string

        resp, httpRes, err := apiClient.DataLakePipelinesApi.DeletePipelineRunDataset(context.Background(), groupId, pipelineName, pipelineRunId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DataLakePipelinesApiService PauseOnePipelineInOneProject", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var pipelineName string

        resp, httpRes, err := apiClient.DataLakePipelinesApi.PauseOnePipelineInOneProject(context.Background(), groupId, pipelineName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DataLakePipelinesApiService RemoveOneDataLakePipeline", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var pipelineName string

        resp, httpRes, err := apiClient.DataLakePipelinesApi.RemoveOneDataLakePipeline(context.Background(), groupId, pipelineName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DataLakePipelinesApiService ResumeOnePipelineInOneProject", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var pipelineName string

        resp, httpRes, err := apiClient.DataLakePipelinesApi.ResumeOnePipelineInOneProject(context.Background(), groupId, pipelineName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DataLakePipelinesApiService ReturnAllDataLakePipelineRunsFromOneProject", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var pipelineName string

        resp, httpRes, err := apiClient.DataLakePipelinesApi.ReturnAllDataLakePipelineRunsFromOneProject(context.Background(), groupId, pipelineName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DataLakePipelinesApiService ReturnAllDataLakePipelinesFromOneProject", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string

        resp, httpRes, err := apiClient.DataLakePipelinesApi.ReturnAllDataLakePipelinesFromOneProject(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DataLakePipelinesApiService ReturnAvailableSchedulesForPipeline", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var pipelineName string

        resp, httpRes, err := apiClient.DataLakePipelinesApi.ReturnAvailableSchedulesForPipeline(context.Background(), groupId, pipelineName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DataLakePipelinesApiService ReturnAvailableSnapshotsForPipeline", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var pipelineName string

        resp, httpRes, err := apiClient.DataLakePipelinesApi.ReturnAvailableSnapshotsForPipeline(context.Background(), groupId, pipelineName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DataLakePipelinesApiService ReturnOnePipelineInOneProject", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var pipelineName string

        resp, httpRes, err := apiClient.DataLakePipelinesApi.ReturnOnePipelineInOneProject(context.Background(), groupId, pipelineName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DataLakePipelinesApiService ReturnOnePipelineRunInOneProject", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var pipelineName string
        var pipelineRunId string

        resp, httpRes, err := apiClient.DataLakePipelinesApi.ReturnOnePipelineRunInOneProject(context.Background(), groupId, pipelineName, pipelineRunId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DataLakePipelinesApiService TriggerOneOnDemandSnapshotIngestion", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var pipelineName string

        resp, httpRes, err := apiClient.DataLakePipelinesApi.TriggerOneOnDemandSnapshotIngestion(context.Background(), groupId, pipelineName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DataLakePipelinesApiService UpdateOneDataLakePipeline", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var pipelineName string

        resp, httpRes, err := apiClient.DataLakePipelinesApi.UpdateOneDataLakePipeline(context.Background(), groupId, pipelineName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
