/*
MongoDB Atlas Administration API

Testing LDAPConfigurationApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_LDAPConfigurationApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test LDAPConfigurationApiService RemoveOneCurrentLdapUserToDnMapping", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string

        resp, httpRes, err := apiClient.LDAPConfigurationApi.RemoveOneCurrentLdapUserToDnMapping(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LDAPConfigurationApiService ReturnOneCurrentLdapConfiguration", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string

        resp, httpRes, err := apiClient.LDAPConfigurationApi.ReturnOneCurrentLdapConfiguration(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LDAPConfigurationApiService ReturnOneStatusOfOneVerifyLdapConfigurationRequest", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var requestId string

        resp, httpRes, err := apiClient.LDAPConfigurationApi.ReturnOneStatusOfOneVerifyLdapConfigurationRequest(context.Background(), groupId, requestId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LDAPConfigurationApiService SaveOneLdapConfiguration", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string

        resp, httpRes, err := apiClient.LDAPConfigurationApi.SaveOneLdapConfiguration(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LDAPConfigurationApiService VerifyOneLdapConfigurationInOneProject", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string

        resp, httpRes, err := apiClient.LDAPConfigurationApi.VerifyOneLdapConfigurationInOneProject(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
