/*
MongoDB Atlas Administration API

Testing PrivateEndpointServicesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_PrivateEndpointServicesApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test PrivateEndpointServicesApiService CreateOnePrivateEndpointForOneProvider", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var cloudProvider string
        var endpointServiceId string

        resp, httpRes, err := apiClient.PrivateEndpointServicesApi.CreateOnePrivateEndpointForOneProvider(context.Background(), groupId, cloudProvider, endpointServiceId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PrivateEndpointServicesApiService CreateOnePrivateEndpointServiceForOneProvider", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string

        resp, httpRes, err := apiClient.PrivateEndpointServicesApi.CreateOnePrivateEndpointServiceForOneProvider(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PrivateEndpointServicesApiService RemoveOnePrivateEndpointForOneProvider", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var cloudProvider string
        var endpointId string
        var endpointServiceId string

        resp, httpRes, err := apiClient.PrivateEndpointServicesApi.RemoveOnePrivateEndpointForOneProvider(context.Background(), groupId, cloudProvider, endpointId, endpointServiceId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PrivateEndpointServicesApiService RemoveOnePrivateEndpointServiceForOneProvider", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var cloudProvider string
        var endpointServiceId string

        resp, httpRes, err := apiClient.PrivateEndpointServicesApi.RemoveOnePrivateEndpointServiceForOneProvider(context.Background(), groupId, cloudProvider, endpointServiceId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PrivateEndpointServicesApiService ReturnAllPrivateEndpointServicesForOneProvider", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var cloudProvider string

        resp, httpRes, err := apiClient.PrivateEndpointServicesApi.ReturnAllPrivateEndpointServicesForOneProvider(context.Background(), groupId, cloudProvider).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PrivateEndpointServicesApiService ReturnOnePrivateEndpointForOneProvider", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var cloudProvider string
        var endpointId string
        var endpointServiceId string

        resp, httpRes, err := apiClient.PrivateEndpointServicesApi.ReturnOnePrivateEndpointForOneProvider(context.Background(), groupId, cloudProvider, endpointId, endpointServiceId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PrivateEndpointServicesApiService ReturnOnePrivateEndpointServiceForOneProvider", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var cloudProvider string
        var endpointServiceId string

        resp, httpRes, err := apiClient.PrivateEndpointServicesApi.ReturnOnePrivateEndpointServiceForOneProvider(context.Background(), groupId, cloudProvider, endpointServiceId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PrivateEndpointServicesApiService ReturnRegionalizedPrivateEndpointStatus", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string

        resp, httpRes, err := apiClient.PrivateEndpointServicesApi.ReturnRegionalizedPrivateEndpointStatus(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PrivateEndpointServicesApiService ToggleRegionalizedPrivateEndpointStatus", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string

        resp, httpRes, err := apiClient.PrivateEndpointServicesApi.ToggleRegionalizedPrivateEndpointStatus(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
