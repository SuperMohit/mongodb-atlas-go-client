/*
MongoDB Atlas Administration API

Testing NetworkPeeringContainersApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_NetworkPeeringContainersApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test NetworkPeeringContainersApiService CreateOneNewNetworkPeeringContainer", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string

        resp, httpRes, err := apiClient.NetworkPeeringContainersApi.CreateOneNewNetworkPeeringContainer(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test NetworkPeeringContainersApiService RemoveOneNetworkPeeringContainer", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var containerId string

        resp, httpRes, err := apiClient.NetworkPeeringContainersApi.RemoveOneNetworkPeeringContainer(context.Background(), groupId, containerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test NetworkPeeringContainersApiService ReturnAllNetworkPeeringContainersInOneProject", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string

        resp, httpRes, err := apiClient.NetworkPeeringContainersApi.ReturnAllNetworkPeeringContainersInOneProject(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test NetworkPeeringContainersApiService ReturnAllNetworkPeeringContainersInOneProjectForOneCloudProvider", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string

        resp, httpRes, err := apiClient.NetworkPeeringContainersApi.ReturnAllNetworkPeeringContainersInOneProjectForOneCloudProvider(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test NetworkPeeringContainersApiService ReturnOneNetworkPeeringContainer", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var containerId string

        resp, httpRes, err := apiClient.NetworkPeeringContainersApi.ReturnOneNetworkPeeringContainer(context.Background(), groupId, containerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test NetworkPeeringContainersApiService UpdateOneNetworkPeeringContainer", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId string
        var containerId string

        resp, httpRes, err := apiClient.NetworkPeeringContainersApi.UpdateOneNetworkPeeringContainer(context.Background(), groupId, containerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
