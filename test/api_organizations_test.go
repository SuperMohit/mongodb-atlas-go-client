/*
MongoDB Atlas Administration API

Testing OrganizationsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_OrganizationsApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test OrganizationsApiService CancelOneOrganizationInvitation", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var orgId string
        var invitationId string

        resp, httpRes, err := apiClient.OrganizationsApi.CancelOneOrganizationInvitation(context.Background(), orgId, invitationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test OrganizationsApiService InviteOneMongoDBUserToJoinOneAtlasOrganization", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var orgId string

        resp, httpRes, err := apiClient.OrganizationsApi.InviteOneMongoDBUserToJoinOneAtlasOrganization(context.Background(), orgId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test OrganizationsApiService RemoveOneOrganization", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var orgId string

        resp, httpRes, err := apiClient.OrganizationsApi.RemoveOneOrganization(context.Background(), orgId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test OrganizationsApiService RenameOneOrganization", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var orgId string

        resp, httpRes, err := apiClient.OrganizationsApi.RenameOneOrganization(context.Background(), orgId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test OrganizationsApiService ReturnAllOrganizationAtlasUsers", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var orgId string

        resp, httpRes, err := apiClient.OrganizationsApi.ReturnAllOrganizationAtlasUsers(context.Background(), orgId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test OrganizationsApiService ReturnAllOrganizationInvitations", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var orgId string

        resp, httpRes, err := apiClient.OrganizationsApi.ReturnAllOrganizationInvitations(context.Background(), orgId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test OrganizationsApiService ReturnAllOrganizations", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.OrganizationsApi.ReturnAllOrganizations(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test OrganizationsApiService ReturnOneOrMoreProjectsInOneOrganization", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var orgId string

        resp, httpRes, err := apiClient.OrganizationsApi.ReturnOneOrMoreProjectsInOneOrganization(context.Background(), orgId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test OrganizationsApiService ReturnOneOrganization", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var orgId string

        resp, httpRes, err := apiClient.OrganizationsApi.ReturnOneOrganization(context.Background(), orgId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test OrganizationsApiService ReturnOneOrganizationInvitation", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var orgId string
        var invitationId string

        resp, httpRes, err := apiClient.OrganizationsApi.ReturnOneOrganizationInvitation(context.Background(), orgId, invitationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test OrganizationsApiService UpdateOneOrganizationInvitation", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var orgId string

        resp, httpRes, err := apiClient.OrganizationsApi.UpdateOneOrganizationInvitation(context.Background(), orgId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test OrganizationsApiService UpdateOneOrganizationInvitationByInvitationId", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var orgId string
        var invitationId string

        resp, httpRes, err := apiClient.OrganizationsApi.UpdateOneOrganizationInvitationByInvitationId(context.Background(), orgId, invitationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
